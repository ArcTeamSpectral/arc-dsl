import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Image from "next/image";
import fs from 'fs';
import path from 'path';
import Link from "next/link";
import { ScrollArea } from "@/components/ui/scroll-area";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Layout>{children}</Layout>
      </body>
    </html>
  );
}

async function get_data() {
  const filePath = path.join(process.cwd(), 'app', 'solvers_graphs.jsonl');
  const fileContents = await fs.promises.readFile(filePath, 'utf8');
  const solvers_graphs = fileContents.trim().split('\n').map(line => JSON.parse(line));
  console.log(solvers_graphs);
  return solvers_graphs;
}

async function Layout({ children }: { children: React.ReactNode }) {
  const functionData = await get_data();
  return (
    <div className="flex flex-col h-screen">
      <div className="h-16 bg-gray-900">
        {/* Top nav content goes here */}
        <h1 className="text-2xl font-bold text-white p-4">ARC DSL VIS</h1>
      </div>
      <div className="flex flex-1 overflow-hidden">
        <div className="w-1/4 bg-white dark:bg-gray-900">
          <ScrollArea className="h-[95%] m-4 rounded-lg bg-gray-50">
            {functionData.map((graph, index) => {
              const lineCount = graph.line_count || 0;
              const maxLineCount = Math.max(...functionData.map(g => g.line_count || 0));
              const hue = Math.round(120 * (1 - lineCount / maxLineCount)); // 120 for green to 0 for red

              return (
                <Link
                  key={index}
                  href={`/${graph.name}`}
                  className={`block w-full text-left px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-blue-100 transition-colors duration-200 ease-in-out border-b border-gray-200 dark:border-gray-700`}
                >
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{graph.name}</span>
                    <span className="inline-flex items-center rounded-full bg-gray-200 dark:bg-gray-700 px-2.5 py-0.5 text-xs font-medium text-gray-800 dark:text-gray-200">
                      {lineCount} lines
                    </span>
                  </div>
                </Link>
              );
            })}
          </ScrollArea>
        </div>
        <div className="w-3/4 p-4 overflow-auto">
          {children}
        </div>
      </div>
    </div>
  );
}
