{"name": "67a3c6ac", "graph": "graph TD\n    O[vmirror]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_67a3c6ac(I):\n    O = vmirror(I)\n    return O", "line_count": 3}
{"name": "68b16354", "graph": "graph TD\n    O[hmirror]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_68b16354(I):\n    O = hmirror(I)\n    return O", "line_count": 3}
{"name": "74dd1130", "graph": "graph TD\n    O[dmirror]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_74dd1130(I):\n    O = dmirror(I)\n    return O", "line_count": 3}
{"name": "3c9b0459", "graph": "graph TD\n    O[rot180]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3c9b0459(I):\n    O = rot180(I)\n    return O", "line_count": 3}
{"name": "6150a2bd", "graph": "graph TD\n    O[rot180]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6150a2bd(I):\n    O = rot180(I)\n    return O", "line_count": 3}
{"name": "9172f3a0", "graph": "graph TD\n    O[upscale]\n    I[I]\n    I --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9172f3a0(I):\n    O = upscale(I, THREE)\n    return O", "line_count": 3}
{"name": "9dfd6313", "graph": "graph TD\n    O[dmirror]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9dfd6313(I):\n    O = dmirror(I)\n    return O", "line_count": 3}
{"name": "a416b8f3", "graph": "graph TD\n    O[hconcat]\n    I[I]\n    I --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a416b8f3(I):\n    O = hconcat(I, I)\n    return O", "line_count": 3}
{"name": "b1948b0a", "graph": "graph TD\n    O[replace]\n    I[I]\n    I --> O\n    SIX --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b1948b0a(I):\n    O = replace(I, SIX, TWO)\n    return O", "line_count": 3}
{"name": "c59eb873", "graph": "graph TD\n    O[upscale]\n    I[I]\n    I --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c59eb873(I):\n    O = upscale(I, TWO)\n    return O", "line_count": 3}
{"name": "c8f0f002", "graph": "graph TD\n    O[replace]\n    I[I]\n    I --> O\n    SEVEN --> O\n    FIVE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c8f0f002(I):\n    O = replace(I, SEVEN, FIVE)\n    return O", "line_count": 3}
{"name": "d10ecb37", "graph": "graph TD\n    O[crop]\n    I[I]\n    I --> O\n    ORIGIN --> O\n    TWO_BY_TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d10ecb37(I):\n    O = crop(I, ORIGIN, TWO_BY_TWO)\n    return O", "line_count": 3}
{"name": "d511f180", "graph": "graph TD\n    O[switch]\n    I[I]\n    I --> O\n    FIVE --> O\n    EIGHT --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d511f180(I):\n    O = switch(I, FIVE, EIGHT)\n    return O", "line_count": 3}
{"name": "ed36ccf7", "graph": "graph TD\n    O[rot270]\n    I[I]\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ed36ccf7(I):\n    O = rot270(I)\n    return O", "line_count": 3}
{"name": "4c4377d9", "graph": "graph TD\n    x1[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    x1 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4c4377d9(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O", "line_count": 4}
{"name": "6d0aefbc", "graph": "graph TD\n    x1[vmirror]\n    O[hconcat]\n    I[I]\n    I --> x1\n    I --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6d0aefbc(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O", "line_count": 4}
{"name": "6fa7a44f", "graph": "graph TD\n    x1[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6fa7a44f(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O", "line_count": 4}
{"name": "5614dbcf", "graph": "graph TD\n    x1[replace]\n    O[downscale]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    ZERO --> x1\n    x1 --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5614dbcf(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O", "line_count": 4}
{"name": "5bd6f4ac", "graph": "graph TD\n    x1[tojvec]\n    O[crop]\n    I[I]\n    SIX --> x1\n    I --> O\n    x1 --> O\n    THREE_BY_THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5bd6f4ac(I):\n    x1 = tojvec(SIX)\n    O = crop(I, x1, THREE_BY_THREE)\n    return O", "line_count": 4}
{"name": "5582e5ca", "graph": "graph TD\n    x1[mostcolor]\n    O[canvas]\n    I[I]\n    I --> x1\n    x1 --> O\n    THREE_BY_THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5582e5ca(I):\n    x1 = mostcolor(I)\n    O = canvas(x1, THREE_BY_THREE)\n    return O", "line_count": 4}
{"name": "8be77c9e", "graph": "graph TD\n    x1[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8be77c9e(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O", "line_count": 4}
{"name": "c9e6f938", "graph": "graph TD\n    x1[vmirror]\n    O[hconcat]\n    I[I]\n    I --> x1\n    I --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c9e6f938(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O", "line_count": 4}
{"name": "2dee498d", "graph": "graph TD\n    x1[hsplit]\n    O[first]\n    I[I]\n    I --> x1\n    THREE --> x1\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2dee498d(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O", "line_count": 4}
{"name": "1cf80156", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1cf80156(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "32597951", "graph": "graph TD\n    x1[ofcolor]\n    x2[delta]\n    O[fill]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    x1 --> x2\n    I --> O\n    THREE --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_32597951(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = delta(x1)\n    O = fill(I, THREE, x2)\n    return O", "line_count": 5}
{"name": "25ff71a9", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    I --> O\n    x2 --> O\n    DOWN --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_25ff71a9(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    O = move(I, x2, DOWN)\n    return O", "line_count": 5}
{"name": "0b148d64", "graph": "graph TD\n    x1[partition]\n    x2[argmin]\n    O[subgrid]\n    I[I]\n    I --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0b148d64(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "1f85a75f", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1f85a75f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "23b5c85d", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_23b5c85d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "9ecd008a", "graph": "graph TD\n    x1[vmirror]\n    x2[ofcolor]\n    O[subgrid]\n    I[I]\n    I --> x1\n    I --> x2\n    ZERO --> x2\n    x2 --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9ecd008a(I):\n    x1 = vmirror(I)\n    x2 = ofcolor(I, ZERO)\n    O = subgrid(x2, x1)\n    return O", "line_count": 5}
{"name": "ac0a08a4", "graph": "graph TD\n    x1[colorcount]\n    x2[subtract]\n    O[upscale]\n    I[I]\n    I --> x1\n    ZERO --> x1\n    NINE --> x2\n    x1 --> x2\n    I --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ac0a08a4(I):\n    x1 = colorcount(I, ZERO)\n    x2 = subtract(NINE, x1)\n    O = upscale(I, x2)\n    return O", "line_count": 5}
{"name": "be94b721", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_be94b721(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "c909285e", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    O[subgrid]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c909285e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    O = subgrid(x2, I)\n    return O", "line_count": 5}
{"name": "f25ffba3", "graph": "graph TD\n    x1[bottomhalf]\n    x2[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    x1 --> x2\n    x2 --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f25ffba3(I):\n    x1 = bottomhalf(I)\n    x2 = hmirror(x1)\n    O = vconcat(x2, x1)\n    return O", "line_count": 5}
{"name": "c1d99e64", "graph": "graph TD\n    x1[frontiers]\n    x2[merge]\n    O[fill]\n    I[I]\n    I --> x1\n    x1 --> x2\n    I --> O\n    TWO --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c1d99e64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O", "line_count": 5}
{"name": "b91ae062", "graph": "graph TD\n    x1[numcolors]\n    x2[decrement]\n    O[upscale]\n    I[I]\n    I --> x1\n    x1 --> x2\n    I --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b91ae062(I):\n    x1 = numcolors(I)\n    x2 = decrement(x1)\n    O = upscale(I, x2)\n    return O", "line_count": 5}
{"name": "3aa6fb7a", "graph": "graph TD\n    x1[objects]\n    x2[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    corners --> x2\n    x1 --> x2\n    I --> O\n    ONE --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3aa6fb7a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O", "line_count": 5}
{"name": "7b7f7511", "graph": "graph TD\n    x1[portrait]\n    x2[branch]\n    O[x2]\n    I[I]\n    I --> x1\n    x1 --> x2\n    tophalf --> x2\n    lefthalf --> x2\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7b7f7511(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O", "line_count": 5}
{"name": "4258a5f9", "graph": "graph TD\n    x1[ofcolor]\n    x2[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    neighbors --> x2\n    x1 --> x2\n    I --> O\n    ONE --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4258a5f9(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O", "line_count": 5}
{"name": "2dc579da", "graph": "graph TD\n    x1[vsplit]\n    x2[rbind]\n    x3[mapply]\n    O[argmax]\n    I[I]\n    I --> x1\n    TWO --> x1\n    hsplit --> x2\n    TWO --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> O\n    numcolors --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2dc579da(I):\n    x1 = vsplit(I, TWO)\n    x2 = rbind(hsplit, TWO)\n    x3 = mapply(x2, x1)\n    O = argmax(x3, numcolors)\n    return O", "line_count": 6}
{"name": "28bf18c6", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    O[hconcat]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_28bf18c6(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O", "line_count": 6}
{"name": "3af2c5a8", "graph": "graph TD\n    x1[vmirror]\n    x2[hconcat]\n    x3[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    x2 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3af2c5a8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O", "line_count": 6}
{"name": "44f52bb0", "graph": "graph TD\n    x1[vmirror]\n    x2[equality]\n    x3[branch]\n    O[canvas]\n    I[I]\n    I --> x1\n    x1 --> x2\n    I --> x2\n    x2 --> x3\n    ONE --> x3\n    SEVEN --> x3\n    x3 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_44f52bb0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = branch(x2, ONE, SEVEN)\n    O = canvas(x3, UNITY)\n    return O", "line_count": 6}
{"name": "62c24649", "graph": "graph TD\n    x1[vmirror]\n    x2[hconcat]\n    x3[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    x2 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_62c24649(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O", "line_count": 6}
{"name": "67e8384a", "graph": "graph TD\n    x1[vmirror]\n    x2[hconcat]\n    x3[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    x2 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_67e8384a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O", "line_count": 6}
{"name": "7468f01a", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    O[vmirror]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7468f01a(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = vmirror(x3)\n    return O", "line_count": 6}
{"name": "662c240a", "graph": "graph TD\n    x1[vsplit]\n    x2[fork]\n    x3[compose]\n    O[extract]\n    I[I]\n    I --> x1\n    THREE --> x1\n    equality --> x2\n    dmirror --> x2\n    identity --> x2\n    flip --> x3\n    x2 --> x3\n    x1 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_662c240a(I):\n    x1 = vsplit(I, THREE)\n    x2 = fork(equality, dmirror, identity)\n    x3 = compose(flip, x2)\n    O = extract(x1, x3)\n    return O", "line_count": 6}
{"name": "42a50994", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[merge]\n    O[cover]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x2 --> x3\n    I --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_42a50994(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = cover(I, x3)\n    return O", "line_count": 6}
{"name": "56ff96f3", "graph": "graph TD\n    x1[fgpartition]\n    x2[fork]\n    x3[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    recolor --> x2\n    color --> x2\n    backdrop --> x2\n    x2 --> x3\n    x1 --> x3\n    I --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_56ff96f3(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O", "line_count": 6}
{"name": "50cb2852", "graph": "graph TD\n    x1[objects]\n    x2[compose]\n    x3[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    backdrop --> x2\n    inbox --> x2\n    x2 --> x3\n    x1 --> x3\n    I --> O\n    EIGHT --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_50cb2852(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O", "line_count": 6}
{"name": "4347f46a", "graph": "graph TD\n    x1[objects]\n    x2[fork]\n    x3[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    difference --> x2\n    toindices --> x2\n    box --> x2\n    x2 --> x3\n    x1 --> x3\n    I --> O\n    ZERO --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4347f46a(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O", "line_count": 6}
{"name": "46f33fce", "graph": "graph TD\n    x1[rot180]\n    x2[downscale]\n    x3[rot180]\n    O[upscale]\n    I[I]\n    I --> x1\n    x1 --> x2\n    TWO --> x2\n    x2 --> x3\n    x3 --> O\n    FOUR --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_46f33fce(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O", "line_count": 6}
{"name": "a740d043", "graph": "graph TD\n    x1[objects]\n    x2[merge]\n    x3[subgrid]\n    O[replace]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> O\n    ONE --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a740d043(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O", "line_count": 6}
{"name": "a79310a0", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[move]\n    O[replace]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    I --> x3\n    x2 --> x3\n    DOWN --> x3\n    x3 --> O\n    EIGHT --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a79310a0(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = move(I, x2, DOWN)\n    O = replace(x3, EIGHT, TWO)\n    return O", "line_count": 6}
{"name": "aabf363d", "graph": "graph TD\n    x1[leastcolor]\n    x2[replace]\n    x3[leastcolor]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    ZERO --> x2\n    x2 --> x3\n    x2 --> O\n    x3 --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_aabf363d(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = leastcolor(x2)\n    O = replace(x2, x3, x1)\n    return O", "line_count": 6}
{"name": "ae4f1146", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[argmax]\n    O[subgrid]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    colorcount --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ae4f1146(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(colorcount, ONE)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O", "line_count": 6}
{"name": "b27ca6d3", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    TWO --> x2\n    outbox --> x3\n    x2 --> x3\n    I --> O\n    THREE --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b27ca6d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, THREE, x3)\n    return O", "line_count": 6}
{"name": "ce22a75a", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    outbox --> x2\n    x1 --> x2\n    backdrop --> x3\n    x2 --> x3\n    I --> O\n    ONE --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ce22a75a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O", "line_count": 6}
{"name": "dc1df850", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    TWO --> x2\n    outbox --> x3\n    x2 --> x3\n    I --> O\n    ONE --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_dc1df850(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O", "line_count": 6}
{"name": "f25fbde4", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    O[upscale]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f25fbde4(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = upscale(x3, TWO)\n    return O", "line_count": 6}
{"name": "44d8ac46", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    delta --> x2\n    x1 --> x2\n    x2 --> x3\n    square --> x3\n    I --> O\n    TWO --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_44d8ac46(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O", "line_count": 6}
{"name": "1e0a9b12", "graph": "graph TD\n    x1[rot270]\n    x2[rbind]\n    x3[apply]\n    O[rot90]\n    I[I]\n    I --> x1\n    order --> x2\n    identity --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1e0a9b12(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O", "line_count": 6}
{"name": "0d3d703e", "graph": "graph TD\n    x1[switch]\n    x2[switch]\n    x3[switch]\n    O[switch]\n    I[I]\n    I --> x1\n    THREE --> x1\n    FOUR --> x1\n    x1 --> x2\n    EIGHT --> x2\n    NINE --> x2\n    x2 --> x3\n    TWO --> x3\n    SIX --> x3\n    x3 --> O\n    ONE --> O\n    FIVE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0d3d703e(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O", "line_count": 6}
{"name": "3618c87e", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[merge]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x2 --> x3\n    I --> O\n    x3 --> O\n    TWO_BY_ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3618c87e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O", "line_count": 6}
{"name": "1c786137", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[subgrid]\n    O[trim]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    height --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1c786137(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O", "line_count": 6}
{"name": "8efcae92", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[compose]\n    x4[argmax]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ONE --> x2\n    size --> x3\n    delta --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8efcae92(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O", "line_count": 7}
{"name": "445eab21", "graph": "graph TD\n    x1[objects]\n    x2[fork]\n    x3[argmax]\n    x4[color]\n    O[canvas]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    multiply --> x2\n    height --> x2\n    width --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    x4 --> O\n    TWO_BY_TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_445eab21(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O", "line_count": 7}
{"name": "6f8cd79b", "graph": "graph TD\n    x1[asindices]\n    x2[apply]\n    x3[rbind]\n    x4[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    initset --> x2\n    x1 --> x2\n    bordering --> x3\n    I --> x3\n    x2 --> x4\n    x3 --> x4\n    I --> O\n    EIGHT --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6f8cd79b(I):\n    x1 = asindices(I)\n    x2 = apply(initset, x1)\n    x3 = rbind(bordering, I)\n    x4 = mfilter(x2, x3)\n    O = fill(I, EIGHT, x4)\n    return O", "line_count": 7}
{"name": "2013d3e2", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    x4[lefthalf]\n    O[tophalf]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2013d3e2(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O", "line_count": 7}
{"name": "41e4d17e", "graph": "graph TD\n    x1[objects]\n    x2[fork]\n    x3[compose]\n    x4[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    combine --> x2\n    vfrontier --> x2\n    hfrontier --> x2\n    x2 --> x3\n    center --> x3\n    x3 --> x4\n    x1 --> x4\n    I --> O\n    SIX --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_41e4d17e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O", "line_count": 7}
{"name": "9565186b", "graph": "graph TD\n    x1[shape]\n    x2[objects]\n    x3[argmax]\n    x4[canvas]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x2 --> x3\n    size --> x3\n    FIVE --> x4\n    x1 --> x4\n    x4 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9565186b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O", "line_count": 7}
{"name": "aedd82e4", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[sizefilter]\n    x4[merge]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    TWO --> x2\n    x2 --> x3\n    ONE --> x3\n    x3 --> x4\n    I --> O\n    ONE --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_aedd82e4(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O", "line_count": 7}
{"name": "bb43febb", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[compose]\n    x4[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    FIVE --> x2\n    backdrop --> x3\n    inbox --> x3\n    x3 --> x4\n    x2 --> x4\n    I --> O\n    TWO --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bb43febb(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, FIVE)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, TWO, x4)\n    return O", "line_count": 7}
{"name": "e98196ab", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[objects]\n    x4[merge]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    T --> x3\n    F --> x3\n    T --> x3\n    x3 --> x4\n    x2 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e98196ab(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, T)\n    x4 = merge(x3)\n    O = paint(x2, x4)\n    return O", "line_count": 7}
{"name": "f76d97a5", "graph": "graph TD\n    x1[palette]\n    x2[first]\n    x3[last]\n    x4[switch]\n    O[replace]\n    I[I]\n    I --> x1\n    x1 --> x2\n    x1 --> x3\n    I --> x4\n    x2 --> x4\n    x3 --> x4\n    x4 --> O\n    FIVE --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f76d97a5(I):\n    x1 = palette(I)\n    x2 = first(x1)\n    x3 = last(x1)\n    x4 = switch(I, x2, x3)\n    O = replace(x4, FIVE, ZERO)\n    return O", "line_count": 7}
{"name": "ce9e57f2", "graph": "graph TD\n    x1[objects]\n    x2[fork]\n    x3[mapply]\n    x4[fill]\n    O[switch]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    connect --> x2\n    ulcorner --> x2\n    centerofmass --> x2\n    x2 --> x3\n    x1 --> x3\n    I --> x4\n    EIGHT --> x4\n    x3 --> x4\n    x4 --> O\n    EIGHT --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ce9e57f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O", "line_count": 7}
{"name": "22eb0ac0", "graph": "graph TD\n    x1[fgpartition]\n    x2[fork]\n    x3[apply]\n    x4[mfilter]\n    O[paint]\n    I[I]\n    I --> x1\n    recolor --> x2\n    color --> x2\n    backdrop --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    hline --> x4\n    I --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_22eb0ac0(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    O = paint(I, x4)\n    return O", "line_count": 7}
{"name": "9f236235", "graph": "graph TD\n    x1[compress]\n    x2[objects]\n    x3[vmirror]\n    x4[valmin]\n    O[downscale]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x1 --> x3\n    x2 --> x4\n    width --> x4\n    x3 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9f236235(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O", "line_count": 7}
{"name": "a699fb00", "graph": "graph TD\n    x1[ofcolor]\n    x2[shift]\n    x3[shift]\n    x4[intersection]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    x1 --> x2\n    RIGHT --> x2\n    x1 --> x3\n    LEFT --> x3\n    x2 --> x4\n    x3 --> x4\n    I --> O\n    TWO --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a699fb00(I):\n    x1 = ofcolor(I, ONE)\n    x2 = shift(x1, RIGHT)\n    x3 = shift(x1, LEFT)\n    x4 = intersection(x2, x3)\n    O = fill(I, TWO, x4)\n    return O", "line_count": 7}
{"name": "46442a0e", "graph": "graph TD\n    x1[rot90]\n    x2[rot180]\n    x3[rot270]\n    x4[hconcat]\n    x5[hconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    I --> x4\n    x1 --> x4\n    x3 --> x5\n    x2 --> x5\n    x4 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_46442a0e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O", "line_count": 8}
{"name": "7fe24cdd", "graph": "graph TD\n    x1[rot90]\n    x2[rot180]\n    x3[rot270]\n    x4[hconcat]\n    x5[hconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    I --> x4\n    x1 --> x4\n    x3 --> x5\n    x2 --> x5\n    x4 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7fe24cdd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O", "line_count": 8}
{"name": "0ca9ddb6", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[mapply]\n    x4[mapply]\n    x5[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    I --> x2\n    TWO --> x2\n    dneighbors --> x3\n    x1 --> x3\n    ineighbors --> x4\n    x2 --> x4\n    I --> x5\n    SEVEN --> x5\n    x3 --> x5\n    x5 --> O\n    FOUR --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0ca9ddb6(I):\n    x1 = ofcolor(I, ONE)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(dneighbors, x1)\n    x4 = mapply(ineighbors, x2)\n    x5 = fill(I, SEVEN, x3)\n    O = fill(x5, FOUR, x4)\n    return O", "line_count": 8}
{"name": "543a7ed5", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[mapply]\n    x4[fill]\n    x5[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    SIX --> x2\n    outbox --> x3\n    x2 --> x3\n    I --> x4\n    THREE --> x4\n    x3 --> x4\n    delta --> x5\n    x2 --> x5\n    x4 --> O\n    FOUR --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_543a7ed5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, SIX)\n    x3 = mapply(outbox, x2)\n    x4 = fill(I, THREE, x3)\n    x5 = mapply(delta, x2)\n    O = fill(x4, FOUR, x5)\n    return O", "line_count": 8}
{"name": "0520fde7", "graph": "graph TD\n    x1[vmirror]\n    x2[lefthalf]\n    x3[righthalf]\n    x4[vmirror]\n    x5[cellwise]\n    O[replace]\n    I[I]\n    I --> x1\n    x1 --> x2\n    x1 --> x3\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    ZERO --> x5\n    x5 --> O\n    ONE --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0520fde7(I):\n    x1 = vmirror(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = vmirror(x3)\n    x5 = cellwise(x2, x4, ZERO)\n    O = replace(x5, ONE, TWO)\n    return O", "line_count": 8}
{"name": "dae9d2b5", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[combine]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    FOUR --> x3\n    x2 --> x4\n    THREE --> x4\n    x3 --> x5\n    x4 --> x5\n    x1 --> O\n    SIX --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_dae9d2b5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = ofcolor(x1, FOUR)\n    x4 = ofcolor(x2, THREE)\n    x5 = combine(x3, x4)\n    O = fill(x1, SIX, x5)\n    return O", "line_count": 8}
{"name": "8d5021e8", "graph": "graph TD\n    x1[vmirror]\n    x2[hconcat]\n    x3[hmirror]\n    x4[vconcat]\n    x5[vconcat]\n    O[hmirror]\n    I[I]\n    I --> x1\n    x1 --> x2\n    I --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    x2 --> x5\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8d5021e8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(x1, I)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = vconcat(x4, x2)\n    O = hmirror(x5)\n    return O", "line_count": 8}
{"name": "928ad970", "graph": "graph TD\n    x1[ofcolor]\n    x2[subgrid]\n    x3[trim]\n    x4[leastcolor]\n    x5[inbox]\n    O[fill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    x1 --> x2\n    I --> x2\n    x2 --> x3\n    x3 --> x4\n    x1 --> x5\n    I --> O\n    x4 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_928ad970(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = leastcolor(x3)\n    x5 = inbox(x1)\n    O = fill(I, x4, x5)\n    return O", "line_count": 8}
{"name": "b60334d2", "graph": "graph TD\n    x1[ofcolor]\n    x2[replace]\n    x3[mapply]\n    x4[mapply]\n    x5[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    I --> x2\n    FIVE --> x2\n    ZERO --> x2\n    dneighbors --> x3\n    x1 --> x3\n    ineighbors --> x4\n    x1 --> x4\n    x2 --> x5\n    ONE --> x5\n    x3 --> x5\n    x5 --> O\n    FIVE --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b60334d2(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = mapply(dneighbors, x1)\n    x4 = mapply(ineighbors, x1)\n    x5 = fill(x2, ONE, x3)\n    O = fill(x5, FIVE, x4)\n    return O", "line_count": 8}
{"name": "b94a9452", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    x4[leastcolor]\n    x5[mostcolor]\n    O[switch]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    x3 --> x5\n    x3 --> O\n    x4 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b94a9452(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O", "line_count": 8}
{"name": "d037b0a7", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[compose]\n    x4[fork]\n    x5[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    shoot --> x2\n    DOWN --> x2\n    x2 --> x3\n    center --> x3\n    recolor --> x4\n    color --> x4\n    x3 --> x4\n    x4 --> x5\n    x1 --> x5\n    I --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d037b0a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O", "line_count": 8}
{"name": "d0f5fe59", "graph": "graph TD\n    x1[objects]\n    x2[size]\n    x3[astuple]\n    x4[canvas]\n    x5[shoot]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x2 --> x3\n    ZERO --> x4\n    x3 --> x4\n    ORIGIN --> x5\n    UNITY --> x5\n    x4 --> O\n    EIGHT --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d0f5fe59(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = fill(x4, EIGHT, x5)\n    return O", "line_count": 8}
{"name": "e3497940", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[vmirror]\n    x4[objects]\n    x5[merge]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    x3 --> x4\n    T --> x4\n    F --> x4\n    T --> x4\n    x4 --> x5\n    x1 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e3497940(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O", "line_count": 8}
{"name": "e9afcf9a", "graph": "graph TD\n    x1[astuple]\n    x2[crop]\n    x3[hmirror]\n    x4[hconcat]\n    x5[hconcat]\n    O[hconcat]\n    I[I]\n    TWO --> x1\n    ONE --> x1\n    I --> x2\n    ORIGIN --> x2\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    x4 --> x5\n    x5 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e9afcf9a(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O", "line_count": 8}
{"name": "48d8fb45", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[extract]\n    x4[lbind]\n    x5[extract]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    size --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    adjacent --> x4\n    x3 --> x4\n    x1 --> x5\n    x4 --> x5\n    x5 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_48d8fb45(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O", "line_count": 8}
{"name": "d406998b", "graph": "graph TD\n    x1[vmirror]\n    x2[ofcolor]\n    x3[compose]\n    x4[sfilter]\n    x5[fill]\n    O[vmirror]\n    I[I]\n    I --> x1\n    x1 --> x2\n    FIVE --> x2\n    even --> x3\n    last --> x3\n    x2 --> x4\n    x3 --> x4\n    x1 --> x5\n    THREE --> x5\n    x4 --> x5\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d406998b(I):\n    x1 = vmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, THREE, x4)\n    O = vmirror(x5)\n    return O", "line_count": 8}
{"name": "5117e062", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[extract]\n    x4[subgrid]\n    x5[mostcolor]\n    O[replace]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    numcolors --> x2\n    TWO --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    I --> x4\n    x3 --> x5\n    x4 --> O\n    EIGHT --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5117e062(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, EIGHT, x5)\n    return O", "line_count": 8}
{"name": "3906de3d", "graph": "graph TD\n    x1[rot270]\n    x2[rbind]\n    x3[switch]\n    x4[apply]\n    x5[switch]\n    O[cmirror]\n    I[I]\n    I --> x1\n    order --> x2\n    identity --> x2\n    x1 --> x3\n    ONE --> x3\n    TWO --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    ONE --> x5\n    TWO --> x5\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3906de3d(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O", "line_count": 8}
{"name": "00d62c1b", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[rbind]\n    x4[compose]\n    x5[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    bordering --> x3\n    I --> x3\n    flip --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    I --> O\n    FOUR --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_00d62c1b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O", "line_count": 8}
{"name": "7b6016b9", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[compose]\n    x4[mfilter]\n    x5[fill]\n    O[replace]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    bordering --> x2\n    I --> x2\n    flip --> x3\n    x2 --> x3\n    x1 --> x4\n    x3 --> x4\n    I --> x5\n    TWO --> x5\n    x4 --> x5\n    x5 --> O\n    ZERO --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7b6016b9(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, TWO, x4)\n    O = replace(x5, ZERO, THREE)\n    return O", "line_count": 8}
{"name": "67385a82", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[sizefilter]\n    x4[difference]\n    x5[merge]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    THREE --> x2\n    x2 --> x3\n    ONE --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    I --> O\n    EIGHT --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_67385a82(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, THREE)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, EIGHT, x5)\n    return O", "line_count": 8}
{"name": "a5313dff", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[rbind]\n    x4[compose]\n    x5[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    bordering --> x3\n    I --> x3\n    flip --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    I --> O\n    ONE --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a5313dff(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O", "line_count": 8}
{"name": "ea32f347", "graph": "graph TD\n    x1[objects]\n    x2[replace]\n    x3[argmin]\n    x4[argmax]\n    x5[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    FIVE --> x2\n    FOUR --> x2\n    x1 --> x3\n    size --> x3\n    x1 --> x4\n    size --> x4\n    x2 --> x5\n    ONE --> x5\n    x4 --> x5\n    x5 --> O\n    TWO --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ea32f347(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, FOUR)\n    x3 = argmin(x1, size)\n    x4 = argmax(x1, size)\n    x5 = fill(x2, ONE, x4)\n    O = fill(x5, TWO, x3)\n    return O", "line_count": 8}
{"name": "d631b094", "graph": "graph TD\n    x1[palette]\n    x2[other]\n    x3[ofcolor]\n    x4[size]\n    x5[astuple]\n    O[canvas]\n    I[I]\n    I --> x1\n    x1 --> x2\n    ZERO --> x2\n    I --> x3\n    x2 --> x3\n    x3 --> x4\n    ONE --> x5\n    x4 --> x5\n    x2 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d631b094(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = size(x3)\n    x5 = astuple(ONE, x4)\n    O = canvas(x2, x5)\n    return O", "line_count": 8}
{"name": "10fcaaa3", "graph": "graph TD\n    x1[leastcolor]\n    x2[hconcat]\n    x3[vconcat]\n    x4[ofcolor]\n    x5[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x2\n    x2 --> x3\n    x2 --> x3\n    x3 --> x4\n    x1 --> x4\n    ineighbors --> x5\n    x4 --> x5\n    x3 --> O\n    EIGHT --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_10fcaaa3(I):\n    x1 = leastcolor(I)\n    x2 = hconcat(I, I)\n    x3 = vconcat(x2, x2)\n    x4 = ofcolor(x3, x1)\n    x5 = mapply(ineighbors, x4)\n    O = underfill(x3, EIGHT, x5)\n    return O", "line_count": 8}
{"name": "007bbfb7", "graph": "graph TD\n    x1[hupscale]\n    x2[vupscale]\n    x3[hconcat]\n    x4[hconcat]\n    x5[vconcat]\n    x6[vconcat]\n    O[cellwise]\n    I[I]\n    I --> x1\n    THREE --> x1\n    x1 --> x2\n    THREE --> x2\n    I --> x3\n    I --> x3\n    x3 --> x4\n    I --> x4\n    x4 --> x5\n    x4 --> x5\n    x5 --> x6\n    x4 --> x6\n    x2 --> O\n    x6 --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_007bbfb7(I):\n    x1 = hupscale(I, THREE)\n    x2 = vupscale(x1, THREE)\n    x3 = hconcat(I, I)\n    x4 = hconcat(x3, I)\n    x5 = vconcat(x4, x4)\n    x6 = vconcat(x5, x4)\n    O = cellwise(x2, x6, ZERO)\n    return O", "line_count": 9}
{"name": "496994bd", "graph": "graph TD\n    x1[width]\n    x2[height]\n    x3[halve]\n    x4[astuple]\n    x5[crop]\n    x6[hmirror]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    x3 --> x4\n    x1 --> x4\n    I --> x5\n    ORIGIN --> x5\n    x4 --> x5\n    x5 --> x6\n    x5 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_496994bd(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O", "line_count": 9}
{"name": "1f876c06", "graph": "graph TD\n    x1[fgpartition]\n    x2[compose]\n    x3[power]\n    x4[fork]\n    x5[fork]\n    x6[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    last --> x2\n    first --> x2\n    last --> x3\n    TWO --> x3\n    connect --> x4\n    x2 --> x4\n    x3 --> x4\n    recolor --> x5\n    color --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x6\n    I --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1f876c06(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O", "line_count": 9}
{"name": "05f2a901", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[first]\n    x4[colorfilter]\n    x5[first]\n    x6[gravitate]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    TWO --> x2\n    x2 --> x3\n    x1 --> x4\n    EIGHT --> x4\n    x4 --> x5\n    x3 --> x6\n    x5 --> x6\n    I --> O\n    x3 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_05f2a901(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O", "line_count": 9}
{"name": "39a8645d", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[apply]\n    x4[mostcommon]\n    x5[matcher]\n    x6[extract]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    color --> x3\n    x2 --> x3\n    x3 --> x4\n    color --> x5\n    x4 --> x5\n    x1 --> x6\n    x5 --> x6\n    x6 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_39a8645d(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O", "line_count": 9}
{"name": "1b2d62fb", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[intersection]\n    x6[replace]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    ZERO --> x3\n    x2 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x1 --> x6\n    NINE --> x6\n    ZERO --> x6\n    x6 --> O\n    EIGHT --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1b2d62fb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = intersection(x3, x4)\n    x6 = replace(x1, NINE, ZERO)\n    O = fill(x6, EIGHT, x5)\n    return O", "line_count": 9}
{"name": "90c28cc7", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    x4[dedupe]\n    x5[rot90]\n    x6[dedupe]\n    O[rot270]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_90c28cc7(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O", "line_count": 9}
{"name": "b6afb2da", "graph": "graph TD\n    x1[objects]\n    x2[replace]\n    x3[colorfilter]\n    x4[mapply]\n    x5[fill]\n    x6[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    I --> x2\n    FIVE --> x2\n    TWO --> x2\n    x1 --> x3\n    FIVE --> x3\n    box --> x4\n    x3 --> x4\n    x2 --> x5\n    FOUR --> x5\n    x4 --> x5\n    corners --> x6\n    x3 --> x6\n    x5 --> O\n    ONE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b6afb2da(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, FIVE, TWO)\n    x3 = colorfilter(x1, FIVE)\n    x4 = mapply(box, x3)\n    x5 = fill(x2, FOUR, x4)\n    x6 = mapply(corners, x3)\n    O = fill(x5, ONE, x6)\n    return O", "line_count": 9}
{"name": "b9b7f026", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    x3[rbind]\n    x4[remove]\n    x5[extract]\n    x6[color]\n    O[canvas]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    size --> x2\n    adjacent --> x3\n    x2 --> x3\n    x2 --> x4\n    x1 --> x4\n    x4 --> x5\n    x3 --> x5\n    x5 --> x6\n    x6 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b9b7f026(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O", "line_count": 9}
{"name": "ba97ae07", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[apply]\n    x4[mostcommon]\n    x5[ofcolor]\n    x6[backdrop]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    color --> x3\n    x2 --> x3\n    x3 --> x4\n    I --> x5\n    x4 --> x5\n    x5 --> x6\n    I --> O\n    x4 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ba97ae07(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O", "line_count": 9}
{"name": "c9f8e694", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[ofcolor]\n    x4[astuple]\n    x5[crop]\n    x6[hupscale]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    ZERO --> x3\n    x1 --> x4\n    ONE --> x4\n    I --> x5\n    ORIGIN --> x5\n    x4 --> x5\n    x5 --> x6\n    x2 --> x6\n    x6 --> O\n    ZERO --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c9f8e694(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O", "line_count": 9}
{"name": "d23f8c26", "graph": "graph TD\n    x1[asindices]\n    x2[width]\n    x3[halve]\n    x4[matcher]\n    x5[compose]\n    x6[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    last --> x4\n    x3 --> x4\n    flip --> x5\n    x4 --> x5\n    x1 --> x6\n    x5 --> x6\n    I --> O\n    ZERO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d23f8c26(I):\n    x1 = asindices(I)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = matcher(last, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    O = fill(I, ZERO, x6)\n    return O", "line_count": 9}
{"name": "d5d6de2d", "graph": "graph TD\n    x1[objects]\n    x2[sfilter]\n    x3[difference]\n    x4[compose]\n    x5[mapply]\n    x6[replace]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    square --> x2\n    x1 --> x3\n    x2 --> x3\n    backdrop --> x4\n    inbox --> x4\n    x4 --> x5\n    x3 --> x5\n    I --> x6\n    TWO --> x6\n    ZERO --> x6\n    x6 --> O\n    THREE --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d5d6de2d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sfilter(x1, square)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O", "line_count": 9}
{"name": "dbc1a6ce", "graph": "graph TD\n    x1[ofcolor]\n    x2[product]\n    x3[fork]\n    x4[apply]\n    x5[fork]\n    x6[mfilter]\n    O[underfill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    x1 --> x2\n    x1 --> x2\n    connect --> x3\n    first --> x3\n    last --> x3\n    x3 --> x4\n    x2 --> x4\n    either --> x5\n    vline --> x5\n    hline --> x5\n    x4 --> x6\n    x5 --> x6\n    I --> O\n    EIGHT --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_dbc1a6ce(I):\n    x1 = ofcolor(I, ONE)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, EIGHT, x6)\n    return O", "line_count": 9}
{"name": "ded97339", "graph": "graph TD\n    x1[ofcolor]\n    x2[product]\n    x3[fork]\n    x4[apply]\n    x5[fork]\n    x6[mfilter]\n    O[underfill]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    x1 --> x2\n    x1 --> x2\n    connect --> x3\n    first --> x3\n    last --> x3\n    x3 --> x4\n    x2 --> x4\n    either --> x5\n    vline --> x5\n    hline --> x5\n    x4 --> x6\n    x5 --> x6\n    I --> O\n    EIGHT --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ded97339(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, EIGHT, x6)\n    return O", "line_count": 9}
{"name": "ea786f4a", "graph": "graph TD\n    x1[width]\n    x2[shoot]\n    x3[decrement]\n    x4[tojvec]\n    x5[shoot]\n    x6[combine]\n    O[fill]\n    I[I]\n    I --> x1\n    ORIGIN --> x2\n    UNITY --> x2\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    DOWN_LEFT --> x5\n    x2 --> x6\n    x5 --> x6\n    I --> O\n    ZERO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ea786f4a(I):\n    x1 = width(I)\n    x2 = shoot(ORIGIN, UNITY)\n    x3 = decrement(x1)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, DOWN_LEFT)\n    x6 = combine(x2, x5)\n    O = fill(I, ZERO, x6)\n    return O", "line_count": 9}
{"name": "08ed6ac7", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[order]\n    x4[size]\n    x5[interval]\n    x6[mpapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x1 --> x3\n    height --> x3\n    x2 --> x4\n    x4 --> x5\n    ZERO --> x5\n    NEG_ONE --> x5\n    recolor --> x6\n    x5 --> x6\n    x3 --> x6\n    I --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_08ed6ac7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = order(x1, height)\n    x4 = size(x2)\n    x5 = interval(x4, ZERO, NEG_ONE)\n    x6 = mpapply(recolor, x5, x3)\n    O = paint(I, x6)\n    return O", "line_count": 9}
{"name": "40853293", "graph": "graph TD\n    x1[partition]\n    x2[fork]\n    x3[apply]\n    x4[mfilter]\n    x5[mfilter]\n    x6[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    recolor --> x2\n    color --> x2\n    backdrop --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    hline --> x4\n    x3 --> x5\n    vline --> x5\n    I --> x6\n    x4 --> x6\n    x6 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_40853293(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O", "line_count": 9}
{"name": "5521c0d9", "graph": "graph TD\n    x1[objects]\n    x2[merge]\n    x3[cover]\n    x4[chain]\n    x5[fork]\n    x6[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    I --> x3\n    x2 --> x3\n    toivec --> x4\n    invert --> x4\n    height --> x4\n    shift --> x5\n    identity --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x6\n    x3 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5521c0d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O", "line_count": 9}
{"name": "f8ff0b80", "graph": "graph TD\n    x1[objects]\n    x2[order]\n    x3[apply]\n    x4[rbind]\n    x5[apply]\n    x6[merge]\n    O[hmirror]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    color --> x3\n    x2 --> x3\n    canvas --> x4\n    UNITY --> x4\n    x4 --> x5\n    x3 --> x5\n    x5 --> x6\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f8ff0b80(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O", "line_count": 9}
{"name": "85c4e7cd", "graph": "graph TD\n    x1[objects]\n    x2[compose]\n    x3[order]\n    x4[order]\n    x5[apply]\n    x6[mpapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    invert --> x2\n    size --> x2\n    x1 --> x3\n    size --> x3\n    x1 --> x4\n    x2 --> x4\n    color --> x5\n    x4 --> x5\n    recolor --> x6\n    x5 --> x6\n    x3 --> x6\n    I --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_85c4e7cd(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(invert, size)\n    x3 = order(x1, size)\n    x4 = order(x1, x2)\n    x5 = apply(color, x4)\n    x6 = mpapply(recolor, x5, x3)\n    O = paint(I, x6)\n    return O", "line_count": 9}
{"name": "d2abd087", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[compose]\n    x4[mfilter]\n    x5[mfilter]\n    x6[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    size --> x2\n    SIX --> x2\n    flip --> x3\n    x2 --> x3\n    x1 --> x4\n    x2 --> x4\n    x1 --> x5\n    x3 --> x5\n    I --> x6\n    TWO --> x6\n    x4 --> x6\n    x6 --> O\n    ONE --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d2abd087(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O", "line_count": 9}
{"name": "017c7c7b", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[equality]\n    x4[crop]\n    x5[branch]\n    x6[vconcat]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    x2 --> x3\n    I --> x4\n    TWO_BY_ZERO --> x4\n    THREE_BY_THREE --> x4\n    x3 --> x5\n    x2 --> x5\n    x4 --> x5\n    I --> x6\n    x5 --> x6\n    x6 --> O\n    ONE --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_017c7c7b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O", "line_count": 9}
{"name": "363442ee", "graph": "graph TD\n    x1[ofcolor]\n    x2[crop]\n    x3[asobject]\n    x4[lbind]\n    x5[compose]\n    x6[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    ONE --> x1\n    I --> x2\n    ORIGIN --> x2\n    THREE_BY_THREE --> x2\n    x2 --> x3\n    shift --> x4\n    x3 --> x4\n    x4 --> x5\n    decrement --> x5\n    x5 --> x6\n    x1 --> x6\n    I --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_363442ee(I):\n    x1 = ofcolor(I, ONE)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    x3 = asobject(x2)\n    x4 = lbind(shift, x3)\n    x5 = compose(x4, decrement)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O", "line_count": 9}
{"name": "5168d44c", "graph": "graph TD\n    x1[ofcolor]\n    x2[height]\n    x3[equality]\n    x4[branch]\n    x5[ofcolor]\n    x6[recolor]\n    O[move]\n    I[I]\n    I --> x1\n    THREE --> x1\n    x1 --> x2\n    x2 --> x3\n    ONE --> x3\n    x3 --> x4\n    ZERO_BY_TWO --> x4\n    TWO_BY_ZERO --> x4\n    I --> x5\n    TWO --> x5\n    TWO --> x6\n    x5 --> x6\n    I --> O\n    x6 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5168d44c(I):\n    x1 = ofcolor(I, THREE)\n    x2 = height(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, ZERO_BY_TWO, TWO_BY_ZERO)\n    x5 = ofcolor(I, TWO)\n    x6 = recolor(TWO, x5)\n    O = move(I, x6, x4)\n    return O", "line_count": 9}
{"name": "e9614598", "graph": "graph TD\n    x1[ofcolor]\n    x2[fork]\n    x3[x2]\n    x4[halve]\n    x5[dneighbors]\n    x6[insert]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    add --> x2\n    first --> x2\n    last --> x2\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    x4 --> x6\n    x5 --> x6\n    I --> O\n    THREE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e9614598(I):\n    x1 = ofcolor(I, ONE)\n    x2 = fork(add, first, last)\n    x3 = x2(x1)\n    x4 = halve(x3)\n    x5 = dneighbors(x4)\n    x6 = insert(x4, x5)\n    O = fill(I, THREE, x6)\n    return O", "line_count": 9}
{"name": "d9fac9be", "graph": "graph TD\n    x1[palette]\n    x2[objects]\n    x3[argmax]\n    x4[color]\n    x5[remove]\n    x6[other]\n    O[canvas]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    size --> x3\n    x3 --> x4\n    ZERO --> x5\n    x1 --> x5\n    x5 --> x6\n    x4 --> x6\n    x6 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d9fac9be(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O", "line_count": 9}
{"name": "e50d258f", "graph": "graph TD\n    x1[width]\n    x2[astuple]\n    x3[canvas]\n    x4[vconcat]\n    x5[objects]\n    x6[rbind]\n    x7[argmax]\n    O[subgrid]\n    I[I]\n    I --> x1\n    NINE --> x2\n    x1 --> x2\n    ZERO --> x3\n    x2 --> x3\n    I --> x4\n    x3 --> x4\n    x4 --> x5\n    F --> x5\n    F --> x5\n    T --> x5\n    colorcount --> x6\n    TWO --> x6\n    x5 --> x7\n    x6 --> x7\n    x7 --> O\n    I --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e50d258f(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O", "line_count": 10}
{"name": "810b9b61", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[fork]\n    x4[sfilter]\n    x5[difference]\n    x6[fork]\n    x7[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    toindices --> x2\n    x1 --> x2\n    either --> x3\n    vline --> x3\n    hline --> x3\n    x2 --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    equality --> x6\n    identity --> x6\n    box --> x6\n    x5 --> x7\n    x6 --> x7\n    I --> O\n    THREE --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_810b9b61(I):\n    x1 = objects(I, T, T, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O", "line_count": 10}
{"name": "54d82841", "graph": "graph TD\n    x1[height]\n    x2[objects]\n    x3[compose]\n    x4[apply]\n    x5[decrement]\n    x6[lbind]\n    x7[apply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    last --> x3\n    center --> x3\n    x3 --> x4\n    x2 --> x4\n    x1 --> x5\n    astuple --> x6\n    x5 --> x6\n    x6 --> x7\n    x4 --> x7\n    I --> O\n    FOUR --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_54d82841(I):\n    x1 = height(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(last, center)\n    x4 = apply(x3, x2)\n    x5 = decrement(x1)\n    x6 = lbind(astuple, x5)\n    x7 = apply(x6, x4)\n    O = fill(I, FOUR, x7)\n    return O", "line_count": 10}
{"name": "60b61512", "graph": "graph TD\n    x1[objects]\n    x2[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    delta --> x2\n    x1 --> x2\n    I --> O\n    SEVEN --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_60b61512(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O", "line_count": 5}
{"name": "25d8a9c8", "graph": "graph TD\n    x1[asindices]\n    x2[objects]\n    x3[sizefilter]\n    x4[mfilter]\n    x5[toindices]\n    x6[difference]\n    x7[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x2 --> x3\n    THREE --> x3\n    x3 --> x4\n    hline --> x4\n    x4 --> x5\n    x1 --> x6\n    x5 --> x6\n    I --> x7\n    FIVE --> x7\n    x5 --> x7\n    x7 --> O\n    ZERO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_25d8a9c8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, THREE)\n    x4 = mfilter(x3, hline)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, FIVE, x5)\n    O = fill(x7, ZERO, x6)\n    return O", "line_count": 10}
{"name": "239be575", "graph": "graph TD\n    x1[objects]\n    x2[lbind]\n    x3[compose]\n    x4[sfilter]\n    x5[size]\n    x6[greater]\n    x7[branch]\n    O[canvas]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    contained --> x2\n    TWO --> x2\n    x2 --> x3\n    palette --> x3\n    x1 --> x4\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    ONE --> x6\n    x6 --> x7\n    ZERO --> x7\n    EIGHT --> x7\n    x7 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_239be575(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O", "line_count": 10}
{"name": "67a423a3", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[colorfilter]\n    x4[merge]\n    x5[delta]\n    x6[first]\n    x7[neighbors]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    x6 --> x7\n    I --> O\n    FOUR --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_67a423a3(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = first(x5)\n    x7 = neighbors(x6)\n    O = fill(I, FOUR, x7)\n    return O", "line_count": 10}
{"name": "5c0a986e", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[lrcorner]\n    x4[ulcorner]\n    x5[shoot]\n    x6[shoot]\n    x7[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x4\n    x3 --> x5\n    UNITY --> x5\n    x4 --> x6\n    NEG_UNITY --> x6\n    I --> x7\n    TWO --> x7\n    x5 --> x7\n    x7 --> O\n    ONE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5c0a986e(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, ONE)\n    x3 = lrcorner(x1)\n    x4 = ulcorner(x2)\n    x5 = shoot(x3, UNITY)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = fill(I, TWO, x5)\n    O = fill(x7, ONE, x6)\n    return O", "line_count": 10}
{"name": "6430c8c4", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[astuple]\n    x4[ofcolor]\n    x5[ofcolor]\n    x6[intersection]\n    x7[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    FOUR --> x3\n    FOUR --> x3\n    x1 --> x4\n    ZERO --> x4\n    x2 --> x5\n    ZERO --> x5\n    x4 --> x6\n    x5 --> x6\n    ZERO --> x7\n    x3 --> x7\n    x7 --> O\n    THREE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6430c8c4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = astuple(FOUR, FOUR)\n    x4 = ofcolor(x1, ZERO)\n    x5 = ofcolor(x2, ZERO)\n    x6 = intersection(x4, x5)\n    x7 = canvas(ZERO, x3)\n    O = fill(x7, THREE, x6)\n    return O", "line_count": 10}
{"name": "94f9d214", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[astuple]\n    x6[canvas]\n    x7[intersection]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    ZERO --> x3\n    x2 --> x4\n    ZERO --> x4\n    FOUR --> x5\n    FOUR --> x5\n    ZERO --> x6\n    x5 --> x6\n    x3 --> x7\n    x4 --> x7\n    x6 --> O\n    TWO --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_94f9d214(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = intersection(x3, x4)\n    O = fill(x6, TWO, x7)\n    return O", "line_count": 10}
{"name": "a1570a43", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[recolor]\n    x4[ulcorner]\n    x5[ulcorner]\n    x6[subtract]\n    x7[increment]\n    O[move]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    THREE --> x2\n    TWO --> x3\n    x1 --> x3\n    x2 --> x4\n    x1 --> x5\n    x4 --> x6\n    x5 --> x6\n    x6 --> x7\n    I --> O\n    x3 --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a1570a43(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = recolor(TWO, x1)\n    x4 = ulcorner(x2)\n    x5 = ulcorner(x1)\n    x6 = subtract(x4, x5)\n    x7 = increment(x6)\n    O = move(I, x3, x7)\n    return O", "line_count": 10}
{"name": "ce4f8723", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[intersection]\n    x6[astuple]\n    x7[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    ZERO --> x3\n    x2 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    FOUR --> x6\n    FOUR --> x6\n    THREE --> x7\n    x6 --> x7\n    x7 --> O\n    ZERO --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ce4f8723(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O", "line_count": 10}
{"name": "d13f3404", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[compose]\n    x4[fork]\n    x5[mapply]\n    x6[astuple]\n    x7[canvas]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    shoot --> x2\n    UNITY --> x2\n    x2 --> x3\n    center --> x3\n    recolor --> x4\n    color --> x4\n    x3 --> x4\n    x4 --> x5\n    x1 --> x5\n    SIX --> x6\n    SIX --> x6\n    ZERO --> x7\n    x6 --> x7\n    x7 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d13f3404(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O", "line_count": 10}
{"name": "dc433765", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[first]\n    x4[first]\n    x5[subtract]\n    x6[sign]\n    x7[recolor]\n    O[move]\n    I[I]\n    I --> x1\n    THREE --> x1\n    I --> x2\n    FOUR --> x2\n    x1 --> x3\n    x2 --> x4\n    x4 --> x5\n    x3 --> x5\n    x5 --> x6\n    THREE --> x7\n    x1 --> x7\n    I --> O\n    x7 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_dc433765(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, FOUR)\n    x3 = first(x1)\n    x4 = first(x2)\n    x5 = subtract(x4, x3)\n    x6 = sign(x5)\n    x7 = recolor(THREE, x1)\n    O = move(I, x7, x6)\n    return O", "line_count": 10}
{"name": "f2829549", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[intersection]\n    x6[shape]\n    x7[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    ZERO --> x3\n    x2 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x1 --> x6\n    ZERO --> x7\n    x6 --> x7\n    x7 --> O\n    THREE --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f2829549(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = intersection(x3, x4)\n    x6 = shape(x1)\n    x7 = canvas(ZERO, x6)\n    O = fill(x7, THREE, x5)\n    return O", "line_count": 10}
{"name": "fafffa47", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[shape]\n    x4[ofcolor]\n    x5[ofcolor]\n    x6[intersection]\n    x7[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    x1 --> x4\n    ZERO --> x4\n    x2 --> x5\n    ZERO --> x5\n    x4 --> x6\n    x5 --> x6\n    ZERO --> x7\n    x3 --> x7\n    x7 --> O\n    TWO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_fafffa47(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = shape(x2)\n    x4 = ofcolor(x1, ZERO)\n    x5 = ofcolor(x2, ZERO)\n    x6 = intersection(x4, x5)\n    x7 = canvas(ZERO, x3)\n    O = fill(x7, TWO, x6)\n    return O", "line_count": 10}
{"name": "fcb5c309", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[colorfilter]\n    x4[difference]\n    x5[argmax]\n    x6[color]\n    x7[subgrid]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    x1 --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    size --> x5\n    x5 --> x6\n    x5 --> x7\n    I --> x7\n    x7 --> O\n    x6 --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_fcb5c309(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = difference(x2, x3)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    O = replace(x7, x6, x1)\n    return O", "line_count": 10}
{"name": "ff805c23", "graph": "graph TD\n    x1[hmirror]\n    x2[vmirror]\n    x3[ofcolor]\n    x4[subgrid]\n    x5[subgrid]\n    x6[palette]\n    x7[contained]\n    O[branch]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    ONE --> x3\n    x3 --> x4\n    x1 --> x4\n    x3 --> x5\n    x2 --> x5\n    x4 --> x6\n    ONE --> x7\n    x6 --> x7\n    x7 --> O\n    x5 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ff805c23(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O", "line_count": 10}
{"name": "e76a88a6", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[normalize]\n    x4[remove]\n    x5[apply]\n    x6[lbind]\n    x7[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    x2 --> x3\n    x2 --> x4\n    x1 --> x4\n    ulcorner --> x5\n    x4 --> x5\n    shift --> x6\n    x3 --> x6\n    x6 --> x7\n    x5 --> x7\n    I --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e76a88a6(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O", "line_count": 10}
{"name": "7c008303", "graph": "graph TD\n    x1[ofcolor]\n    x2[subgrid]\n    x3[ofcolor]\n    x4[replace]\n    x5[replace]\n    x6[compress]\n    x7[upscale]\n    O[fill]\n    I[I]\n    I --> x1\n    THREE --> x1\n    x1 --> x2\n    I --> x2\n    x2 --> x3\n    ZERO --> x3\n    I --> x4\n    THREE --> x4\n    ZERO --> x4\n    x4 --> x5\n    EIGHT --> x5\n    ZERO --> x5\n    x5 --> x6\n    x6 --> x7\n    THREE --> x7\n    x7 --> O\n    ZERO --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7c008303(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O", "line_count": 10}
{"name": "7f4411dc", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[rbind]\n    x4[rbind]\n    x5[chain]\n    x6[compose]\n    x7[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    difference --> x3\n    x2 --> x3\n    greater --> x4\n    TWO --> x4\n    x4 --> x5\n    size --> x5\n    x3 --> x5\n    x5 --> x6\n    dneighbors --> x6\n    x2 --> x7\n    x6 --> x7\n    I --> O\n    ZERO --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7f4411dc(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O", "line_count": 10}
{"name": "b230c067", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[apply]\n    x4[leastcommon]\n    x5[matcher]\n    x6[extract]\n    x7[replace]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    normalize --> x3\n    x2 --> x3\n    x3 --> x4\n    normalize --> x5\n    x4 --> x5\n    x1 --> x6\n    x5 --> x6\n    I --> x7\n    EIGHT --> x7\n    ONE --> x7\n    x7 --> O\n    TWO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b230c067(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(normalize, x4)\n    x6 = extract(x1, x5)\n    x7 = replace(I, EIGHT, ONE)\n    O = fill(x7, TWO, x6)\n    return O", "line_count": 10}
{"name": "e8593010", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[sizefilter]\n    x4[merge]\n    x5[fill]\n    x6[merge]\n    x7[fill]\n    O[replace]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    TWO --> x3\n    x2 --> x4\n    I --> x5\n    THREE --> x5\n    x4 --> x5\n    x3 --> x6\n    x5 --> x7\n    TWO --> x7\n    x6 --> x7\n    x7 --> O\n    ZERO --> O\n    ONE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e8593010(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = sizefilter(x1, TWO)\n    x4 = merge(x2)\n    x5 = fill(I, THREE, x4)\n    x6 = merge(x3)\n    x7 = fill(x5, TWO, x6)\n    O = replace(x7, ZERO, ONE)\n    return O", "line_count": 10}
{"name": "6d75e8bb", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[ulcorner]\n    x4[subgrid]\n    x5[replace]\n    x6[asobject]\n    x7[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    I --> x4\n    x4 --> x5\n    ZERO --> x5\n    TWO --> x5\n    x5 --> x6\n    x6 --> x7\n    x3 --> x7\n    I --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6d75e8bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ZERO, TWO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = paint(I, x7)\n    return O", "line_count": 10}
{"name": "3f7978a0", "graph": "graph TD\n    x1[fgpartition]\n    x2[matcher]\n    x3[extract]\n    x4[ulcorner]\n    x5[subtract]\n    x6[shape]\n    x7[add]\n    O[crop]\n    I[I]\n    I --> x1\n    color --> x2\n    FIVE --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    x4 --> x5\n    DOWN --> x5\n    x3 --> x6\n    x6 --> x7\n    TWO_BY_ZERO --> x7\n    I --> O\n    x5 --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3f7978a0(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O", "line_count": 10}
{"name": "1190e5a7", "graph": "graph TD\n    x1[mostcolor]\n    x2[frontiers]\n    x3[sfilter]\n    x4[difference]\n    x5[astuple]\n    x6[apply]\n    x7[increment]\n    O[canvas]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    vline --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    x3 --> x5\n    size --> x6\n    x5 --> x6\n    x6 --> x7\n    x1 --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1190e5a7(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O", "line_count": 10}
{"name": "6e02f1e3", "graph": "graph TD\n    x1[numcolors]\n    x2[canvas]\n    x3[equality]\n    x4[equality]\n    x5[branch]\n    x6[branch]\n    x7[connect]\n    O[fill]\n    I[I]\n    I --> x1\n    ZERO --> x2\n    THREE_BY_THREE --> x2\n    x1 --> x3\n    THREE --> x3\n    x1 --> x4\n    TWO --> x4\n    x3 --> x5\n    TWO_BY_ZERO --> x5\n    ORIGIN --> x5\n    x4 --> x6\n    TWO_BY_TWO --> x6\n    ZERO_BY_TWO --> x6\n    x5 --> x7\n    x6 --> x7\n    x2 --> O\n    FIVE --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6e02f1e3(I):\n    x1 = numcolors(I)\n    x2 = canvas(ZERO, THREE_BY_THREE)\n    x3 = equality(x1, THREE)\n    x4 = equality(x1, TWO)\n    x5 = branch(x3, TWO_BY_ZERO, ORIGIN)\n    x6 = branch(x4, TWO_BY_TWO, ZERO_BY_TWO)\n    x7 = connect(x5, x6)\n    O = fill(x2, FIVE, x7)\n    return O", "line_count": 10}
{"name": "a61f2674", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[argmin]\n    x4[replace]\n    x5[recolor]\n    x6[recolor]\n    x7[combine]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x1 --> x3\n    size --> x3\n    I --> x4\n    FIVE --> x4\n    ZERO --> x4\n    ONE --> x5\n    x2 --> x5\n    TWO --> x6\n    x3 --> x6\n    x5 --> x7\n    x6 --> x7\n    x4 --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a61f2674(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = replace(I, FIVE, ZERO)\n    x5 = recolor(ONE, x2)\n    x6 = recolor(TWO, x3)\n    x7 = combine(x5, x6)\n    O = paint(x4, x7)\n    return O", "line_count": 10}
{"name": "fcc82909", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[compose]\n    x4[compose]\n    x5[fork]\n    x6[fork]\n    x7[compose]\n    x8[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    add --> x2\n    DOWN --> x2\n    x2 --> x3\n    llcorner --> x3\n    toivec --> x4\n    numcolors --> x4\n    add --> x5\n    lrcorner --> x5\n    x4 --> x5\n    astuple --> x6\n    x3 --> x6\n    x5 --> x6\n    box --> x7\n    x6 --> x7\n    x7 --> x8\n    x1 --> x8\n    I --> O\n    THREE --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_fcc82909(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O", "line_count": 11}
{"name": "72ca375d", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[rbind]\n    x4[apply]\n    x5[apply]\n    x6[papply]\n    x7[pair]\n    x8[extract]\n    O[first]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    subgrid --> x3\n    I --> x3\n    x3 --> x4\n    x2 --> x4\n    vmirror --> x5\n    x4 --> x5\n    equality --> x6\n    x4 --> x6\n    x5 --> x6\n    x4 --> x7\n    x6 --> x7\n    x7 --> x8\n    last --> x8\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_72ca375d(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = rbind(subgrid, I)\n    x4 = apply(x3, x2)\n    x5 = apply(vmirror, x4)\n    x6 = papply(equality, x4, x5)\n    x7 = pair(x4, x6)\n    x8 = extract(x7, last)\n    O = first(x8)\n    return O", "line_count": 11}
{"name": "253bf280", "graph": "graph TD\n    x1[ofcolor]\n    x2[prapply]\n    x3[rbind]\n    x4[compose]\n    x5[sfilter]\n    x6[fork]\n    x7[mfilter]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    connect --> x2\n    x1 --> x2\n    x1 --> x2\n    greater --> x3\n    ONE --> x3\n    x3 --> x4\n    size --> x4\n    x2 --> x5\n    x4 --> x5\n    either --> x6\n    vline --> x6\n    hline --> x6\n    x5 --> x7\n    x6 --> x7\n    I --> x8\n    THREE --> x8\n    x7 --> x8\n    x8 --> O\n    EIGHT --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_253bf280(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = prapply(connect, x1, x1)\n    x3 = rbind(greater, ONE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(either, vline, hline)\n    x7 = mfilter(x5, x6)\n    x8 = fill(I, THREE, x7)\n    O = fill(x8, EIGHT, x1)\n    return O", "line_count": 11}
{"name": "694f12f3", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[compose]\n    x4[argmin]\n    x5[argmax]\n    x6[x3]\n    x7[x3]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    FOUR --> x2\n    backdrop --> x3\n    inbox --> x3\n    x2 --> x4\n    size --> x4\n    x2 --> x5\n    size --> x5\n    x4 --> x6\n    x5 --> x7\n    I --> x8\n    ONE --> x8\n    x6 --> x8\n    x8 --> O\n    TWO --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_694f12f3(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, FOUR)\n    x3 = compose(backdrop, inbox)\n    x4 = argmin(x2, size)\n    x5 = argmax(x2, size)\n    x6 = x3(x4)\n    x7 = x3(x5)\n    x8 = fill(I, ONE, x6)\n    O = fill(x8, TWO, x7)\n    return O", "line_count": 11}
{"name": "1f642eb9", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[difference]\n    x4[first]\n    x5[rbind]\n    x6[compose]\n    x7[fork]\n    x8[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    gravitate --> x5\n    x4 --> x5\n    crement --> x6\n    x5 --> x6\n    shift --> x7\n    identity --> x7\n    x6 --> x7\n    x7 --> x8\n    x2 --> x8\n    I --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1f642eb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O", "line_count": 11}
{"name": "31aa019c", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[first]\n    x4[neighbors]\n    x5[astuple]\n    x6[canvas]\n    x7[initset]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    x3 --> x4\n    TEN --> x5\n    TEN --> x5\n    ZERO --> x6\n    x5 --> x6\n    x3 --> x7\n    x6 --> x8\n    x1 --> x8\n    x7 --> x8\n    x8 --> O\n    TWO --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_31aa019c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = astuple(TEN, TEN)\n    x6 = canvas(ZERO, x5)\n    x7 = initset(x3)\n    x8 = fill(x6, x1, x7)\n    O = fill(x8, TWO, x4)\n    return O", "line_count": 11}
{"name": "27a28665", "graph": "graph TD\n    x1[objects]\n    x2[valmax]\n    x3[equality]\n    x4[equality]\n    x5[equality]\n    x6[branch]\n    x7[branch]\n    x8[branch]\n    O[canvas]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    ONE --> x3\n    x2 --> x4\n    FOUR --> x4\n    x2 --> x5\n    FIVE --> x5\n    x3 --> x6\n    TWO --> x6\n    ONE --> x6\n    x4 --> x7\n    THREE --> x7\n    x6 --> x7\n    x5 --> x8\n    SIX --> x8\n    x7 --> x8\n    x8 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_27a28665(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O", "line_count": 11}
{"name": "7ddcd7ec", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[difference]\n    x4[first]\n    x5[color]\n    x6[lbind]\n    x7[fork]\n    x8[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    x4 --> x5\n    position --> x6\n    x4 --> x6\n    shoot --> x7\n    center --> x7\n    x6 --> x7\n    x7 --> x8\n    x2 --> x8\n    I --> O\n    x5 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7ddcd7ec(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O", "line_count": 11}
{"name": "3bd67248", "graph": "graph TD\n    x1[height]\n    x2[decrement]\n    x3[decrement]\n    x4[astuple]\n    x5[astuple]\n    x6[shoot]\n    x7[shoot]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    x1 --> x2\n    x2 --> x3\n    x3 --> x4\n    ONE --> x4\n    x2 --> x5\n    ONE --> x5\n    x4 --> x6\n    UP_RIGHT --> x6\n    x5 --> x7\n    RIGHT --> x7\n    I --> x8\n    TWO --> x8\n    x6 --> x8\n    x8 --> O\n    FOUR --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3bd67248(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O", "line_count": 11}
{"name": "73251a56", "graph": "graph TD\n    x1[dmirror]\n    x2[papply]\n    x3[lbind]\n    x4[apply]\n    x5[mostcolor]\n    x6[replace]\n    x7[index]\n    x8[shoot]\n    O[fill]\n    I[I]\n    I --> x1\n    pair --> x2\n    I --> x2\n    x1 --> x2\n    apply --> x3\n    maximum --> x3\n    x3 --> x4\n    x2 --> x4\n    x4 --> x5\n    x4 --> x6\n    ZERO --> x6\n    x5 --> x6\n    x6 --> x7\n    ORIGIN --> x7\n    ORIGIN --> x8\n    UNITY --> x8\n    x6 --> O\n    x7 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_73251a56(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O", "line_count": 11}
{"name": "25d487eb", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[ofcolor]\n    x4[center]\n    x5[merge]\n    x6[center]\n    x7[subtract]\n    x8[shoot]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    I --> x3\n    x1 --> x3\n    x3 --> x4\n    x2 --> x5\n    x5 --> x6\n    x6 --> x7\n    x4 --> x7\n    x4 --> x8\n    x7 --> x8\n    I --> O\n    x1 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_25d487eb(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = ofcolor(I, x1)\n    x4 = center(x3)\n    x5 = merge(x2)\n    x6 = center(x5)\n    x7 = subtract(x6, x4)\n    x8 = shoot(x4, x7)\n    O = underfill(I, x1, x8)\n    return O", "line_count": 11}
{"name": "8f2ea7aa", "graph": "graph TD\n    x1[objects]\n    x2[merge]\n    x3[subgrid]\n    x4[upscale]\n    x5[hconcat]\n    x6[hconcat]\n    x7[vconcat]\n    x8[vconcat]\n    O[cellwise]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    THREE --> x4\n    x3 --> x5\n    x3 --> x5\n    x5 --> x6\n    x3 --> x6\n    x6 --> x7\n    x6 --> x7\n    x7 --> x8\n    x6 --> x8\n    x4 --> O\n    x8 --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8f2ea7aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O", "line_count": 11}
{"name": "b8825c91", "graph": "graph TD\n    x1[replace]\n    x2[dmirror]\n    x3[papply]\n    x4[lbind]\n    x5[apply]\n    x6[cmirror]\n    x7[papply]\n    x8[apply]\n    O[cmirror]\n    I[I]\n    I --> x1\n    FOUR --> x1\n    ZERO --> x1\n    x1 --> x2\n    pair --> x3\n    x1 --> x3\n    x2 --> x3\n    apply --> x4\n    maximum --> x4\n    x4 --> x5\n    x3 --> x5\n    x5 --> x6\n    pair --> x7\n    x5 --> x7\n    x6 --> x7\n    x4 --> x8\n    x7 --> x8\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b8825c91(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O", "line_count": 11}
{"name": "cce03e0d", "graph": "graph TD\n    x1[upscale]\n    x2[hconcat]\n    x3[hconcat]\n    x4[vconcat]\n    x5[vconcat]\n    x6[ofcolor]\n    x7[ofcolor]\n    x8[combine]\n    O[fill]\n    I[I]\n    I --> x1\n    THREE --> x1\n    I --> x2\n    I --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    x3 --> x4\n    x4 --> x5\n    x3 --> x5\n    x1 --> x6\n    ZERO --> x6\n    x1 --> x7\n    ONE --> x7\n    x6 --> x8\n    x7 --> x8\n    x5 --> O\n    ZERO --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_cce03e0d(I):\n    x1 = upscale(I, THREE)\n    x2 = hconcat(I, I)\n    x3 = hconcat(x2, I)\n    x4 = vconcat(x3, x3)\n    x5 = vconcat(x4, x3)\n    x6 = ofcolor(x1, ZERO)\n    x7 = ofcolor(x1, ONE)\n    x8 = combine(x6, x7)\n    O = fill(x5, ZERO, x8)\n    return O", "line_count": 11}
{"name": "d364b489", "graph": "graph TD\n    x1[ofcolor]\n    x2[shift]\n    x3[fill]\n    x4[shift]\n    x5[fill]\n    x6[shift]\n    x7[fill]\n    x8[shift]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    x1 --> x2\n    DOWN --> x2\n    I --> x3\n    EIGHT --> x3\n    x2 --> x3\n    x1 --> x4\n    UP --> x4\n    x3 --> x5\n    TWO --> x5\n    x4 --> x5\n    x1 --> x6\n    RIGHT --> x6\n    x5 --> x7\n    SIX --> x7\n    x6 --> x7\n    x1 --> x8\n    LEFT --> x8\n    x7 --> O\n    SEVEN --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d364b489(I):\n    x1 = ofcolor(I, ONE)\n    x2 = shift(x1, DOWN)\n    x3 = fill(I, EIGHT, x2)\n    x4 = shift(x1, UP)\n    x5 = fill(x3, TWO, x4)\n    x6 = shift(x1, RIGHT)\n    x7 = fill(x5, SIX, x6)\n    x8 = shift(x1, LEFT)\n    O = fill(x7, SEVEN, x8)\n    return O", "line_count": 11}
{"name": "a5f85a15", "graph": "graph TD\n    x1[objects]\n    x2[interval]\n    x3[apply]\n    x4[apply]\n    x5[papply]\n    x6[apply]\n    x7[lbind]\n    x8[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    ONE --> x2\n    NINE --> x2\n    ONE --> x2\n    double --> x3\n    x2 --> x3\n    decrement --> x4\n    x3 --> x4\n    astuple --> x5\n    x4 --> x5\n    x4 --> x5\n    ulcorner --> x6\n    x1 --> x6\n    shift --> x7\n    x5 --> x7\n    x7 --> x8\n    x6 --> x8\n    I --> O\n    FOUR --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a5f85a15(I):\n    x1 = objects(I, T, T, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FOUR, x8)\n    return O", "line_count": 11}
{"name": "3ac3eb23", "graph": "graph TD\n    x1[objects]\n    x2[chain]\n    x3[fork]\n    x4[mapply]\n    x5[paint]\n    x6[vsplit]\n    x7[first]\n    x8[vconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    ineighbors --> x2\n    last --> x2\n    first --> x2\n    recolor --> x3\n    color --> x3\n    x2 --> x3\n    x3 --> x4\n    x1 --> x4\n    I --> x5\n    x4 --> x5\n    x5 --> x6\n    THREE --> x6\n    x6 --> x7\n    x7 --> x8\n    x7 --> x8\n    x7 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3ac3eb23(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O", "line_count": 11}
{"name": "444801d8", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[rbind]\n    x4[chain]\n    x5[rbind]\n    x6[compose]\n    x7[fork]\n    x8[mapply]\n    O[underpaint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    toobject --> x3\n    I --> x3\n    leastcolor --> x4\n    x3 --> x4\n    delta --> x4\n    shift --> x5\n    UP --> x5\n    x5 --> x6\n    backdrop --> x6\n    recolor --> x7\n    x4 --> x7\n    x6 --> x7\n    x7 --> x8\n    x2 --> x8\n    I --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_444801d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O", "line_count": 11}
{"name": "22168020", "graph": "graph TD\n    x1[palette]\n    x2[remove]\n    x3[lbind]\n    x4[lbind]\n    x5[fork]\n    x6[compose]\n    x7[fork]\n    x8[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    ZERO --> x2\n    x1 --> x2\n    ofcolor --> x3\n    I --> x3\n    prapply --> x4\n    connect --> x4\n    x4 --> x5\n    x3 --> x5\n    x3 --> x5\n    merge --> x6\n    x5 --> x6\n    recolor --> x7\n    identity --> x7\n    x6 --> x7\n    x7 --> x8\n    x2 --> x8\n    I --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_22168020(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O", "line_count": 11}
{"name": "6e82a1ae", "graph": "graph TD\n    x1[objects]\n    x2[lbind]\n    x3[compose]\n    x4[x3]\n    x5[x3]\n    x6[x3]\n    x7[fill]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    sizefilter --> x2\n    x1 --> x2\n    merge --> x3\n    x2 --> x3\n    TWO --> x4\n    THREE --> x5\n    FOUR --> x6\n    I --> x7\n    THREE --> x7\n    x4 --> x7\n    x7 --> x8\n    TWO --> x8\n    x5 --> x8\n    x8 --> O\n    ONE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6e82a1ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O", "line_count": 11}
{"name": "b2862040", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[colorfilter]\n    x4[rbind]\n    x5[compose]\n    x6[mfilter]\n    x7[rbind]\n    x8[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    NINE --> x2\n    x1 --> x3\n    ONE --> x3\n    bordering --> x4\n    I --> x4\n    flip --> x5\n    x4 --> x5\n    x2 --> x6\n    x5 --> x6\n    adjacent --> x7\n    x6 --> x7\n    x3 --> x8\n    x7 --> x8\n    I --> O\n    EIGHT --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b2862040(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, NINE)\n    x3 = colorfilter(x1, ONE)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x2, x5)\n    x7 = rbind(adjacent, x6)\n    x8 = mfilter(x3, x7)\n    O = fill(I, EIGHT, x8)\n    return O", "line_count": 11}
{"name": "868de0fa", "graph": "graph TD\n    x1[objects]\n    x2[sfilter]\n    x3[compose]\n    x4[sfilter]\n    x5[difference]\n    x6[merge]\n    x7[merge]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    square --> x2\n    even --> x3\n    height --> x3\n    x2 --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    x4 --> x6\n    x5 --> x7\n    I --> x8\n    TWO --> x8\n    x6 --> x8\n    x8 --> O\n    SEVEN --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_868de0fa(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O", "line_count": 11}
{"name": "681b3aeb", "graph": "graph TD\n    x1[rot270]\n    x2[objects]\n    x3[argmax]\n    x4[argmin]\n    x5[color]\n    x6[canvas]\n    x7[normalize]\n    x8[paint]\n    O[rot90]\n    I[I]\n    I --> x1\n    x1 --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    size --> x3\n    x2 --> x4\n    size --> x4\n    x4 --> x5\n    x5 --> x6\n    THREE_BY_THREE --> x6\n    x3 --> x7\n    x6 --> x8\n    x7 --> x8\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_681b3aeb(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O", "line_count": 11}
{"name": "8e5a5113", "graph": "graph TD\n    x1[crop]\n    x2[rot90]\n    x3[rot180]\n    x4[astuple]\n    x5[astuple]\n    x6[apply]\n    x7[apply]\n    x8[mpapply]\n    O[paint]\n    I[I]\n    I --> x1\n    ORIGIN --> x1\n    THREE_BY_THREE --> x1\n    x1 --> x2\n    x1 --> x3\n    x2 --> x4\n    x3 --> x4\n    FOUR --> x5\n    EIGHT --> x5\n    tojvec --> x6\n    x5 --> x6\n    asobject --> x7\n    x4 --> x7\n    shift --> x8\n    x7 --> x8\n    x6 --> x8\n    I --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8e5a5113(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O", "line_count": 11}
{"name": "025d127b", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[merge]\n    x4[lbind]\n    x5[rbind]\n    x6[compose]\n    x7[mapply]\n    x8[difference]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    color --> x2\n    x1 --> x2\n    x1 --> x3\n    colorfilter --> x4\n    x1 --> x4\n    argmax --> x5\n    rightmost --> x5\n    x5 --> x6\n    x4 --> x6\n    x6 --> x7\n    x2 --> x7\n    x3 --> x8\n    x7 --> x8\n    I --> O\n    x8 --> O\n    RIGHT --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_025d127b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O", "line_count": 11}
{"name": "2281f1f4", "graph": "graph TD\n    x1[ofcolor]\n    x2[product]\n    x3[power]\n    x4[power]\n    x5[fork]\n    x6[apply]\n    x7[urcorner]\n    x8[remove]\n    O[underfill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    x1 --> x2\n    x1 --> x2\n    first --> x3\n    TWO --> x3\n    last --> x4\n    TWO --> x4\n    astuple --> x5\n    x3 --> x5\n    x4 --> x5\n    x5 --> x6\n    x2 --> x6\n    x1 --> x7\n    x7 --> x8\n    x6 --> x8\n    I --> O\n    TWO --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2281f1f4(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = product(x1, x1)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = apply(x5, x2)\n    x7 = urcorner(x1)\n    x8 = remove(x7, x6)\n    O = underfill(I, TWO, x8)\n    return O", "line_count": 11}
{"name": "cf98881b", "graph": "graph TD\n    x1[hsplit]\n    x2[first]\n    x3[remove]\n    x4[first]\n    x5[last]\n    x6[ofcolor]\n    x7[ofcolor]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    THREE --> x1\n    x1 --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    x3 --> x5\n    x4 --> x6\n    NINE --> x6\n    x2 --> x7\n    FOUR --> x7\n    x5 --> x8\n    NINE --> x8\n    x6 --> x8\n    x8 --> O\n    FOUR --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_cf98881b(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = remove(x2, x1)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x2, FOUR)\n    x8 = fill(x5, NINE, x6)\n    O = fill(x8, FOUR, x7)\n    return O", "line_count": 11}
{"name": "d4f3cd78", "graph": "graph TD\n    x1[ofcolor]\n    x2[delta]\n    x3[fill]\n    x4[box]\n    x5[difference]\n    x6[position]\n    x7[first]\n    x8[shoot]\n    O[fill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    x1 --> x2\n    I --> x3\n    EIGHT --> x3\n    x2 --> x3\n    x1 --> x4\n    x4 --> x5\n    x1 --> x5\n    x4 --> x6\n    x5 --> x6\n    x5 --> x7\n    x7 --> x8\n    x6 --> x8\n    x3 --> O\n    EIGHT --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d4f3cd78(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = delta(x1)\n    x3 = fill(I, EIGHT, x2)\n    x4 = box(x1)\n    x5 = difference(x4, x1)\n    x6 = position(x4, x5)\n    x7 = first(x5)\n    x8 = shoot(x7, x6)\n    O = fill(x3, EIGHT, x8)\n    return O", "line_count": 11}
{"name": "bda2d7a6", "graph": "graph TD\n    x1[partition]\n    x2[order]\n    x3[apply]\n    x4[last]\n    x5[remove]\n    x6[repeat]\n    x7[combine]\n    x8[mpapply]\n    O[paint]\n    I[I]\n    I --> x1\n    x1 --> x2\n    size --> x2\n    color --> x3\n    x2 --> x3\n    x2 --> x4\n    x4 --> x5\n    x2 --> x5\n    x4 --> x6\n    ONE --> x6\n    x6 --> x7\n    x5 --> x7\n    recolor --> x8\n    x3 --> x8\n    x7 --> x8\n    I --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bda2d7a6(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = last(x2)\n    x5 = remove(x4, x2)\n    x6 = repeat(x4, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x3, x7)\n    O = paint(I, x8)\n    return O", "line_count": 11}
{"name": "137eaa0f", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[rbind]\n    x4[chain]\n    x5[fork]\n    x6[canvas]\n    x7[mapply]\n    x8[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    first --> x2\n    FIVE --> x2\n    sfilter --> x3\n    x2 --> x3\n    invert --> x4\n    center --> x4\n    x3 --> x4\n    shift --> x5\n    identity --> x5\n    x4 --> x5\n    ZERO --> x6\n    THREE_BY_THREE --> x6\n    x5 --> x7\n    x1 --> x7\n    x7 --> x8\n    UNITY --> x8\n    x6 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_137eaa0f(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(first, FIVE)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = canvas(ZERO, THREE_BY_THREE)\n    x7 = mapply(x5, x1)\n    x8 = shift(x7, UNITY)\n    O = paint(x6, x8)\n    return O", "line_count": 11}
{"name": "6455b5f5", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[argmax]\n    x4[valmin]\n    x5[sizefilter]\n    x6[recolor]\n    x7[merge]\n    x8[paint]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    x1 --> x3\n    size --> x3\n    x1 --> x4\n    size --> x4\n    x2 --> x5\n    x4 --> x5\n    ONE --> x6\n    x3 --> x6\n    x5 --> x7\n    I --> x8\n    x6 --> x8\n    x8 --> O\n    EIGHT --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6455b5f5(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O", "line_count": 11}
{"name": "b8cdaf2b", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[shift]\n    x4[ulcorner]\n    x5[urcorner]\n    x6[shoot]\n    x7[shoot]\n    x8[combine]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    UP --> x3\n    x3 --> x4\n    x3 --> x5\n    x4 --> x6\n    NEG_UNITY --> x6\n    x5 --> x7\n    UP_RIGHT --> x7\n    x6 --> x8\n    x7 --> x8\n    I --> O\n    x1 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b8cdaf2b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O", "line_count": 11}
{"name": "bd4472b8", "graph": "graph TD\n    x1[width]\n    x2[astuple]\n    x3[crop]\n    x4[tophalf]\n    x5[dmirror]\n    x6[hupscale]\n    x7[repeat]\n    x8[merge]\n    O[vconcat]\n    I[I]\n    I --> x1\n    TWO --> x2\n    x1 --> x2\n    I --> x3\n    ORIGIN --> x3\n    x2 --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    x1 --> x6\n    x6 --> x7\n    TWO --> x7\n    x7 --> x8\n    x3 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bd4472b8(I):\n    x1 = width(I)\n    x2 = astuple(TWO, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O", "line_count": 11}
{"name": "4be741c5", "graph": "graph TD\n    x1[portrait]\n    x2[branch]\n    x3[branch]\n    x4[x3]\n    x5[astuple]\n    x6[x2]\n    x7[crop]\n    x8[apply]\n    O[x2]\n    I[I]\n    I --> x1\n    x1 --> x2\n    dmirror --> x2\n    identity --> x2\n    x1 --> x3\n    height --> x3\n    width --> x3\n    I --> x4\n    ONE --> x5\n    x4 --> x5\n    I --> x6\n    x6 --> x7\n    ORIGIN --> x7\n    x5 --> x7\n    dedupe --> x8\n    x7 --> x8\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4be741c5(I):\n    x1 = portrait(I)\n    x2 = branch(x1, dmirror, identity)\n    x3 = branch(x1, height, width)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = apply(dedupe, x7)\n    O = x2(x8)\n    return O", "line_count": 11}
{"name": "bbc9ae5d", "graph": "graph TD\n    x1[width]\n    x2[palette]\n    x3[halve]\n    x4[vupscale]\n    x5[rbind]\n    x6[other]\n    x7[ofcolor]\n    x8[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    I --> x4\n    x3 --> x4\n    shoot --> x5\n    UNITY --> x5\n    x2 --> x6\n    ZERO --> x6\n    x4 --> x7\n    x6 --> x7\n    x5 --> x8\n    x7 --> x8\n    x4 --> O\n    x6 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bbc9ae5d(I):\n    x1 = width(I)\n    x2 = palette(I)\n    x3 = halve(x1)\n    x4 = vupscale(I, x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = other(x2, ZERO)\n    x7 = ofcolor(x4, x6)\n    x8 = mapply(x5, x7)\n    O = fill(x4, x6, x8)\n    return O", "line_count": 11}
{"name": "d90796e8", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[lbind]\n    x4[compose]\n    x5[mfilter]\n    x6[cover]\n    x7[matcher]\n    x8[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    TWO --> x2\n    contained --> x3\n    TWO --> x3\n    x3 --> x4\n    palette --> x4\n    x2 --> x5\n    x4 --> x5\n    I --> x6\n    x5 --> x6\n    first --> x7\n    THREE --> x7\n    x5 --> x8\n    x7 --> x8\n    x6 --> O\n    EIGHT --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d90796e8(I):\n    x1 = objects(I, F, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, palette)\n    x5 = mfilter(x2, x4)\n    x6 = cover(I, x5)\n    x7 = matcher(first, THREE)\n    x8 = sfilter(x5, x7)\n    O = fill(x6, EIGHT, x8)\n    return O", "line_count": 11}
{"name": "2c608aff", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[argmax]\n    x4[toindices]\n    x5[ofcolor]\n    x6[prapply]\n    x7[fork]\n    x8[mfilter]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    size --> x3\n    x3 --> x4\n    I --> x5\n    x1 --> x5\n    connect --> x6\n    x4 --> x6\n    x5 --> x6\n    either --> x7\n    vline --> x7\n    hline --> x7\n    x6 --> x8\n    x7 --> x8\n    I --> O\n    x1 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2c608aff(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = ofcolor(I, x1)\n    x6 = prapply(connect, x4, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(I, x1, x8)\n    return O", "line_count": 11}
{"name": "f8b3ba0a", "graph": "graph TD\n    x1[compress]\n    x2[astuple]\n    x3[palette]\n    x4[lbind]\n    x5[compose]\n    x6[order]\n    x7[rbind]\n    x8[apply]\n    x9[merge]\n    O[crop]\n    I[I]\n    I --> x1\n    THREE --> x2\n    ONE --> x2\n    x1 --> x3\n    colorcount --> x4\n    x1 --> x4\n    invert --> x5\n    x4 --> x5\n    x3 --> x6\n    x5 --> x6\n    canvas --> x7\n    UNITY --> x7\n    x7 --> x8\n    x6 --> x8\n    x8 --> x9\n    x9 --> O\n    DOWN --> O\n    x2 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f8b3ba0a(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    O = crop(x9, DOWN, x2)\n    return O", "line_count": 12}
{"name": "80af3007", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[subgrid]\n    x4[upscale]\n    x5[hconcat]\n    x6[hconcat]\n    x7[vconcat]\n    x8[vconcat]\n    x9[cellwise]\n    O[downscale]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    THREE --> x4\n    x3 --> x5\n    x3 --> x5\n    x5 --> x6\n    x3 --> x6\n    x6 --> x7\n    x6 --> x7\n    x7 --> x8\n    x6 --> x8\n    x4 --> x9\n    x8 --> x9\n    ZERO --> x9\n    x9 --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_80af3007(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    x9 = cellwise(x4, x8, ZERO)\n    O = downscale(x9, THREE)\n    return O", "line_count": 12}
{"name": "83302e8f", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[sfilter]\n    x4[difference]\n    x5[merge]\n    x6[recolor]\n    x7[merge]\n    x8[recolor]\n    x9[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    x2 --> x3\n    square --> x3\n    x2 --> x4\n    x3 --> x4\n    x3 --> x5\n    THREE --> x6\n    x5 --> x6\n    x4 --> x7\n    FOUR --> x8\n    x7 --> x8\n    I --> x9\n    x6 --> x9\n    x9 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_83302e8f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(THREE, x5)\n    x7 = merge(x4)\n    x8 = recolor(FOUR, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O", "line_count": 12}
{"name": "1fad071e", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[sizefilter]\n    x4[size]\n    x5[subtract]\n    x6[astuple]\n    x7[canvas]\n    x8[astuple]\n    x9[canvas]\n    O[hconcat]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x2 --> x3\n    FOUR --> x3\n    x3 --> x4\n    FIVE --> x5\n    x4 --> x5\n    ONE --> x6\n    x4 --> x6\n    ONE --> x7\n    x6 --> x7\n    ONE --> x8\n    x5 --> x8\n    ZERO --> x9\n    x8 --> x9\n    x7 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1fad071e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = size(x3)\n    x5 = subtract(FIVE, x4)\n    x6 = astuple(ONE, x4)\n    x7 = canvas(ONE, x6)\n    x8 = astuple(ONE, x5)\n    x9 = canvas(ZERO, x8)\n    O = hconcat(x7, x9)\n    return O", "line_count": 12}
{"name": "11852cab", "graph": "graph TD\n    x1[objects]\n    x2[merge]\n    x3[hmirror]\n    x4[vmirror]\n    x5[dmirror]\n    x6[cmirror]\n    x7[paint]\n    x8[paint]\n    x9[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    x2 --> x5\n    x2 --> x6\n    I --> x7\n    x3 --> x7\n    x7 --> x8\n    x4 --> x8\n    x8 --> x9\n    x5 --> x9\n    x9 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_11852cab(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O", "line_count": 12}
{"name": "3428a4f5", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[astuple]\n    x4[ofcolor]\n    x5[ofcolor]\n    x6[combine]\n    x7[intersection]\n    x8[difference]\n    x9[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    SIX --> x3\n    FIVE --> x3\n    x1 --> x4\n    TWO --> x4\n    x2 --> x5\n    TWO --> x5\n    x4 --> x6\n    x5 --> x6\n    x4 --> x7\n    x5 --> x7\n    x6 --> x8\n    x7 --> x8\n    ZERO --> x9\n    x3 --> x9\n    x9 --> O\n    THREE --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3428a4f5(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = astuple(SIX, FIVE)\n    x4 = ofcolor(x1, TWO)\n    x5 = ofcolor(x2, TWO)\n    x6 = combine(x4, x5)\n    x7 = intersection(x4, x5)\n    x8 = difference(x6, x7)\n    x9 = canvas(ZERO, x3)\n    O = fill(x9, THREE, x8)\n    return O", "line_count": 12}
{"name": "178fcbfb", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[mapply]\n    x4[fill]\n    x5[colorfilter]\n    x6[difference]\n    x7[compose]\n    x8[fork]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    TWO --> x2\n    vfrontier --> x3\n    x2 --> x3\n    I --> x4\n    TWO --> x4\n    x3 --> x4\n    x1 --> x5\n    TWO --> x5\n    x1 --> x6\n    x5 --> x6\n    hfrontier --> x7\n    center --> x7\n    recolor --> x8\n    color --> x8\n    x7 --> x8\n    x8 --> x9\n    x6 --> x9\n    x4 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_178fcbfb(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(vfrontier, x2)\n    x4 = fill(I, TWO, x3)\n    x5 = colorfilter(x1, TWO)\n    x6 = difference(x1, x5)\n    x7 = compose(hfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O", "line_count": 12}
{"name": "3de23699", "graph": "graph TD\n    x1[fgpartition]\n    x2[sizefilter]\n    x3[first]\n    x4[difference]\n    x5[first]\n    x6[color]\n    x7[color]\n    x8[subgrid]\n    x9[trim]\n    O[replace]\n    I[I]\n    I --> x1\n    x1 --> x2\n    FOUR --> x2\n    x2 --> x3\n    x1 --> x4\n    x2 --> x4\n    x4 --> x5\n    x3 --> x6\n    x5 --> x7\n    x3 --> x8\n    I --> x8\n    x8 --> x9\n    x9 --> O\n    x7 --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3de23699(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O", "line_count": 12}
{"name": "54d9e175", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[compose]\n    x4[fork]\n    x5[mapply]\n    x6[paint]\n    x7[replace]\n    x8[replace]\n    x9[replace]\n    O[replace]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    neighbors --> x3\n    center --> x3\n    recolor --> x4\n    color --> x4\n    x3 --> x4\n    x4 --> x5\n    x2 --> x5\n    I --> x6\n    x5 --> x6\n    x6 --> x7\n    ONE --> x7\n    SIX --> x7\n    x7 --> x8\n    TWO --> x8\n    SEVEN --> x8\n    x8 --> x9\n    THREE --> x9\n    EIGHT --> x9\n    x9 --> O\n    FOUR --> O\n    NINE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_54d9e175(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O", "line_count": 12}
{"name": "5ad4f10b", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[color]\n    x4[subgrid]\n    x5[leastcolor]\n    x6[replace]\n    x7[replace]\n    x8[height]\n    x9[divide]\n    O[downscale]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x2 --> x4\n    I --> x4\n    x4 --> x5\n    x4 --> x6\n    x5 --> x6\n    ZERO --> x6\n    x6 --> x7\n    x3 --> x7\n    x5 --> x7\n    x7 --> x8\n    x8 --> x9\n    THREE --> x9\n    x7 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5ad4f10b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O", "line_count": 12}
{"name": "623ea044", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[center]\n    x4[color]\n    x5[astuple]\n    x6[astuple]\n    x7[combine]\n    x8[lbind]\n    x9[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    UNITY --> x5\n    NEG_UNITY --> x5\n    UP_RIGHT --> x6\n    DOWN_LEFT --> x6\n    x5 --> x7\n    x6 --> x7\n    shoot --> x8\n    x3 --> x8\n    x8 --> x9\n    x7 --> x9\n    I --> O\n    x4 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_623ea044(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = color(x2)\n    x5 = astuple(UNITY, NEG_UNITY)\n    x6 = astuple(UP_RIGHT, DOWN_LEFT)\n    x7 = combine(x5, x6)\n    x8 = lbind(shoot, x3)\n    x9 = mapply(x8, x7)\n    O = fill(I, x4, x9)\n    return O", "line_count": 12}
{"name": "6b9890af", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[argmin]\n    x4[subgrid]\n    x5[width]\n    x6[divide]\n    x7[upscale]\n    x8[normalize]\n    x9[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    TWO --> x2\n    x1 --> x3\n    size --> x3\n    x2 --> x4\n    I --> x4\n    x4 --> x5\n    x5 --> x6\n    THREE --> x6\n    x3 --> x7\n    x6 --> x7\n    x7 --> x8\n    x8 --> x9\n    UNITY --> x9\n    x4 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6b9890af(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, TWO)\n    x3 = argmin(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x3, x6)\n    x8 = normalize(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x4, x9)\n    return O", "line_count": 12}
{"name": "794b24be", "graph": "graph TD\n    x1[ofcolor]\n    x2[size]\n    x3[decrement]\n    x4[canvas]\n    x5[tojvec]\n    x6[connect]\n    x7[equality]\n    x8[insert]\n    x9[branch]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    x1 --> x2\n    x2 --> x3\n    ZERO --> x4\n    THREE_BY_THREE --> x4\n    x3 --> x5\n    ORIGIN --> x6\n    x5 --> x6\n    x2 --> x7\n    FOUR --> x7\n    UNITY --> x8\n    x6 --> x8\n    x7 --> x9\n    x8 --> x9\n    x6 --> x9\n    x4 --> O\n    TWO --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_794b24be(I):\n    x1 = ofcolor(I, ONE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = tojvec(x3)\n    x6 = connect(ORIGIN, x5)\n    x7 = equality(x2, FOUR)\n    x8 = insert(UNITY, x6)\n    x9 = branch(x7, x8, x6)\n    O = fill(x4, TWO, x9)\n    return O", "line_count": 12}
{"name": "88a10436", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[first]\n    x4[center]\n    x5[difference]\n    x6[first]\n    x7[normalize]\n    x8[shift]\n    x9[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    FIVE --> x2\n    x2 --> x3\n    x3 --> x4\n    x1 --> x5\n    x2 --> x5\n    x5 --> x6\n    x6 --> x7\n    x7 --> x8\n    x4 --> x8\n    x8 --> x9\n    NEG_UNITY --> x9\n    I --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_88a10436(I):\n    x1 = objects(I, F, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O", "line_count": 12}
{"name": "88a62173", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[tophalf]\n    x4[tophalf]\n    x5[bottomhalf]\n    x6[bottomhalf]\n    x7[astuple]\n    x8[astuple]\n    x9[combine]\n    O[leastcommon]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    x2 --> x4\n    x1 --> x5\n    x2 --> x6\n    x3 --> x7\n    x4 --> x7\n    x5 --> x8\n    x6 --> x8\n    x7 --> x9\n    x8 --> x9\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_88a62173(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O", "line_count": 12}
{"name": "890034e9", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[inbox]\n    x4[recolor]\n    x5[occurrences]\n    x6[normalize]\n    x7[shift]\n    x8[lbind]\n    x9[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    ZERO --> x4\n    x3 --> x4\n    I --> x5\n    x4 --> x5\n    x2 --> x6\n    x6 --> x7\n    NEG_UNITY --> x7\n    shift --> x8\n    x7 --> x8\n    x8 --> x9\n    x5 --> x9\n    I --> O\n    x1 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_890034e9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O", "line_count": 12}
{"name": "99b1bc43", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[combine]\n    x6[intersection]\n    x7[difference]\n    x8[shape]\n    x9[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    ZERO --> x3\n    x2 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x3 --> x6\n    x4 --> x6\n    x5 --> x7\n    x6 --> x7\n    x1 --> x8\n    ZERO --> x9\n    x8 --> x9\n    x9 --> O\n    THREE --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_99b1bc43(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = combine(x3, x4)\n    x6 = intersection(x3, x4)\n    x7 = difference(x5, x6)\n    x8 = shape(x1)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O", "line_count": 12}
{"name": "a9f96cdd", "graph": "graph TD\n    x1[ofcolor]\n    x2[replace]\n    x3[shift]\n    x4[fill]\n    x5[shift]\n    x6[fill]\n    x7[shift]\n    x8[fill]\n    x9[shift]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    TWO --> x2\n    ZERO --> x2\n    x1 --> x3\n    NEG_UNITY --> x3\n    x2 --> x4\n    THREE --> x4\n    x3 --> x4\n    x1 --> x5\n    UP_RIGHT --> x5\n    x4 --> x6\n    SIX --> x6\n    x5 --> x6\n    x1 --> x7\n    DOWN_LEFT --> x7\n    x6 --> x8\n    EIGHT --> x8\n    x7 --> x8\n    x1 --> x9\n    UNITY --> x9\n    x8 --> O\n    SEVEN --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a9f96cdd(I):\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, TWO, ZERO)\n    x3 = shift(x1, NEG_UNITY)\n    x4 = fill(x2, THREE, x3)\n    x5 = shift(x1, UP_RIGHT)\n    x6 = fill(x4, SIX, x5)\n    x7 = shift(x1, DOWN_LEFT)\n    x8 = fill(x6, EIGHT, x7)\n    x9 = shift(x1, UNITY)\n    O = fill(x8, SEVEN, x9)\n    return O", "line_count": 12}
{"name": "af902bf9", "graph": "graph TD\n    x1[ofcolor]\n    x2[prapply]\n    x3[fork]\n    x4[mfilter]\n    x5[underfill]\n    x6[objects]\n    x7[compose]\n    x8[mapply]\n    x9[fill]\n    O[replace]\n    I[I]\n    I --> x1\n    FOUR --> x1\n    connect --> x2\n    x1 --> x2\n    x1 --> x2\n    either --> x3\n    vline --> x3\n    hline --> x3\n    x2 --> x4\n    x3 --> x4\n    I --> x5\n    NEG_ONE --> x5\n    x4 --> x5\n    x5 --> x6\n    F --> x6\n    F --> x6\n    T --> x6\n    backdrop --> x7\n    inbox --> x7\n    x7 --> x8\n    x6 --> x8\n    x5 --> x9\n    TWO --> x9\n    x8 --> x9\n    x9 --> O\n    NEG_ONE --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_af902bf9(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = prapply(connect, x1, x1)\n    x3 = fork(either, vline, hline)\n    x4 = mfilter(x2, x3)\n    x5 = underfill(I, NEG_ONE, x4)\n    x6 = objects(x5, F, F, T)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    x9 = fill(x5, TWO, x8)\n    O = replace(x9, NEG_ONE, ZERO)\n    return O", "line_count": 12}
{"name": "b548a754", "graph": "graph TD\n    x1[objects]\n    x2[replace]\n    x3[leastcolor]\n    x4[replace]\n    x5[leastcolor]\n    x6[merge]\n    x7[backdrop]\n    x8[box]\n    x9[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    EIGHT --> x2\n    ZERO --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x4\n    ZERO --> x4\n    x4 --> x5\n    x1 --> x6\n    x6 --> x7\n    x6 --> x8\n    I --> x9\n    x3 --> x9\n    x7 --> x9\n    x9 --> O\n    x5 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b548a754(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O", "line_count": 12}
{"name": "bdad9b1f", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[center]\n    x4[center]\n    x5[hfrontier]\n    x6[vfrontier]\n    x7[intersection]\n    x8[fill]\n    x9[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    EIGHT --> x2\n    x1 --> x3\n    x2 --> x4\n    x3 --> x5\n    x4 --> x6\n    x5 --> x7\n    x6 --> x7\n    I --> x8\n    TWO --> x8\n    x5 --> x8\n    x8 --> x9\n    EIGHT --> x9\n    x6 --> x9\n    x9 --> O\n    FOUR --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bdad9b1f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x5)\n    x9 = fill(x8, EIGHT, x6)\n    O = fill(x9, FOUR, x7)\n    return O", "line_count": 12}
{"name": "c3e719e8", "graph": "graph TD\n    x1[mostcolor]\n    x2[hconcat]\n    x3[upscale]\n    x4[ofcolor]\n    x5[asindices]\n    x6[difference]\n    x7[hconcat]\n    x8[vconcat]\n    x9[vconcat]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x2\n    I --> x3\n    THREE --> x3\n    x3 --> x4\n    x1 --> x4\n    x3 --> x5\n    x5 --> x6\n    x4 --> x6\n    x2 --> x7\n    I --> x7\n    x7 --> x8\n    x7 --> x8\n    x8 --> x9\n    x7 --> x9\n    x9 --> O\n    ZERO --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c3e719e8(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = ofcolor(x3, x1)\n    x5 = asindices(x3)\n    x6 = difference(x5, x4)\n    x7 = hconcat(x2, I)\n    x8 = vconcat(x7, x7)\n    x9 = vconcat(x8, x7)\n    O = fill(x9, ZERO, x6)\n    return O", "line_count": 12}
{"name": "de1cd16c", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[sizefilter]\n    x4[difference]\n    x5[rbind]\n    x6[apply]\n    x7[rbind]\n    x8[argmax]\n    x9[mostcolor]\n    O[canvas]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x2 --> x3\n    ONE --> x3\n    x2 --> x4\n    x3 --> x4\n    subgrid --> x5\n    I --> x5\n    x5 --> x6\n    x4 --> x6\n    colorcount --> x7\n    x1 --> x7\n    x6 --> x8\n    x7 --> x8\n    x8 --> x9\n    x9 --> O\n    UNITY --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_de1cd16c(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = rbind(subgrid, I)\n    x6 = apply(x5, x4)\n    x7 = rbind(colorcount, x1)\n    x8 = argmax(x6, x7)\n    x9 = mostcolor(x8)\n    O = canvas(x9, UNITY)\n    return O", "line_count": 12}
{"name": "d8c310e9", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[hperiod]\n    x4[multiply]\n    x5[tojvec]\n    x6[tojvec]\n    x7[shift]\n    x8[shift]\n    x9[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x3 --> x4\n    THREE --> x4\n    x3 --> x5\n    x4 --> x6\n    x2 --> x7\n    x5 --> x7\n    x2 --> x8\n    x6 --> x8\n    I --> x9\n    x7 --> x9\n    x9 --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d8c310e9(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = hperiod(x2)\n    x4 = multiply(x3, THREE)\n    x5 = tojvec(x3)\n    x6 = tojvec(x4)\n    x7 = shift(x2, x5)\n    x8 = shift(x2, x6)\n    x9 = paint(I, x7)\n    O = paint(x9, x8)\n    return O", "line_count": 12}
{"name": "a3325580", "graph": "graph TD\n    x1[objects]\n    x2[valmax]\n    x3[sizefilter]\n    x4[order]\n    x5[apply]\n    x6[astuple]\n    x7[rbind]\n    x8[apply]\n    x9[merge]\n    O[dmirror]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    leftmost --> x4\n    color --> x5\n    x4 --> x5\n    ONE --> x6\n    x2 --> x6\n    canvas --> x7\n    x6 --> x7\n    x7 --> x8\n    x5 --> x8\n    x8 --> x9\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a3325580(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O", "line_count": 12}
{"name": "8eb1be9a", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[interval]\n    x4[lbind]\n    x5[height]\n    x6[rbind]\n    x7[apply]\n    x8[apply]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    NEG_TWO --> x3\n    FOUR --> x3\n    ONE --> x3\n    shift --> x4\n    x2 --> x4\n    x2 --> x5\n    multiply --> x6\n    x5 --> x6\n    x6 --> x7\n    x3 --> x7\n    toivec --> x8\n    x7 --> x8\n    x4 --> x9\n    x8 --> x9\n    I --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8eb1be9a(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = interval(NEG_TWO, FOUR, ONE)\n    x4 = lbind(shift, x2)\n    x5 = height(x2)\n    x6 = rbind(multiply, x5)\n    x7 = apply(x6, x3)\n    x8 = apply(toivec, x7)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O", "line_count": 12}
{"name": "321b1fc6", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[difference]\n    x4[first]\n    x5[cover]\n    x6[normalize]\n    x7[lbind]\n    x8[apply]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    EIGHT --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    I --> x5\n    x4 --> x5\n    x4 --> x6\n    shift --> x7\n    x6 --> x7\n    ulcorner --> x8\n    x2 --> x8\n    x7 --> x9\n    x8 --> x9\n    x5 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_321b1fc6(I):\n    x1 = objects(I, F, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O", "line_count": 12}
{"name": "1caeab9d", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[lowermost]\n    x4[lbind]\n    x5[chain]\n    x6[fork]\n    x7[merge]\n    x8[cover]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    ONE --> x2\n    x2 --> x3\n    subtract --> x4\n    x3 --> x4\n    toivec --> x5\n    x4 --> x5\n    lowermost --> x5\n    shift --> x6\n    identity --> x6\n    x5 --> x6\n    x1 --> x7\n    I --> x8\n    x7 --> x8\n    x6 --> x9\n    x1 --> x9\n    x8 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1caeab9d(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O", "line_count": 12}
{"name": "77fdfe62", "graph": "graph TD\n    x1[ofcolor]\n    x2[subgrid]\n    x3[replace]\n    x4[replace]\n    x5[compress]\n    x6[width]\n    x7[halve]\n    x8[upscale]\n    x9[ofcolor]\n    O[fill]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    x1 --> x2\n    I --> x2\n    I --> x3\n    EIGHT --> x3\n    ZERO --> x3\n    x3 --> x4\n    ONE --> x4\n    ZERO --> x4\n    x4 --> x5\n    x2 --> x6\n    x6 --> x7\n    x5 --> x8\n    x7 --> x8\n    x2 --> x9\n    ZERO --> x9\n    x8 --> O\n    ZERO --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_77fdfe62(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = replace(I, EIGHT, ZERO)\n    x4 = replace(x3, ONE, ZERO)\n    x5 = compress(x4)\n    x6 = width(x2)\n    x7 = halve(x6)\n    x8 = upscale(x5, x7)\n    x9 = ofcolor(x2, ZERO)\n    O = fill(x8, ZERO, x9)\n    return O", "line_count": 12}
{"name": "c0f76784", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[sfilter]\n    x4[sizefilter]\n    x5[merge]\n    x6[argmax]\n    x7[merge]\n    x8[fill]\n    x9[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    x2 --> x3\n    square --> x3\n    x3 --> x4\n    ONE --> x4\n    x4 --> x5\n    x3 --> x6\n    size --> x6\n    x3 --> x7\n    I --> x8\n    SEVEN --> x8\n    x7 --> x8\n    x8 --> x9\n    EIGHT --> x9\n    x6 --> x9\n    x9 --> O\n    SIX --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c0f76784(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    x6 = argmax(x3, size)\n    x7 = merge(x3)\n    x8 = fill(I, SEVEN, x7)\n    x9 = fill(x8, EIGHT, x6)\n    O = fill(x9, SIX, x5)\n    return O", "line_count": 12}
{"name": "1b60fb0c", "graph": "graph TD\n    x1[rot90]\n    x2[ofcolor]\n    x3[ofcolor]\n    x4[neighbors]\n    x5[mapply]\n    x6[lbind]\n    x7[apply]\n    x8[lbind]\n    x9[compose]\n    x10[argmax]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    ONE --> x2\n    x1 --> x3\n    ONE --> x3\n    ORIGIN --> x4\n    neighbors --> x5\n    x4 --> x5\n    shift --> x6\n    x3 --> x6\n    x6 --> x7\n    x5 --> x7\n    intersection --> x8\n    x2 --> x8\n    size --> x9\n    x8 --> x9\n    x7 --> x10\n    x9 --> x10\n    I --> O\n    TWO --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1b60fb0c(I):\n    x1 = rot90(I)\n    x2 = ofcolor(I, ONE)\n    x3 = ofcolor(x1, ONE)\n    x4 = neighbors(ORIGIN)\n    x5 = mapply(neighbors, x4)\n    x6 = lbind(shift, x3)\n    x7 = apply(x6, x5)\n    x8 = lbind(intersection, x2)\n    x9 = compose(size, x8)\n    x10 = argmax(x7, x9)\n    O = underfill(I, TWO, x10)\n    return O", "line_count": 13}
{"name": "ddf7fa4f", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[colorfilter]\n    x4[product]\n    x5[fork]\n    x6[sfilter]\n    x7[compose]\n    x8[fork]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    FIVE --> x3\n    x2 --> x4\n    x3 --> x4\n    vmatching --> x5\n    first --> x5\n    last --> x5\n    x4 --> x6\n    x5 --> x6\n    color --> x7\n    first --> x7\n    recolor --> x8\n    x7 --> x8\n    last --> x8\n    x8 --> x9\n    x6 --> x9\n    I --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ddf7fa4f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = colorfilter(x1, FIVE)\n    x4 = product(x2, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O", "line_count": 12}
{"name": "47c1f68c", "graph": "graph TD\n    x1[leastcolor]\n    x2[vmirror]\n    x3[objects]\n    x4[merge]\n    x5[mostcolor]\n    x6[cellwise]\n    x7[hmirror]\n    x8[cellwise]\n    x9[compress]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    T --> x3\n    T --> x3\n    T --> x3\n    x3 --> x4\n    x4 --> x5\n    I --> x6\n    x2 --> x6\n    x1 --> x6\n    x6 --> x7\n    x6 --> x8\n    x7 --> x8\n    x1 --> x8\n    x8 --> x9\n    x9 --> O\n    x1 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_47c1f68c(I):\n    x1 = leastcolor(I)\n    x2 = vmirror(I)\n    x3 = objects(I, T, T, T)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = cellwise(I, x2, x1)\n    x7 = hmirror(x6)\n    x8 = cellwise(x6, x7, x1)\n    x9 = compress(x8)\n    O = replace(x9, x1, x5)\n    return O", "line_count": 12}
{"name": "6c434453", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[dneighbors]\n    x4[insert]\n    x5[merge]\n    x6[cover]\n    x7[apply]\n    x8[lbind]\n    x9[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    EIGHT --> x2\n    UNITY --> x3\n    UNITY --> x4\n    x3 --> x4\n    x2 --> x5\n    I --> x6\n    x5 --> x6\n    ulcorner --> x7\n    x2 --> x7\n    shift --> x8\n    x4 --> x8\n    x8 --> x9\n    x7 --> x9\n    x6 --> O\n    TWO --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6c434453(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, EIGHT)\n    x3 = dneighbors(UNITY)\n    x4 = insert(UNITY, x3)\n    x5 = merge(x2)\n    x6 = cover(I, x5)\n    x7 = apply(ulcorner, x2)\n    x8 = lbind(shift, x4)\n    x9 = mapply(x8, x7)\n    O = fill(x6, TWO, x9)\n    return O", "line_count": 12}
{"name": "23581191", "graph": "graph TD\n    x1[objects]\n    x2[fork]\n    x3[compose]\n    x4[fork]\n    x5[mapply]\n    x6[paint]\n    x7[fork]\n    x8[apply]\n    x9[x7]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    combine --> x2\n    vfrontier --> x2\n    hfrontier --> x2\n    x2 --> x3\n    center --> x3\n    recolor --> x4\n    color --> x4\n    x3 --> x4\n    x4 --> x5\n    x1 --> x5\n    I --> x6\n    x5 --> x6\n    intersection --> x7\n    first --> x7\n    last --> x7\n    x3 --> x8\n    x1 --> x8\n    x8 --> x9\n    x6 --> O\n    TWO --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_23581191(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = fork(intersection, first, last)\n    x8 = apply(x3, x1)\n    x9 = x7(x8)\n    O = fill(x6, TWO, x9)\n    return O", "line_count": 12}
{"name": "c8cbb738", "graph": "graph TD\n    x1[mostcolor]\n    x2[fgpartition]\n    x3[valmax]\n    x4[canvas]\n    x5[apply]\n    x6[lbind]\n    x7[chain]\n    x8[fork]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    shape --> x3\n    x1 --> x4\n    x3 --> x4\n    normalize --> x5\n    x2 --> x5\n    subtract --> x6\n    x3 --> x6\n    halve --> x7\n    x6 --> x7\n    shape --> x7\n    shift --> x8\n    identity --> x8\n    x7 --> x8\n    x8 --> x9\n    x5 --> x9\n    x4 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c8cbb738(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O", "line_count": 12}
{"name": "3eda0437", "graph": "graph TD\n    x1[interval]\n    x2[prapply]\n    x3[lbind]\n    x4[lbind]\n    x5[lbind]\n    x6[fork]\n    x7[chain]\n    x8[mapply]\n    x9[argmax]\n    O[fill]\n    I[I]\n    TWO --> x1\n    TEN --> x1\n    ONE --> x1\n    astuple --> x2\n    x1 --> x2\n    x1 --> x2\n    canvas --> x3\n    ZERO --> x3\n    occurrences --> x4\n    I --> x4\n    lbind --> x5\n    shift --> x5\n    apply --> x6\n    x5 --> x6\n    x4 --> x6\n    x6 --> x7\n    asobject --> x7\n    x3 --> x7\n    x7 --> x8\n    x2 --> x8\n    x8 --> x9\n    size --> x9\n    I --> O\n    SIX --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3eda0437(I):\n    x1 = interval(TWO, TEN, ONE)\n    x2 = prapply(astuple, x1, x1)\n    x3 = lbind(canvas, ZERO)\n    x4 = lbind(occurrences, I)\n    x5 = lbind(lbind, shift)\n    x6 = fork(apply, x5, x4)\n    x7 = chain(x6, asobject, x3)\n    x8 = mapply(x7, x2)\n    x9 = argmax(x8, size)\n    O = fill(I, SIX, x9)\n    return O", "line_count": 12}
{"name": "dc0a314f", "graph": "graph TD\n    x1[ofcolor]\n    x2[replace]\n    x3[dmirror]\n    x4[papply]\n    x5[lbind]\n    x6[apply]\n    x7[cmirror]\n    x8[papply]\n    x9[apply]\n    O[subgrid]\n    I[I]\n    I --> x1\n    THREE --> x1\n    I --> x2\n    THREE --> x2\n    ZERO --> x2\n    x2 --> x3\n    pair --> x4\n    x2 --> x4\n    x3 --> x4\n    apply --> x5\n    maximum --> x5\n    x5 --> x6\n    x4 --> x6\n    x6 --> x7\n    pair --> x8\n    x6 --> x8\n    x7 --> x8\n    x5 --> x9\n    x8 --> x9\n    x1 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_dc0a314f(I):\n    x1 = ofcolor(I, THREE)\n    x2 = replace(I, THREE, ZERO)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x1, x9)\n    return O", "line_count": 12}
{"name": "d4469b4b", "graph": "graph TD\n    x1[palette]\n    x2[other]\n    x3[equality]\n    x4[equality]\n    x5[branch]\n    x6[branch]\n    x7[fork]\n    x8[x7]\n    x9[canvas]\n    O[fill]\n    I[I]\n    I --> x1\n    x1 --> x2\n    ZERO --> x2\n    x2 --> x3\n    ONE --> x3\n    x2 --> x4\n    TWO --> x4\n    x3 --> x5\n    UNITY --> x5\n    TWO_BY_TWO --> x5\n    x4 --> x6\n    RIGHT --> x6\n    x5 --> x6\n    combine --> x7\n    vfrontier --> x7\n    hfrontier --> x7\n    x6 --> x8\n    ZERO --> x9\n    THREE_BY_THREE --> x9\n    x9 --> O\n    FIVE --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d4469b4b(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, UNITY, TWO_BY_TWO)\n    x6 = branch(x4, RIGHT, x5)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x9, FIVE, x8)\n    return O", "line_count": 12}
{"name": "6ecd11f4", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[argmin]\n    x4[subgrid]\n    x5[subgrid]\n    x6[width]\n    x7[width]\n    x8[divide]\n    x9[downscale]\n    x10[ofcolor]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x1 --> x3\n    size --> x3\n    x2 --> x4\n    I --> x4\n    x3 --> x5\n    I --> x5\n    x4 --> x6\n    x5 --> x7\n    x6 --> x8\n    x7 --> x8\n    x4 --> x9\n    x8 --> x9\n    x9 --> x10\n    ZERO --> x10\n    x5 --> O\n    ZERO --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6ecd11f4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = subgrid(x3, I)\n    x6 = width(x4)\n    x7 = width(x5)\n    x8 = divide(x6, x7)\n    x9 = downscale(x4, x8)\n    x10 = ofcolor(x9, ZERO)\n    O = fill(x5, ZERO, x10)\n    return O", "line_count": 13}
{"name": "760b3cac", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[ulcorner]\n    x4[index]\n    x5[equality]\n    x6[branch]\n    x7[multiply]\n    x8[tojvec]\n    x9[vmirror]\n    x10[shift]\n    O[fill]\n    I[I]\n    I --> x1\n    FOUR --> x1\n    I --> x2\n    EIGHT --> x2\n    x1 --> x3\n    I --> x4\n    x3 --> x4\n    x4 --> x5\n    FOUR --> x5\n    x5 --> x6\n    NEG_ONE --> x6\n    ONE --> x6\n    x6 --> x7\n    THREE --> x7\n    x7 --> x8\n    x2 --> x9\n    x9 --> x10\n    x8 --> x10\n    I --> O\n    EIGHT --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_760b3cac(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = ofcolor(I, EIGHT)\n    x3 = ulcorner(x1)\n    x4 = index(I, x3)\n    x5 = equality(x4, FOUR)\n    x6 = branch(x5, NEG_ONE, ONE)\n    x7 = multiply(x6, THREE)\n    x8 = tojvec(x7)\n    x9 = vmirror(x2)\n    x10 = shift(x9, x8)\n    O = fill(I, EIGHT, x10)\n    return O", "line_count": 13}
{"name": "c444b776", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[argmin]\n    x4[backdrop]\n    x5[toobject]\n    x6[normalize]\n    x7[lbind]\n    x8[compose]\n    x9[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    x2 --> x3\n    size --> x3\n    x3 --> x4\n    x4 --> x5\n    I --> x5\n    x5 --> x6\n    shift --> x7\n    x6 --> x7\n    x7 --> x8\n    ulcorner --> x8\n    x8 --> x9\n    x2 --> x9\n    I --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c444b776(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmin(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O", "line_count": 12}
{"name": "d4a91cb9", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[first]\n    x4[first]\n    x5[last]\n    x6[first]\n    x7[astuple]\n    x8[connect]\n    x9[connect]\n    x10[combine]\n    O[underfill]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    I --> x2\n    TWO --> x2\n    x1 --> x3\n    x2 --> x4\n    x3 --> x5\n    x4 --> x6\n    x6 --> x7\n    x5 --> x7\n    x7 --> x8\n    x3 --> x8\n    x7 --> x9\n    x4 --> x9\n    x8 --> x10\n    x9 --> x10\n    I --> O\n    FOUR --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d4a91cb9(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = ofcolor(I, TWO)\n    x3 = first(x1)\n    x4 = first(x2)\n    x5 = last(x3)\n    x6 = first(x4)\n    x7 = astuple(x6, x5)\n    x8 = connect(x7, x3)\n    x9 = connect(x7, x4)\n    x10 = combine(x8, x9)\n    O = underfill(I, FOUR, x10)\n    return O", "line_count": 13}
{"name": "eb281b96", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[decrement]\n    x4[astuple]\n    x5[crop]\n    x6[hmirror]\n    x7[vconcat]\n    x8[double]\n    x9[astuple]\n    x10[crop]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    x3 --> x4\n    x2 --> x4\n    I --> x5\n    ORIGIN --> x5\n    x4 --> x5\n    x5 --> x6\n    I --> x7\n    x6 --> x7\n    x3 --> x8\n    x8 --> x9\n    x2 --> x9\n    x7 --> x10\n    DOWN --> x10\n    x9 --> x10\n    x7 --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_eb281b96(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = decrement(x1)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(I, x6)\n    x8 = double(x3)\n    x9 = astuple(x8, x2)\n    x10 = crop(x7, DOWN, x9)\n    O = vconcat(x7, x10)\n    return O", "line_count": 13}
{"name": "ff28f65a", "graph": "graph TD\n    x1[objects]\n    x2[size]\n    x3[double]\n    x4[interval]\n    x5[apply]\n    x6[astuple]\n    x7[canvas]\n    x8[fill]\n    x9[hsplit]\n    O[merge]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    ZERO --> x4\n    x3 --> x4\n    TWO --> x4\n    tojvec --> x5\n    x4 --> x5\n    ONE --> x6\n    NINE --> x6\n    ZERO --> x7\n    x6 --> x7\n    x7 --> x8\n    ONE --> x8\n    x5 --> x8\n    x8 --> x9\n    THREE --> x9\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ff28f65a(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O", "line_count": 12}
{"name": "7e0986d6", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[replace]\n    x4[leastcolor]\n    x5[rbind]\n    x6[chain]\n    x7[rbind]\n    x8[chain]\n    x9[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    I --> x3\n    x1 --> x3\n    ZERO --> x3\n    x3 --> x4\n    colorcount --> x5\n    x4 --> x5\n    positive --> x6\n    decrement --> x6\n    x5 --> x6\n    toobject --> x7\n    x3 --> x7\n    x6 --> x8\n    x7 --> x8\n    dneighbors --> x8\n    x2 --> x9\n    x8 --> x9\n    x3 --> O\n    x4 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7e0986d6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O", "line_count": 12}
{"name": "09629e4f", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    x3[normalize]\n    x4[upscale]\n    x5[paint]\n    x6[ofcolor]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    x2 --> x3\n    x3 --> x4\n    FOUR --> x4\n    I --> x5\n    x4 --> x5\n    I --> x6\n    FIVE --> x6\n    x5 --> O\n    FIVE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_09629e4f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O", "line_count": 9}
{"name": "a85d4709", "graph": "graph TD\n    x1[ofcolor]\n    x2[lbind]\n    x3[lbind]\n    x4[lbind]\n    x5[chain]\n    x6[x5]\n    x7[x5]\n    x8[x5]\n    x9[fill]\n    x10[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    matcher --> x2\n    last --> x2\n    sfilter --> x3\n    x1 --> x3\n    mapply --> x4\n    hfrontier --> x4\n    x4 --> x5\n    x3 --> x5\n    x2 --> x5\n    ZERO --> x6\n    TWO --> x7\n    ONE --> x8\n    I --> x9\n    TWO --> x9\n    x6 --> x9\n    x9 --> x10\n    THREE --> x10\n    x7 --> x10\n    x10 --> O\n    FOUR --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a85d4709(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = lbind(matcher, last)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(mapply, hfrontier)\n    x5 = chain(x4, x3, x2)\n    x6 = x5(ZERO)\n    x7 = x5(TWO)\n    x8 = x5(ONE)\n    x9 = fill(I, TWO, x6)\n    x10 = fill(x9, THREE, x7)\n    O = fill(x10, FOUR, x8)\n    return O", "line_count": 13}
{"name": "feca6190", "graph": "graph TD\n    x1[objects]\n    x2[size]\n    x3[multiply]\n    x4[astuple]\n    x5[canvas]\n    x6[rbind]\n    x7[compose]\n    x8[fork]\n    x9[mapply]\n    x10[paint]\n    O[hmirror]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    FIVE --> x3\n    x3 --> x4\n    x3 --> x4\n    ZERO --> x5\n    x4 --> x5\n    shoot --> x6\n    UNITY --> x6\n    x6 --> x7\n    center --> x7\n    recolor --> x8\n    color --> x8\n    x7 --> x8\n    x8 --> x9\n    x1 --> x9\n    x5 --> x10\n    x9 --> x10\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_feca6190(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O", "line_count": 13}
{"name": "a68b268e", "graph": "graph TD\n    x1[tophalf]\n    x2[bottomhalf]\n    x3[lefthalf]\n    x4[righthalf]\n    x5[lefthalf]\n    x6[righthalf]\n    x7[ofcolor]\n    x8[ofcolor]\n    x9[ofcolor]\n    x10[fill]\n    x11[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    x1 --> x4\n    x2 --> x5\n    x2 --> x6\n    x4 --> x7\n    FOUR --> x7\n    x3 --> x8\n    SEVEN --> x8\n    x5 --> x9\n    EIGHT --> x9\n    x6 --> x10\n    EIGHT --> x10\n    x9 --> x10\n    x10 --> x11\n    FOUR --> x11\n    x7 --> x11\n    x11 --> O\n    SEVEN --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a68b268e(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O", "line_count": 14}
{"name": "beb8660c", "graph": "graph TD\n    x1[shape]\n    x2[objects]\n    x3[compose]\n    x4[order]\n    x5[apply]\n    x6[size]\n    x7[interval]\n    x8[apply]\n    x9[mpapply]\n    x10[canvas]\n    x11[paint]\n    O[rot180]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    invert --> x3\n    size --> x3\n    x2 --> x4\n    x3 --> x4\n    normalize --> x5\n    x4 --> x5\n    x5 --> x6\n    ZERO --> x7\n    x6 --> x7\n    ONE --> x7\n    toivec --> x8\n    x7 --> x8\n    shift --> x9\n    x5 --> x9\n    x8 --> x9\n    ZERO --> x10\n    x1 --> x10\n    x10 --> x11\n    x9 --> x11\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_beb8660c(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(invert, size)\n    x4 = order(x2, x3)\n    x5 = apply(normalize, x4)\n    x6 = size(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = apply(toivec, x7)\n    x9 = mpapply(shift, x5, x8)\n    x10 = canvas(ZERO, x1)\n    x11 = paint(x10, x9)\n    O = rot180(x11)\n    return O", "line_count": 14}
{"name": "913fb3ed", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[ofcolor]\n    x4[mapply]\n    x5[mapply]\n    x6[mapply]\n    x7[fill]\n    x8[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    THREE --> x1\n    I --> x2\n    EIGHT --> x2\n    I --> x3\n    TWO --> x3\n    neighbors --> x4\n    x1 --> x4\n    neighbors --> x5\n    x2 --> x5\n    neighbors --> x6\n    x3 --> x6\n    I --> x7\n    SIX --> x7\n    x4 --> x7\n    x7 --> x8\n    FOUR --> x8\n    x5 --> x8\n    x8 --> O\n    ONE --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_913fb3ed(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, EIGHT)\n    x3 = ofcolor(I, TWO)\n    x4 = mapply(neighbors, x1)\n    x5 = mapply(neighbors, x2)\n    x6 = mapply(neighbors, x3)\n    x7 = fill(I, SIX, x4)\n    x8 = fill(x7, FOUR, x5)\n    O = fill(x8, ONE, x6)\n    return O", "line_count": 11}
{"name": "0962bcdd", "graph": "graph TD\n    x1[leastcolor]\n    x2[replace]\n    x3[leastcolor]\n    x4[ofcolor]\n    x5[mapply]\n    x6[fill]\n    x7[objects]\n    x8[fork]\n    x9[fork]\n    x10[fork]\n    x11[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    ZERO --> x2\n    x1 --> x2\n    x2 --> x3\n    I --> x4\n    x3 --> x4\n    dneighbors --> x5\n    x4 --> x5\n    I --> x6\n    x3 --> x6\n    x5 --> x6\n    x6 --> x7\n    F --> x7\n    T --> x7\n    T --> x7\n    connect --> x8\n    ulcorner --> x8\n    lrcorner --> x8\n    connect --> x9\n    llcorner --> x9\n    urcorner --> x9\n    combine --> x10\n    x8 --> x10\n    x9 --> x10\n    x10 --> x11\n    x7 --> x11\n    x6 --> O\n    x1 --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0962bcdd(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, ZERO, x1)\n    x3 = leastcolor(x2)\n    x4 = ofcolor(I, x3)\n    x5 = mapply(dneighbors, x4)\n    x6 = fill(I, x3, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = fork(connect, ulcorner, lrcorner)\n    x9 = fork(connect, llcorner, urcorner)\n    x10 = fork(combine, x8, x9)\n    x11 = mapply(x10, x7)\n    O = fill(x6, x1, x11)\n    return O", "line_count": 14}
{"name": "3631a71a", "graph": "graph TD\n    x1[shape]\n    x2[replace]\n    x3[lbind]\n    x4[dmirror]\n    x5[papply]\n    x6[apply]\n    x7[subtract]\n    x8[crop]\n    x9[vmirror]\n    x10[objects]\n    x11[merge]\n    x12[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    NINE --> x2\n    ZERO --> x2\n    apply --> x3\n    maximum --> x3\n    x2 --> x4\n    pair --> x5\n    x2 --> x5\n    x4 --> x5\n    x3 --> x6\n    x5 --> x6\n    x1 --> x7\n    TWO_BY_TWO --> x7\n    x6 --> x8\n    TWO_BY_TWO --> x8\n    x7 --> x8\n    x8 --> x9\n    x9 --> x10\n    T --> x10\n    F --> x10\n    T --> x10\n    x10 --> x11\n    x11 --> x12\n    TWO_BY_TWO --> x12\n    x6 --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3631a71a(I):\n    x1 = shape(I)\n    x2 = replace(I, NINE, ZERO)\n    x3 = lbind(apply, maximum)\n    x4 = dmirror(x2)\n    x5 = papply(pair, x2, x4)\n    x6 = apply(x3, x5)\n    x7 = subtract(x1, TWO_BY_TWO)\n    x8 = crop(x6, TWO_BY_TWO, x7)\n    x9 = vmirror(x8)\n    x10 = objects(x9, T, F, T)\n    x11 = merge(x10)\n    x12 = shift(x11, TWO_BY_TWO)\n    O = paint(x6, x12)\n    return O", "line_count": 15}
{"name": "05269061", "graph": "graph TD\n    x1[objects]\n    x2[neighbors]\n    x3[mapply]\n    x4[rbind]\n    x5[apply]\n    x6[merge]\n    x7[lbind]\n    x8[mapply]\n    x9[shift]\n    x10[shift]\n    x11[paint]\n    x12[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    ORIGIN --> x2\n    neighbors --> x3\n    x2 --> x3\n    multiply --> x4\n    THREE --> x4\n    x4 --> x5\n    x3 --> x5\n    x1 --> x6\n    shift --> x7\n    x6 --> x7\n    x7 --> x8\n    x5 --> x8\n    x8 --> x9\n    UP_RIGHT --> x9\n    x8 --> x10\n    DOWN_LEFT --> x10\n    I --> x11\n    x8 --> x11\n    x11 --> x12\n    x9 --> x12\n    x12 --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_05269061(I):\n    x1 = objects(I, T, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    x9 = shift(x8, UP_RIGHT)\n    x10 = shift(x8, DOWN_LEFT)\n    x11 = paint(I, x8)\n    x12 = paint(x11, x9)\n    O = paint(x12, x10)\n    return O", "line_count": 15}
{"name": "95990924", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[apply]\n    x4[apply]\n    x5[apply]\n    x6[apply]\n    x7[fill]\n    x8[fill]\n    x9[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    outbox --> x2\n    x1 --> x2\n    ulcorner --> x3\n    x2 --> x3\n    urcorner --> x4\n    x2 --> x4\n    llcorner --> x5\n    x2 --> x5\n    lrcorner --> x6\n    x2 --> x6\n    I --> x7\n    ONE --> x7\n    x3 --> x7\n    x7 --> x8\n    TWO --> x8\n    x4 --> x8\n    x8 --> x9\n    THREE --> x9\n    x5 --> x9\n    x9 --> O\n    FOUR --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_95990924(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O", "line_count": 12}
{"name": "e509e548", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[chain]\n    x4[lbind]\n    x5[compose]\n    x6[fork]\n    x7[compose]\n    x8[fork]\n    x9[mfilter]\n    x10[mfilter]\n    x11[replace]\n    x12[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    subgrid --> x2\n    I --> x2\n    palette --> x3\n    trim --> x3\n    x2 --> x3\n    contained --> x4\n    THREE --> x4\n    x4 --> x5\n    x3 --> x5\n    add --> x6\n    height --> x6\n    width --> x6\n    decrement --> x7\n    x6 --> x7\n    equality --> x8\n    size --> x8\n    x7 --> x8\n    x1 --> x9\n    x5 --> x9\n    x1 --> x10\n    x8 --> x10\n    I --> x11\n    THREE --> x11\n    SIX --> x11\n    x11 --> x12\n    TWO --> x12\n    x9 --> x12\n    x12 --> O\n    ONE --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e509e548(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O", "line_count": 15}
{"name": "d43fd935", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[sizefilter]\n    x4[rbind]\n    x5[rbind]\n    x6[fork]\n    x7[sfilter]\n    x8[rbind]\n    x9[fork]\n    x10[fork]\n    x11[fork]\n    x12[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    THREE --> x2\n    x1 --> x3\n    ONE --> x3\n    vmatching --> x4\n    x2 --> x4\n    hmatching --> x5\n    x2 --> x5\n    either --> x6\n    x4 --> x6\n    x5 --> x6\n    x3 --> x7\n    x6 --> x7\n    gravitate --> x8\n    x2 --> x8\n    add --> x9\n    center --> x9\n    x8 --> x9\n    connect --> x10\n    center --> x10\n    x9 --> x10\n    recolor --> x11\n    color --> x11\n    x10 --> x11\n    x11 --> x12\n    x7 --> x12\n    I --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d43fd935(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O", "line_count": 15}
{"name": "db3e9e38", "graph": "graph TD\n    x1[ofcolor]\n    x2[lrcorner]\n    x3[shoot]\n    x4[shoot]\n    x5[combine]\n    x6[rbind]\n    x7[mapply]\n    x8[last]\n    x9[rbind]\n    x10[chain]\n    x11[fill]\n    x12[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    SEVEN --> x1\n    x1 --> x2\n    x2 --> x3\n    UP_RIGHT --> x3\n    x2 --> x4\n    NEG_UNITY --> x4\n    x3 --> x5\n    x4 --> x5\n    shoot --> x6\n    UP --> x6\n    x6 --> x7\n    x5 --> x7\n    x2 --> x8\n    subtract --> x9\n    x8 --> x9\n    even --> x10\n    x9 --> x10\n    last --> x10\n    I --> x11\n    EIGHT --> x11\n    x7 --> x11\n    x7 --> x12\n    x10 --> x12\n    x11 --> O\n    SEVEN --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_db3e9e38(I):\n    x1 = ofcolor(I, SEVEN)\n    x2 = lrcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, NEG_UNITY)\n    x5 = combine(x3, x4)\n    x6 = rbind(shoot, UP)\n    x7 = mapply(x6, x5)\n    x8 = last(x2)\n    x9 = rbind(subtract, x8)\n    x10 = chain(even, x9, last)\n    x11 = fill(I, EIGHT, x7)\n    x12 = sfilter(x7, x10)\n    O = fill(x11, SEVEN, x12)\n    return O", "line_count": 15}
{"name": "e73095fd", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[fork]\n    x4[sfilter]\n    x5[lbind]\n    x6[chain]\n    x7[fork]\n    x8[ofcolor]\n    x9[rbind]\n    x10[matcher]\n    x11[chain]\n    x12[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    equality --> x3\n    toindices --> x3\n    backdrop --> x3\n    x2 --> x4\n    x3 --> x4\n    mapply --> x5\n    dneighbors --> x5\n    x5 --> x6\n    corners --> x6\n    outbox --> x6\n    difference --> x7\n    x6 --> x7\n    outbox --> x7\n    I --> x8\n    FIVE --> x8\n    intersection --> x9\n    x8 --> x9\n    size --> x10\n    ZERO --> x10\n    x10 --> x11\n    x9 --> x11\n    x7 --> x11\n    x4 --> x12\n    x11 --> x12\n    I --> O\n    FOUR --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e73095fd(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x2, x3)\n    x5 = lbind(mapply, dneighbors)\n    x6 = chain(x5, corners, outbox)\n    x7 = fork(difference, x6, outbox)\n    x8 = ofcolor(I, FIVE)\n    x9 = rbind(intersection, x8)\n    x10 = matcher(size, ZERO)\n    x11 = chain(x10, x9, x7)\n    x12 = mfilter(x4, x11)\n    O = fill(I, FOUR, x12)\n    return O", "line_count": 15}
{"name": "1bfc4729", "graph": "graph TD\n    x1[asindices]\n    x2[tophalf]\n    x3[bottomhalf]\n    x4[leastcolor]\n    x5[leastcolor]\n    x6[hfrontier]\n    x7[box]\n    x8[combine]\n    x9[fill]\n    x10[hmirror]\n    x11[replace]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x2 --> x4\n    x3 --> x5\n    TWO_BY_ZERO --> x6\n    x1 --> x7\n    x6 --> x8\n    x7 --> x8\n    x2 --> x9\n    x4 --> x9\n    x8 --> x9\n    x9 --> x10\n    x10 --> x11\n    x4 --> x11\n    x5 --> x11\n    x9 --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1bfc4729(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = bottomhalf(I)\n    x4 = leastcolor(x2)\n    x5 = leastcolor(x3)\n    x6 = hfrontier(TWO_BY_ZERO)\n    x7 = box(x1)\n    x8 = combine(x6, x7)\n    x9 = fill(x2, x4, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, x4, x5)\n    O = vconcat(x9, x11)\n    return O", "line_count": 14}
{"name": "93b581b8", "graph": "graph TD\n    x1[fgpartition]\n    x2[chain]\n    x3[x2]\n    x4[upscale]\n    x5[astuple]\n    x6[shift]\n    x7[underpaint]\n    x8[toindices]\n    x9[fork]\n    x10[mapply]\n    x11[difference]\n    O[fill]\n    I[I]\n    I --> x1\n    cmirror --> x2\n    dmirror --> x2\n    merge --> x2\n    x1 --> x3\n    x3 --> x4\n    THREE --> x4\n    NEG_TWO --> x5\n    NEG_TWO --> x5\n    x4 --> x6\n    x5 --> x6\n    I --> x7\n    x6 --> x7\n    x3 --> x8\n    combine --> x9\n    hfrontier --> x9\n    vfrontier --> x9\n    x9 --> x10\n    x8 --> x10\n    x10 --> x11\n    x8 --> x11\n    x7 --> O\n    ZERO --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_93b581b8(I):\n    x1 = fgpartition(I)\n    x2 = chain(cmirror, dmirror, merge)\n    x3 = x2(x1)\n    x4 = upscale(x3, THREE)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = shift(x4, x5)\n    x7 = underpaint(I, x6)\n    x8 = toindices(x3)\n    x9 = fork(combine, hfrontier, vfrontier)\n    x10 = mapply(x9, x8)\n    x11 = difference(x10, x8)\n    O = fill(x7, ZERO, x11)\n    return O", "line_count": 14}
{"name": "9edfc990", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[ofcolor]\n    x4[rbind]\n    x5[mfilter]\n    x6[recolor]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    I --> x3\n    ONE --> x3\n    adjacent --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    ONE --> x6\n    x5 --> x6\n    I --> O\n    x6 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9edfc990(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = rbind(adjacent, x3)\n    x5 = mfilter(x2, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O", "line_count": 9}
{"name": "a65b410d", "graph": "graph TD\n    x1[ofcolor]\n    x2[urcorner]\n    x3[shoot]\n    x4[shoot]\n    x5[underfill]\n    x6[underfill]\n    x7[rbind]\n    x8[mapply]\n    x9[mapply]\n    x10[underfill]\n    O[underfill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    x1 --> x2\n    x2 --> x3\n    UP_RIGHT --> x3\n    x2 --> x4\n    DOWN_LEFT --> x4\n    I --> x5\n    THREE --> x5\n    x3 --> x5\n    x5 --> x6\n    ONE --> x6\n    x4 --> x6\n    shoot --> x7\n    LEFT --> x7\n    x7 --> x8\n    x3 --> x8\n    x7 --> x9\n    x4 --> x9\n    x6 --> x10\n    ONE --> x10\n    x9 --> x10\n    x10 --> O\n    THREE --> O\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a65b410d(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O", "line_count": 13}
{"name": "7447852a", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[compose]\n    x4[order]\n    x5[size]\n    x6[interval]\n    x7[rbind]\n    x8[compose]\n    x9[interval]\n    x10[pair]\n    x11[sfilter]\n    x12[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    last --> x3\n    center --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    ZERO --> x6\n    x5 --> x6\n    THREE --> x6\n    contained --> x7\n    x6 --> x7\n    x7 --> x8\n    last --> x8\n    ZERO --> x9\n    x5 --> x9\n    ONE --> x9\n    x4 --> x10\n    x9 --> x10\n    x10 --> x11\n    x8 --> x11\n    first --> x12\n    x11 --> x12\n    I --> O\n    FOUR --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7447852a(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O", "line_count": 15}
{"name": "97999447", "graph": "graph TD\n    x1[objects]\n    x2[apply]\n    x3[rbind]\n    x4[compose]\n    x5[fork]\n    x6[mapply]\n    x7[paint]\n    x8[interval]\n    x9[apply]\n    x10[apply]\n    x11[apply]\n    x12[prapply]\n    x13[merge]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    toindices --> x2\n    x1 --> x2\n    shoot --> x3\n    RIGHT --> x3\n    x3 --> x4\n    center --> x4\n    recolor --> x5\n    color --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x6\n    I --> x7\n    x6 --> x7\n    ZERO --> x8\n    FIVE --> x8\n    ONE --> x8\n    double --> x9\n    x8 --> x9\n    increment --> x10\n    x9 --> x10\n    tojvec --> x11\n    x10 --> x11\n    shift --> x12\n    x2 --> x12\n    x11 --> x12\n    x12 --> x13\n    x7 --> O\n    FIVE --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_97999447(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O", "line_count": 16}
{"name": "91714a58", "graph": "graph TD\n    x1[shape]\n    x2[asindices]\n    x3[objects]\n    x4[argmax]\n    x5[mostcolor]\n    x6[canvas]\n    x7[paint]\n    x8[rbind]\n    x9[rbind]\n    x10[chain]\n    x11[lbind]\n    x12[compose]\n    x13[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    T --> x3\n    F --> x3\n    T --> x3\n    x3 --> x4\n    size --> x4\n    x4 --> x5\n    ZERO --> x6\n    x1 --> x6\n    x6 --> x7\n    x4 --> x7\n    toobject --> x8\n    x7 --> x8\n    colorcount --> x9\n    x5 --> x9\n    x9 --> x10\n    x8 --> x10\n    neighbors --> x10\n    greater --> x11\n    THREE --> x11\n    x11 --> x12\n    x10 --> x12\n    x2 --> x13\n    x12 --> x13\n    x7 --> O\n    ZERO --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_91714a58(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = canvas(ZERO, x1)\n    x7 = paint(x6, x4)\n    x8 = rbind(toobject, x7)\n    x9 = rbind(colorcount, x5)\n    x10 = chain(x9, x8, neighbors)\n    x11 = lbind(greater, THREE)\n    x12 = compose(x11, x10)\n    x13 = sfilter(x2, x12)\n    O = fill(x7, ZERO, x13)\n    return O", "line_count": 16}
{"name": "a61ba2ce", "graph": "graph TD\n    x1[objects]\n    x2[lbind]\n    x3[matcher]\n    x4[lbind]\n    x5[rbind]\n    x6[lbind]\n    x7[chain]\n    x8[x7]\n    x9[x7]\n    x10[x7]\n    x11[x7]\n    x12[hconcat]\n    x13[hconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    index --> x2\n    I --> x2\n    x2 --> x3\n    ZERO --> x3\n    extract --> x4\n    x1 --> x4\n    subgrid --> x5\n    I --> x5\n    compose --> x6\n    x3 --> x6\n    x5 --> x7\n    x4 --> x7\n    x6 --> x7\n    ulcorner --> x8\n    urcorner --> x9\n    llcorner --> x10\n    lrcorner --> x11\n    x11 --> x12\n    x10 --> x12\n    x9 --> x13\n    x8 --> x13\n    x12 --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a61ba2ce(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(extract, x1)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(compose, x3)\n    x7 = chain(x5, x4, x6)\n    x8 = x7(ulcorner)\n    x9 = x7(urcorner)\n    x10 = x7(llcorner)\n    x11 = x7(lrcorner)\n    x12 = hconcat(x11, x10)\n    x13 = hconcat(x9, x8)\n    O = vconcat(x12, x13)\n    return O", "line_count": 16}
{"name": "8e1813be", "graph": "graph TD\n    x1[replace]\n    x2[objects]\n    x3[first]\n    x4[vline]\n    x5[branch]\n    x6[x5]\n    x7[objects]\n    x8[order]\n    x9[apply]\n    x10[dedupe]\n    x11[size]\n    x12[rbind]\n    x13[apply]\n    O[x5]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    ZERO --> x1\n    x1 --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    x2 --> x3\n    x3 --> x4\n    x4 --> x5\n    dmirror --> x5\n    identity --> x5\n    x1 --> x6\n    x6 --> x7\n    T --> x7\n    T --> x7\n    T --> x7\n    x7 --> x8\n    uppermost --> x8\n    color --> x9\n    x8 --> x9\n    x9 --> x10\n    x10 --> x11\n    repeat --> x12\n    x11 --> x12\n    x12 --> x13\n    x10 --> x13\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8e1813be(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = first(x2)\n    x4 = vline(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x1)\n    x7 = objects(x6, T, T, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O", "line_count": 16}
{"name": "bc1d5164", "graph": "graph TD\n    x1[leastcolor]\n    x2[crop]\n    x3[crop]\n    x4[tojvec]\n    x5[crop]\n    x6[astuple]\n    x7[crop]\n    x8[canvas]\n    x9[rbind]\n    x10[astuple]\n    x11[astuple]\n    x12[combine]\n    x13[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    ORIGIN --> x2\n    THREE_BY_THREE --> x2\n    I --> x3\n    TWO_BY_ZERO --> x3\n    THREE_BY_THREE --> x3\n    FOUR --> x4\n    I --> x5\n    x4 --> x5\n    THREE_BY_THREE --> x5\n    TWO --> x6\n    FOUR --> x6\n    I --> x7\n    x6 --> x7\n    THREE_BY_THREE --> x7\n    ZERO --> x8\n    THREE_BY_THREE --> x8\n    ofcolor --> x9\n    x1 --> x9\n    x2 --> x10\n    x3 --> x10\n    x5 --> x11\n    x7 --> x11\n    x10 --> x12\n    x11 --> x12\n    x9 --> x13\n    x12 --> x13\n    x8 --> O\n    x1 --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_bc1d5164(I):\n    x1 = leastcolor(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    x3 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x4 = tojvec(FOUR)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = astuple(TWO, FOUR)\n    x7 = crop(I, x6, THREE_BY_THREE)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    x9 = rbind(ofcolor, x1)\n    x10 = astuple(x2, x3)\n    x11 = astuple(x5, x7)\n    x12 = combine(x10, x11)\n    x13 = mapply(x9, x12)\n    O = fill(x8, x1, x13)\n    return O", "line_count": 16}
{"name": "ce602527", "graph": "graph TD\n    x1[vmirror]\n    x2[fgpartition]\n    x3[order]\n    x4[last]\n    x5[remove]\n    x6[compose]\n    x7[rbind]\n    x8[chain]\n    x9[x6]\n    x10[rbind]\n    x11[chain]\n    x12[argmax]\n    x13[subgrid]\n    O[vmirror]\n    I[I]\n    I --> x1\n    x1 --> x2\n    x2 --> x3\n    size --> x3\n    x3 --> x4\n    x4 --> x5\n    x3 --> x5\n    toindices --> x6\n    normalize --> x6\n    upscale --> x7\n    TWO --> x7\n    toindices --> x8\n    x7 --> x8\n    normalize --> x8\n    x4 --> x9\n    intersection --> x10\n    x9 --> x10\n    size --> x11\n    x10 --> x11\n    x8 --> x11\n    x5 --> x12\n    x11 --> x12\n    x12 --> x13\n    x1 --> x13\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ce602527(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(toindices, x7, normalize)\n    x9 = x6(x4)\n    x10 = rbind(intersection, x9)\n    x11 = chain(size, x10, x8)\n    x12 = argmax(x5, x11)\n    x13 = subgrid(x12, x1)\n    O = vmirror(x13)\n    return O", "line_count": 16}
{"name": "5c2c9af4", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[center]\n    x4[ulcorner]\n    x5[subtract]\n    x6[multiply]\n    x7[interval]\n    x8[interval]\n    x9[lbind]\n    x10[apply]\n    x11[apply]\n    x12[pair]\n    x13[mapply]\n    x14[shift]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x5\n    x4 --> x5\n    NEG_ONE --> x6\n    NINE --> x6\n    ZERO --> x7\n    NINE --> x7\n    ONE --> x7\n    ZERO --> x8\n    x6 --> x8\n    NEG_ONE --> x8\n    multiply --> x9\n    x5 --> x9\n    x9 --> x10\n    x7 --> x10\n    x9 --> x11\n    x8 --> x11\n    x10 --> x12\n    x11 --> x12\n    box --> x13\n    x12 --> x13\n    x13 --> x14\n    x3 --> x14\n    I --> O\n    x1 --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5c2c9af4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = center(x2)\n    x4 = ulcorner(x2)\n    x5 = subtract(x3, x4)\n    x6 = multiply(NEG_ONE, NINE)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = interval(ZERO, x6, NEG_ONE)\n    x9 = lbind(multiply, x5)\n    x10 = apply(x9, x7)\n    x11 = apply(x9, x8)\n    x12 = pair(x10, x11)\n    x13 = mapply(box, x12)\n    x14 = shift(x13, x3)\n    O = fill(I, x1, x14)\n    return O", "line_count": 17}
{"name": "75b8110e", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[tophalf]\n    x4[bottomhalf]\n    x5[tophalf]\n    x6[bottomhalf]\n    x7[rbind]\n    x8[fork]\n    x9[fork]\n    x10[x9]\n    x11[x9]\n    x12[x9]\n    x13[paint]\n    x14[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    x1 --> x4\n    x2 --> x5\n    x2 --> x6\n    ofcolor --> x7\n    ZERO --> x7\n    difference --> x8\n    asindices --> x8\n    x7 --> x8\n    toobject --> x9\n    x8 --> x9\n    identity --> x9\n    x5 --> x10\n    x4 --> x11\n    x6 --> x12\n    x3 --> x13\n    x12 --> x13\n    x13 --> x14\n    x11 --> x14\n    x14 --> O\n    x10 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_75b8110e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O", "line_count": 17}
{"name": "941d9a10", "graph": "graph TD\n    x1[shape]\n    x2[objects]\n    x3[colorfilter]\n    x4[apply]\n    x5[lbind]\n    x6[lbind]\n    x7[compose]\n    x8[decrement]\n    x9[astuple]\n    x10[x7]\n    x11[x7]\n    x12[x7]\n    x13[fill]\n    x14[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x2 --> x3\n    ZERO --> x3\n    toindices --> x4\n    x3 --> x4\n    lbind --> x5\n    contained --> x5\n    extract --> x6\n    x4 --> x6\n    x6 --> x7\n    x5 --> x7\n    x1 --> x8\n    FIVE --> x9\n    FIVE --> x9\n    ORIGIN --> x10\n    x8 --> x11\n    x9 --> x12\n    I --> x13\n    ONE --> x13\n    x10 --> x13\n    x13 --> x14\n    THREE --> x14\n    x11 --> x14\n    x14 --> O\n    TWO --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_941d9a10(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, ZERO)\n    x4 = apply(toindices, x3)\n    x5 = lbind(lbind, contained)\n    x6 = lbind(extract, x4)\n    x7 = compose(x6, x5)\n    x8 = decrement(x1)\n    x9 = astuple(FIVE, FIVE)\n    x10 = x7(ORIGIN)\n    x11 = x7(x8)\n    x12 = x7(x9)\n    x13 = fill(I, ONE, x10)\n    x14 = fill(x13, THREE, x11)\n    O = fill(x14, TWO, x12)\n    return O", "line_count": 17}
{"name": "c3f564a4", "graph": "graph TD\n    x1[asindices]\n    x2[dmirror]\n    x3[invert]\n    x4[papply]\n    x5[lbind]\n    x6[apply]\n    x7[ofcolor]\n    x8[difference]\n    x9[toobject]\n    x10[interval]\n    x11[interval]\n    x12[pair]\n    x13[lbind]\n    x14[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    NINE --> x3\n    pair --> x4\n    I --> x4\n    x2 --> x4\n    apply --> x5\n    maximum --> x5\n    x5 --> x6\n    x4 --> x6\n    x6 --> x7\n    ZERO --> x7\n    x1 --> x8\n    x7 --> x8\n    x8 --> x9\n    x6 --> x9\n    x3 --> x10\n    NINE --> x10\n    ONE --> x10\n    NINE --> x11\n    x3 --> x11\n    NEG_ONE --> x11\n    x10 --> x12\n    x11 --> x12\n    shift --> x13\n    x9 --> x13\n    x13 --> x14\n    x12 --> x14\n    x6 --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_c3f564a4(I):\n    x1 = asindices(I)\n    x2 = dmirror(I)\n    x3 = invert(NINE)\n    x4 = papply(pair, I, x2)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = ofcolor(x6, ZERO)\n    x8 = difference(x1, x7)\n    x9 = toobject(x8, x6)\n    x10 = interval(x3, NINE, ONE)\n    x11 = interval(NINE, x3, NEG_ONE)\n    x12 = pair(x10, x11)\n    x13 = lbind(shift, x9)\n    x14 = mapply(x13, x12)\n    O = paint(x6, x14)\n    return O", "line_count": 17}
{"name": "1a07d186", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[difference]\n    x4[apply]\n    x5[rbind]\n    x6[compose]\n    x7[sfilter]\n    x8[lbind]\n    x9[chain]\n    x10[fork]\n    x11[fork]\n    x12[mapply]\n    x13[merge]\n    x14[cover]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    color --> x4\n    x3 --> x4\n    contained --> x5\n    x4 --> x5\n    x5 --> x6\n    color --> x6\n    x2 --> x7\n    x6 --> x7\n    colorfilter --> x8\n    x3 --> x8\n    first --> x9\n    x8 --> x9\n    color --> x9\n    gravitate --> x10\n    identity --> x10\n    x9 --> x10\n    shift --> x11\n    identity --> x11\n    x10 --> x11\n    x11 --> x12\n    x7 --> x12\n    x2 --> x13\n    I --> x14\n    x13 --> x14\n    x14 --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1a07d186(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O", "line_count": 17}
{"name": "d687bc17", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[difference]\n    x4[apply]\n    x5[rbind]\n    x6[compose]\n    x7[sfilter]\n    x8[lbind]\n    x9[chain]\n    x10[fork]\n    x11[fork]\n    x12[merge]\n    x13[mapply]\n    x14[cover]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    color --> x4\n    x3 --> x4\n    contained --> x5\n    x4 --> x5\n    x5 --> x6\n    color --> x6\n    x2 --> x7\n    x6 --> x7\n    colorfilter --> x8\n    x3 --> x8\n    first --> x9\n    x8 --> x9\n    color --> x9\n    gravitate --> x10\n    identity --> x10\n    x9 --> x10\n    shift --> x11\n    identity --> x11\n    x10 --> x11\n    x2 --> x12\n    x11 --> x13\n    x7 --> x13\n    I --> x14\n    x12 --> x14\n    x14 --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d687bc17(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O", "line_count": 17}
{"name": "9af7a82c", "graph": "graph TD\n    x1[objects]\n    x2[order]\n    x3[valmax]\n    x4[rbind]\n    x5[lbind]\n    x6[compose]\n    x7[chain]\n    x8[fork]\n    x9[lbind]\n    x10[compose]\n    x11[fork]\n    x12[compose]\n    x13[apply]\n    x14[merge]\n    O[cmirror]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    size --> x2\n    x1 --> x3\n    size --> x3\n    astuple --> x4\n    ONE --> x4\n    subtract --> x5\n    x3 --> x5\n    x4 --> x6\n    size --> x6\n    x4 --> x7\n    x5 --> x7\n    size --> x7\n    canvas --> x8\n    color --> x8\n    x6 --> x8\n    canvas --> x9\n    ZERO --> x9\n    x9 --> x10\n    x7 --> x10\n    vconcat --> x11\n    x8 --> x11\n    x10 --> x11\n    cmirror --> x12\n    x11 --> x12\n    x12 --> x13\n    x2 --> x13\n    x13 --> x14\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9af7a82c(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O", "line_count": 17}
{"name": "6e19193c", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[rbind]\n    x4[compose]\n    x5[rbind]\n    x6[matcher]\n    x7[chain]\n    x8[rbind]\n    x9[chain]\n    x10[fork]\n    x11[fork]\n    x12[mapply]\n    x13[fill]\n    x14[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    toobject --> x3\n    I --> x3\n    first --> x4\n    delta --> x4\n    colorcount --> x5\n    x1 --> x5\n    x5 --> x6\n    TWO --> x6\n    x6 --> x7\n    x3 --> x7\n    dneighbors --> x7\n    sfilter --> x8\n    x7 --> x8\n    first --> x9\n    x8 --> x9\n    toindices --> x9\n    subtract --> x10\n    x4 --> x10\n    x9 --> x10\n    shoot --> x11\n    x4 --> x11\n    x10 --> x11\n    x11 --> x12\n    x2 --> x12\n    I --> x13\n    x1 --> x13\n    x12 --> x13\n    delta --> x14\n    x2 --> x14\n    x13 --> O\n    ZERO --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6e19193c(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(toobject, I)\n    x4 = compose(first, delta)\n    x5 = rbind(colorcount, x1)\n    x6 = matcher(x5, TWO)\n    x7 = chain(x6, x3, dneighbors)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(subtract, x4, x9)\n    x11 = fork(shoot, x4, x10)\n    x12 = mapply(x11, x2)\n    x13 = fill(I, x1, x12)\n    x14 = mapply(delta, x2)\n    O = fill(x13, ZERO, x14)\n    return O", "line_count": 17}
{"name": "ef135b50", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[product]\n    x4[power]\n    x5[compose]\n    x6[fork]\n    x7[sfilter]\n    x8[fork]\n    x9[mapply]\n    x10[intersection]\n    x11[fill]\n    x12[trim]\n    x13[asobject]\n    x14[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    ZERO --> x2\n    x1 --> x3\n    x1 --> x3\n    first --> x4\n    TWO --> x4\n    first --> x5\n    last --> x5\n    equality --> x6\n    x4 --> x6\n    x5 --> x6\n    x3 --> x7\n    x6 --> x7\n    connect --> x8\n    first --> x8\n    last --> x8\n    x8 --> x9\n    x7 --> x9\n    x9 --> x10\n    x2 --> x10\n    I --> x11\n    NINE --> x11\n    x10 --> x11\n    x11 --> x12\n    x12 --> x13\n    x13 --> x14\n    UNITY --> x14\n    I --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ef135b50(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, ZERO)\n    x3 = product(x1, x1)\n    x4 = power(first, TWO)\n    x5 = compose(first, last)\n    x6 = fork(equality, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = fork(connect, first, last)\n    x9 = mapply(x8, x7)\n    x10 = intersection(x9, x2)\n    x11 = fill(I, NINE, x10)\n    x12 = trim(x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    O = paint(I, x14)\n    return O", "line_count": 17}
{"name": "cbded52d", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[product]\n    x4[fork]\n    x5[fork]\n    x6[fork]\n    x7[sfilter]\n    x8[compose]\n    x9[compose]\n    x10[fork]\n    x11[chain]\n    x12[compose]\n    x13[fork]\n    x14[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x2 --> x3\n    x2 --> x3\n    vmatching --> x4\n    first --> x4\n    last --> x4\n    hmatching --> x5\n    first --> x5\n    last --> x5\n    either --> x6\n    x4 --> x6\n    x5 --> x6\n    x3 --> x7\n    x6 --> x7\n    center --> x8\n    first --> x8\n    center --> x9\n    last --> x9\n    connect --> x10\n    x8 --> x10\n    x9 --> x10\n    initset --> x11\n    center --> x11\n    x10 --> x11\n    color --> x12\n    first --> x12\n    recolor --> x13\n    x12 --> x13\n    x11 --> x13\n    x13 --> x14\n    x7 --> x14\n    I --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_cbded52d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O", "line_count": 17}
{"name": "8a004b2b", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[subgrid]\n    x4[argmax]\n    x5[normalize]\n    x6[replace]\n    x7[objects]\n    x8[merge]\n    x9[width]\n    x10[ulcorner]\n    x11[width]\n    x12[divide]\n    x13[upscale]\n    x14[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    FOUR --> x2\n    x2 --> x3\n    I --> x3\n    x1 --> x4\n    lowermost --> x4\n    x4 --> x5\n    x3 --> x6\n    FOUR --> x6\n    ZERO --> x6\n    x6 --> x7\n    T --> x7\n    F --> x7\n    T --> x7\n    x7 --> x8\n    x8 --> x9\n    x8 --> x10\n    x4 --> x11\n    x9 --> x12\n    x11 --> x12\n    x5 --> x13\n    x12 --> x13\n    x13 --> x14\n    x10 --> x14\n    x3 --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8a004b2b(I):\n    x1 = objects(I, F, T, T)\n    x2 = ofcolor(I, FOUR)\n    x3 = subgrid(x2, I)\n    x4 = argmax(x1, lowermost)\n    x5 = normalize(x4)\n    x6 = replace(x3, FOUR, ZERO)\n    x7 = objects(x6, T, F, T)\n    x8 = merge(x7)\n    x9 = width(x8)\n    x10 = ulcorner(x8)\n    x11 = width(x4)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = shift(x13, x10)\n    O = paint(x3, x14)\n    return O", "line_count": 17}
{"name": "e26a3af2", "graph": "graph TD\n    x1[rot90]\n    x2[apply]\n    x3[apply]\n    x4[repeat]\n    x5[repeat]\n    x6[compose]\n    x7[x6]\n    x8[x6]\n    x9[greater]\n    x10[branch]\n    x11[x10]\n    x12[rot90]\n    x13[branch]\n    x14[branch]\n    O[x14]\n    I[I]\n    I --> x1\n    mostcommon --> x2\n    I --> x2\n    mostcommon --> x3\n    x1 --> x3\n    x2 --> x4\n    ONE --> x4\n    x3 --> x5\n    ONE --> x5\n    size --> x6\n    dedupe --> x6\n    x2 --> x7\n    x3 --> x8\n    x8 --> x9\n    x7 --> x9\n    x9 --> x10\n    height --> x10\n    width --> x10\n    I --> x11\n    x4 --> x12\n    x9 --> x13\n    x5 --> x13\n    x12 --> x13\n    x9 --> x14\n    vupscale --> x14\n    hupscale --> x14\n    x13 --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e26a3af2(I):\n    x1 = rot90(I)\n    x2 = apply(mostcommon, I)\n    x3 = apply(mostcommon, x1)\n    x4 = repeat(x2, ONE)\n    x5 = repeat(x3, ONE)\n    x6 = compose(size, dedupe)\n    x7 = x6(x2)\n    x8 = x6(x3)\n    x9 = greater(x8, x7)\n    x10 = branch(x9, height, width)\n    x11 = x10(I)\n    x12 = rot90(x4)\n    x13 = branch(x9, x5, x12)\n    x14 = branch(x9, vupscale, hupscale)\n    O = x14(x13, x11)\n    return O", "line_count": 17}
{"name": "6cf79266", "graph": "graph TD\n    x1[ofcolor]\n    x2[astuple]\n    x3[initset]\n    x4[upscale]\n    x5[toindices]\n    x6[lbind]\n    x7[rbind]\n    x8[chain]\n    x9[matcher]\n    x10[lbind]\n    x11[chain]\n    x12[fork]\n    x13[sfilter]\n    x14[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    ZERO --> x1\n    ZERO --> x2\n    ORIGIN --> x2\n    x2 --> x3\n    x3 --> x4\n    THREE --> x4\n    x4 --> x5\n    shift --> x6\n    x5 --> x6\n    difference --> x7\n    x1 --> x7\n    size --> x8\n    x7 --> x8\n    x6 --> x8\n    x8 --> x9\n    ZERO --> x9\n    add --> x10\n    NEG_UNITY --> x10\n    flip --> x11\n    x9 --> x11\n    x10 --> x11\n    both --> x12\n    x9 --> x12\n    x11 --> x12\n    x1 --> x13\n    x12 --> x13\n    x6 --> x14\n    x13 --> x14\n    I --> O\n    ONE --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6cf79266(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = astuple(ZERO, ORIGIN)\n    x3 = initset(x2)\n    x4 = upscale(x3, THREE)\n    x5 = toindices(x4)\n    x6 = lbind(shift, x5)\n    x7 = rbind(difference, x1)\n    x8 = chain(size, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = lbind(add, NEG_UNITY)\n    x11 = chain(flip, x9, x10)\n    x12 = fork(both, x9, x11)\n    x13 = sfilter(x1, x12)\n    x14 = mapply(x6, x13)\n    O = fill(I, ONE, x14)\n    return O", "line_count": 17}
{"name": "a87f7484", "graph": "graph TD\n    x1[numcolors]\n    x2[dmirror]\n    x3[portrait]\n    m4[branch]\n    x5[m4]\n    x6[decrement]\n    x7[hsplit]\n    x8[rbind]\n    x9[apply]\n    x10[leastcommon]\n    x11[matcher]\n    x12[extract]\n    O[m4]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x3 --> m4\n    dmirror --> m4\n    identity --> m4\n    I --> x5\n    x1 --> x6\n    x5 --> x7\n    x6 --> x7\n    ofcolor --> x8\n    ZERO --> x8\n    x8 --> x9\n    x7 --> x9\n    x9 --> x10\n    x8 --> x11\n    x10 --> x11\n    x7 --> x12\n    x11 --> x12\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a87f7484(I):\n    x1 = numcolors(I)\n    x2 = dmirror(I)\n    x3 = portrait(I)\n    m4 = branch(x3, dmirror, identity)\n    x5 = m4(I)\n    x6 = decrement(x1)\n    x7 = hsplit(x5, x6)\n    x8 = rbind(ofcolor, ZERO)\n    x9 = apply(x8, x7)\n    x10 = leastcommon(x9)\n    x11 = matcher(x8, x10)\n    x12 = extract(x7, x11)\n    O = m4(x12)\n    return O", "line_count": 15}
{"name": "4093f84a", "graph": "graph TD\n    x1[leastcolor]\n    x2[replace]\n    x3[ofcolor]\n    x4[portrait]\n    m5[branch]\n    x6[m5]\n    x7[lefthalf]\n    x8[righthalf]\n    x9[rbind]\n    x10[rbind]\n    x11[apply]\n    x12[apply]\n    x13[hconcat]\n    O[m5]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    FIVE --> x2\n    I --> x3\n    FIVE --> x3\n    x3 --> x4\n    x4 --> m5\n    identity --> m5\n    dmirror --> m5\n    x2 --> x6\n    x6 --> x7\n    x6 --> x8\n    order --> x9\n    identity --> x9\n    order --> x10\n    invert --> x10\n    x9 --> x11\n    x7 --> x11\n    x10 --> x12\n    x8 --> x12\n    x11 --> x13\n    x12 --> x13\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4093f84a(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, x1, FIVE)\n    x3 = ofcolor(I, FIVE)\n    x4 = portrait(x3)\n    m5 = branch(x4, identity, dmirror)\n    x6 = m5(x2)\n    x7 = lefthalf(x6)\n    x8 = righthalf(x6)\n    x9 = rbind(order, identity)\n    x10 = rbind(order, invert)\n    x11 = apply(x9, x7)\n    x12 = apply(x10, x8)\n    x13 = hconcat(x11, x12)\n    O = m5(x13)\n    return O", "line_count": 16}
{"name": "ba26e723", "graph": "graph TD\n    x1[rbind]\n    x2[rbind]\n    x3[compose]\n    x4[fork]\n    x5[compose]\n    x6[ofcolor]\n    x7[sfilter]\n    O[fill]\n    I[I]\n    divide --> x1\n    THREE --> x1\n    multiply --> x2\n    THREE --> x2\n    x2 --> x3\n    x1 --> x3\n    equality --> x4\n    identity --> x4\n    x3 --> x4\n    x4 --> x5\n    last --> x5\n    I --> x6\n    FOUR --> x6\n    x6 --> x7\n    x5 --> x7\n    I --> O\n    SIX --> O\n    x7 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ba26e723(I):\n    x1 = rbind(divide, THREE)\n    x2 = rbind(multiply, THREE)\n    x3 = compose(x2, x1)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(x4, last)\n    x6 = ofcolor(I, FOUR)\n    x7 = sfilter(x6, x5)\n    O = fill(I, SIX, x7)\n    return O", "line_count": 10}
{"name": "4612dd53", "graph": "graph TD\n    x1[ofcolor]\n    x2[box]\n    x3[fill]\n    x4[subgrid]\n    x5[ofcolor]\n    x6[mapply]\n    x7[mapply]\n    x8[size]\n    x9[size]\n    x10[greater]\n    x11[branch]\n    x12[fill]\n    x13[ofcolor]\n    x14[ulcorner]\n    x15[shift]\n    O[underfill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    x1 --> x2\n    I --> x3\n    TWO --> x3\n    x2 --> x3\n    x1 --> x4\n    x3 --> x4\n    x4 --> x5\n    ONE --> x5\n    vfrontier --> x6\n    x5 --> x6\n    hfrontier --> x7\n    x5 --> x7\n    x6 --> x8\n    x7 --> x9\n    x8 --> x10\n    x9 --> x10\n    x10 --> x11\n    x7 --> x11\n    x6 --> x11\n    x4 --> x12\n    TWO --> x12\n    x11 --> x12\n    x12 --> x13\n    TWO --> x13\n    x1 --> x14\n    x13 --> x15\n    x14 --> x15\n    I --> O\n    TWO --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4612dd53(I):\n    x1 = ofcolor(I, ONE)\n    x2 = box(x1)\n    x3 = fill(I, TWO, x2)\n    x4 = subgrid(x1, x3)\n    x5 = ofcolor(x4, ONE)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = size(x6)\n    x9 = size(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, x7, x6)\n    x12 = fill(x4, TWO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = ulcorner(x1)\n    x15 = shift(x13, x14)\n    O = underfill(I, TWO, x15)\n    return O", "line_count": 18}
{"name": "29c11459", "graph": "graph TD\n    x1[lefthalf]\n    x2[righthalf]\n    x3[objects]\n    x4[objects]\n    x5[compose]\n    x6[fork]\n    x7[mapply]\n    x8[paint]\n    x9[mapply]\n    x10[paint]\n    x11[objects]\n    x12[apply]\n    x13[shift]\n    x14[merge]\n    x15[paint]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    T --> x3\n    F --> x3\n    T --> x3\n    x1 --> x4\n    T --> x4\n    F --> x4\n    T --> x4\n    hfrontier --> x5\n    center --> x5\n    recolor --> x6\n    color --> x6\n    x5 --> x6\n    x6 --> x7\n    x4 --> x7\n    x1 --> x8\n    x7 --> x8\n    x6 --> x9\n    x3 --> x9\n    I --> x10\n    x9 --> x10\n    x8 --> x11\n    T --> x11\n    F --> x11\n    T --> x11\n    urcorner --> x12\n    x11 --> x12\n    x12 --> x13\n    RIGHT --> x13\n    x11 --> x14\n    x10 --> x15\n    x14 --> x15\n    x15 --> O\n    FIVE --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_29c11459(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, T)\n    x4 = objects(x1, T, F, T)\n    x5 = compose(hfrontier, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x4)\n    x8 = paint(x1, x7)\n    x9 = mapply(x6, x3)\n    x10 = paint(I, x9)\n    x11 = objects(x8, T, F, T)\n    x12 = apply(urcorner, x11)\n    x13 = shift(x12, RIGHT)\n    x14 = merge(x11)\n    x15 = paint(x10, x14)\n    O = fill(x15, FIVE, x13)\n    return O", "line_count": 18}
{"name": "963e52fc", "graph": "graph TD\n    x1[width]\n    x2[asobject]\n    x3[hperiod]\n    x4[height]\n    x5[astuple]\n    x6[ulcorner]\n    x7[crop]\n    x8[rot90]\n    x9[double]\n    x10[divide]\n    x11[increment]\n    x12[repeat]\n    x13[merge]\n    x14[rot270]\n    x15[astuple]\n    O[crop]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    x2 --> x4\n    x4 --> x5\n    x3 --> x5\n    x2 --> x6\n    I --> x7\n    x6 --> x7\n    x5 --> x7\n    x7 --> x8\n    x1 --> x9\n    x9 --> x10\n    x3 --> x10\n    x10 --> x11\n    x8 --> x12\n    x11 --> x12\n    x12 --> x13\n    x13 --> x14\n    x4 --> x15\n    x9 --> x15\n    x14 --> O\n    ORIGIN --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_963e52fc(I):\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = merge(x12)\n    x14 = rot270(x13)\n    x15 = astuple(x4, x9)\n    O = crop(x14, ORIGIN, x15)\n    return O", "line_count": 18}
{"name": "ae3edfdc", "graph": "graph TD\n    x1[objects]\n    x2[replace]\n    x3[replace]\n    x4[lbind]\n    x5[lbind]\n    x6[chain]\n    x7[x6]\n    x8[x6]\n    x9[x4]\n    x10[x4]\n    x11[fork]\n    x12[fork]\n    x13[mapply]\n    x14[mapply]\n    x15[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    THREE --> x2\n    ZERO --> x2\n    x2 --> x3\n    SEVEN --> x3\n    ZERO --> x3\n    colorfilter --> x4\n    x1 --> x4\n    rbind --> x5\n    gravitate --> x5\n    x5 --> x6\n    first --> x6\n    x4 --> x6\n    TWO --> x7\n    ONE --> x8\n    THREE --> x9\n    SEVEN --> x10\n    shift --> x11\n    identity --> x11\n    x7 --> x11\n    shift --> x12\n    identity --> x12\n    x8 --> x12\n    x11 --> x13\n    x9 --> x13\n    x12 --> x14\n    x10 --> x14\n    x3 --> x15\n    x13 --> x15\n    x15 --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ae3edfdc(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, THREE, ZERO)\n    x3 = replace(x2, SEVEN, ZERO)\n    x4 = lbind(colorfilter, x1)\n    x5 = lbind(rbind, gravitate)\n    x6 = chain(x5, first, x4)\n    x7 = x6(TWO)\n    x8 = x6(ONE)\n    x9 = x4(THREE)\n    x10 = x4(SEVEN)\n    x11 = fork(shift, identity, x7)\n    x12 = fork(shift, identity, x8)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = paint(x3, x13)\n    O = paint(x15, x14)\n    return O", "line_count": 18}
{"name": "1f0c79e5", "graph": "graph TD\n    x1[ofcolor]\n    x2[replace]\n    x3[leastcolor]\n    x4[ofcolor]\n    x5[combine]\n    x6[recolor]\n    x7[compose]\n    x8[ulcorner]\n    x9[invert]\n    x10[shift]\n    x11[apply]\n    x12[interval]\n    x13[prapply]\n    x14[lbind]\n    x15[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    TWO --> x2\n    ZERO --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x4\n    x1 --> x5\n    x4 --> x5\n    x3 --> x6\n    x5 --> x6\n    decrement --> x7\n    double --> x7\n    x5 --> x8\n    x8 --> x9\n    x1 --> x10\n    x9 --> x10\n    x7 --> x11\n    x10 --> x11\n    ZERO --> x12\n    NINE --> x12\n    ONE --> x12\n    multiply --> x13\n    x11 --> x13\n    x12 --> x13\n    shift --> x14\n    x6 --> x14\n    x14 --> x15\n    x13 --> x15\n    I --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1f0c79e5(I):\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, TWO, ZERO)\n    x3 = leastcolor(x2)\n    x4 = ofcolor(x2, x3)\n    x5 = combine(x1, x4)\n    x6 = recolor(x3, x5)\n    x7 = compose(decrement, double)\n    x8 = ulcorner(x5)\n    x9 = invert(x8)\n    x10 = shift(x1, x9)\n    x11 = apply(x7, x10)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = prapply(multiply, x11, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    O = paint(I, x15)\n    return O", "line_count": 18}
{"name": "56dc2b01", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[first]\n    x4[ofcolor]\n    x5[gravitate]\n    x6[first]\n    x7[equality]\n    x8[branch]\n    x9[x8]\n    x10[gravitate]\n    x11[sign]\n    x12[multiply]\n    x13[crement]\n    x14[recolor]\n    x15[shift]\n    x16[paint]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    THREE --> x2\n    x2 --> x3\n    I --> x4\n    TWO --> x4\n    x3 --> x5\n    x4 --> x5\n    x5 --> x6\n    x6 --> x7\n    ZERO --> x7\n    x7 --> x8\n    width --> x8\n    height --> x8\n    x3 --> x9\n    x4 --> x10\n    x3 --> x10\n    x10 --> x11\n    x11 --> x12\n    x9 --> x12\n    x12 --> x13\n    EIGHT --> x14\n    x4 --> x14\n    x14 --> x15\n    x13 --> x15\n    I --> x16\n    x15 --> x16\n    x16 --> O\n    x3 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_56dc2b01(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, TWO)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O", "line_count": 19}
{"name": "e48d4e1a", "graph": "graph TD\n    x1[shape]\n    x2[ofcolor]\n    x3[fill]\n    x4[leastcolor]\n    x5[size]\n    x6[ofcolor]\n    x7[rbind]\n    x8[rbind]\n    x9[chain]\n    x10[matcher]\n    x11[extract]\n    x12[multiply]\n    x13[add]\n    x14[canvas]\n    x15[fork]\n    x16[x15]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    FIVE --> x2\n    I --> x3\n    ZERO --> x3\n    x2 --> x3\n    x3 --> x4\n    x2 --> x5\n    I --> x6\n    x4 --> x6\n    toobject --> x7\n    I --> x7\n    colorcount --> x8\n    x4 --> x8\n    x8 --> x9\n    x7 --> x9\n    dneighbors --> x9\n    x9 --> x10\n    FOUR --> x10\n    x6 --> x11\n    x10 --> x11\n    DOWN_LEFT --> x12\n    x5 --> x12\n    x12 --> x13\n    x11 --> x13\n    ZERO --> x14\n    x1 --> x14\n    combine --> x15\n    vfrontier --> x15\n    hfrontier --> x15\n    x13 --> x16\n    x14 --> O\n    x4 --> O\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e48d4e1a(I):\n    x1 = shape(I)\n    x2 = ofcolor(I, FIVE)\n    x3 = fill(I, ZERO, x2)\n    x4 = leastcolor(x3)\n    x5 = size(x2)\n    x6 = ofcolor(I, x4)\n    x7 = rbind(toobject, I)\n    x8 = rbind(colorcount, x4)\n    x9 = chain(x8, x7, dneighbors)\n    x10 = matcher(x9, FOUR)\n    x11 = extract(x6, x10)\n    x12 = multiply(DOWN_LEFT, x5)\n    x13 = add(x12, x11)\n    x14 = canvas(ZERO, x1)\n    x15 = fork(combine, vfrontier, hfrontier)\n    x16 = x15(x13)\n    O = fill(x14, x4, x16)\n    return O", "line_count": 19}
{"name": "6773b310", "graph": "graph TD\n    x1[compress]\n    x2[neighbors]\n    x3[insert]\n    x4[rbind]\n    x5[apply]\n    x6[astuple]\n    x7[shift]\n    x8[fork]\n    x9[apply]\n    x10[rbind]\n    x11[apply]\n    x12[rbind]\n    x13[matcher]\n    x14[mfilter]\n    x15[fill]\n    x16[replace]\n    O[downscale]\n    I[I]\n    I --> x1\n    ORIGIN --> x2\n    ORIGIN --> x3\n    x2 --> x3\n    multiply --> x4\n    THREE --> x4\n    x4 --> x5\n    x3 --> x5\n    FOUR --> x6\n    FOUR --> x6\n    x5 --> x7\n    x6 --> x7\n    insert --> x8\n    identity --> x8\n    neighbors --> x8\n    x8 --> x9\n    x7 --> x9\n    toobject --> x10\n    x1 --> x10\n    x10 --> x11\n    x9 --> x11\n    colorcount --> x12\n    SIX --> x12\n    x12 --> x13\n    TWO --> x13\n    x11 --> x14\n    x13 --> x14\n    x1 --> x15\n    ONE --> x15\n    x14 --> x15\n    x15 --> x16\n    SIX --> x16\n    ZERO --> x16\n    x16 --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6773b310(I):\n    x1 = compress(I)\n    x2 = neighbors(ORIGIN)\n    x3 = insert(ORIGIN, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = astuple(FOUR, FOUR)\n    x7 = shift(x5, x6)\n    x8 = fork(insert, identity, neighbors)\n    x9 = apply(x8, x7)\n    x10 = rbind(toobject, x1)\n    x11 = apply(x10, x9)\n    x12 = rbind(colorcount, SIX)\n    x13 = matcher(x12, TWO)\n    x14 = mfilter(x11, x13)\n    x15 = fill(x1, ONE, x14)\n    x16 = replace(x15, SIX, ZERO)\n    O = downscale(x16, THREE)\n    return O", "line_count": 19}
{"name": "780d0b14", "graph": "graph TD\n    x1[asindices]\n    x2[objects]\n    x3[rbind]\n    x4[compose]\n    x5[sfilter]\n    x6[totuple]\n    x7[apply]\n    x8[apply]\n    x9[pair]\n    x10[fill]\n    x11[paint]\n    x12[rbind]\n    x13[compose]\n    x14[chain]\n    x15[sfilter]\n    x16[rot90]\n    x17[sfilter]\n    O[rot270]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    greater --> x3\n    TWO --> x3\n    x3 --> x4\n    size --> x4\n    x2 --> x5\n    x4 --> x5\n    x5 --> x6\n    color --> x7\n    x6 --> x7\n    center --> x8\n    x6 --> x8\n    x7 --> x9\n    x8 --> x9\n    I --> x10\n    ZERO --> x10\n    x1 --> x10\n    x10 --> x11\n    x9 --> x11\n    greater --> x12\n    ONE --> x12\n    dedupe --> x13\n    totuple --> x13\n    x12 --> x14\n    size --> x14\n    x13 --> x14\n    x11 --> x15\n    x14 --> x15\n    x15 --> x16\n    x16 --> x17\n    x14 --> x17\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_780d0b14(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O", "line_count": 20}
{"name": "2204b7a8", "graph": "graph TD\n    x1[objects]\n    x2[lbind]\n    x3[compose]\n    x4[x3]\n    x5[x3]\n    x6[greater]\n    x7[branch]\n    x8[branch]\n    x9[branch]\n    x10[x7]\n    x11[x8]\n    x12[index]\n    x13[shape]\n    x14[decrement]\n    x15[index]\n    x16[replace]\n    x17[replace]\n    O[x9]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    sfilter --> x2\n    x1 --> x2\n    size --> x3\n    x2 --> x3\n    vline --> x4\n    hline --> x5\n    x4 --> x6\n    x5 --> x6\n    x6 --> x7\n    lefthalf --> x7\n    tophalf --> x7\n    x6 --> x8\n    righthalf --> x8\n    bottomhalf --> x8\n    x6 --> x9\n    hconcat --> x9\n    vconcat --> x9\n    I --> x10\n    I --> x11\n    x10 --> x12\n    ORIGIN --> x12\n    x11 --> x13\n    x13 --> x14\n    x11 --> x15\n    x14 --> x15\n    x10 --> x16\n    THREE --> x16\n    x12 --> x16\n    x11 --> x17\n    THREE --> x17\n    x15 --> x17\n    x16 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2204b7a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O", "line_count": 20}
{"name": "d9f24cd1", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[prapply]\n    x4[mfilter]\n    x5[underfill]\n    x6[matcher]\n    x7[objects]\n    x8[sfilter]\n    x9[difference]\n    x10[colorfilter]\n    x11[mapply]\n    x12[apply]\n    x13[shift]\n    x14[rbind]\n    x15[mapply]\n    x16[fill]\n    x17[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    FIVE --> x2\n    connect --> x3\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    vline --> x4\n    I --> x5\n    TWO --> x5\n    x4 --> x5\n    numcolors --> x6\n    TWO --> x6\n    x5 --> x7\n    F --> x7\n    F --> x7\n    T --> x7\n    x7 --> x8\n    x6 --> x8\n    x7 --> x9\n    x8 --> x9\n    x9 --> x10\n    TWO --> x10\n    toindices --> x11\n    x10 --> x11\n    urcorner --> x12\n    x8 --> x12\n    x12 --> x13\n    UNITY --> x13\n    shoot --> x14\n    UP --> x14\n    x14 --> x15\n    x13 --> x15\n    x5 --> x16\n    TWO --> x16\n    x15 --> x16\n    vfrontier --> x17\n    x11 --> x17\n    x16 --> O\n    TWO --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d9f24cd1(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, FIVE)\n    x3 = prapply(connect, x1, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, TWO, x4)\n    x6 = matcher(numcolors, TWO)\n    x7 = objects(x5, F, F, T)\n    x8 = sfilter(x7, x6)\n    x9 = difference(x7, x8)\n    x10 = colorfilter(x9, TWO)\n    x11 = mapply(toindices, x10)\n    x12 = apply(urcorner, x8)\n    x13 = shift(x12, UNITY)\n    x14 = rbind(shoot, UP)\n    x15 = mapply(x14, x13)\n    x16 = fill(x5, TWO, x15)\n    x17 = mapply(vfrontier, x11)\n    O = fill(x16, TWO, x17)\n    return O", "line_count": 20}
{"name": "b782dc8a", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[ofcolor]\n    x4[first]\n    x5[dneighbors]\n    x6[toobject]\n    x7[mostcolor]\n    x8[ofcolor]\n    x9[colorfilter]\n    x10[rbind]\n    x11[mfilter]\n    x12[toindices]\n    x13[rbind]\n    x14[chain]\n    x15[sfilter]\n    x16[difference]\n    x17[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    I --> x3\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    I --> x6\n    x6 --> x7\n    I --> x8\n    x7 --> x8\n    x2 --> x9\n    ZERO --> x9\n    adjacent --> x10\n    x8 --> x10\n    x9 --> x11\n    x10 --> x11\n    x11 --> x12\n    manhattan --> x13\n    x3 --> x13\n    even --> x14\n    x13 --> x14\n    initset --> x14\n    x12 --> x15\n    x14 --> x15\n    x12 --> x16\n    x15 --> x16\n    I --> x17\n    x1 --> x17\n    x15 --> x17\n    x17 --> O\n    x7 --> O\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b782dc8a(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = ofcolor(I, x1)\n    x4 = first(x3)\n    x5 = dneighbors(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = ofcolor(I, x7)\n    x9 = colorfilter(x2, ZERO)\n    x10 = rbind(adjacent, x8)\n    x11 = mfilter(x9, x10)\n    x12 = toindices(x11)\n    x13 = rbind(manhattan, x3)\n    x14 = chain(even, x13, initset)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x12, x15)\n    x17 = fill(I, x1, x15)\n    O = fill(x17, x7, x16)\n    return O", "line_count": 20}
{"name": "673ef223", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[replace]\n    x4[colorfilter]\n    x5[argmin]\n    x6[apply]\n    x7[fork]\n    x8[x7]\n    x9[toivec]\n    x10[leftmost]\n    x11[equality]\n    x12[branch]\n    x13[rbind]\n    x14[mapply]\n    x15[underfill]\n    x16[shift]\n    x17[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    EIGHT --> x2\n    I --> x3\n    EIGHT --> x3\n    FOUR --> x3\n    x1 --> x4\n    TWO --> x4\n    x1 --> x5\n    uppermost --> x5\n    uppermost --> x6\n    x4 --> x6\n    subtract --> x7\n    maximum --> x7\n    minimum --> x7\n    x6 --> x8\n    x8 --> x9\n    x5 --> x10\n    x10 --> x11\n    ZERO --> x11\n    x11 --> x12\n    LEFT --> x12\n    RIGHT --> x12\n    shoot --> x13\n    x12 --> x13\n    x13 --> x14\n    x2 --> x14\n    x3 --> x15\n    EIGHT --> x15\n    x14 --> x15\n    x2 --> x16\n    x9 --> x16\n    hfrontier --> x17\n    x16 --> x17\n    x15 --> O\n    EIGHT --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_673ef223(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, EIGHT)\n    x3 = replace(I, EIGHT, FOUR)\n    x4 = colorfilter(x1, TWO)\n    x5 = argmin(x1, uppermost)\n    x6 = apply(uppermost, x4)\n    x7 = fork(subtract, maximum, minimum)\n    x8 = x7(x6)\n    x9 = toivec(x8)\n    x10 = leftmost(x5)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, LEFT, RIGHT)\n    x13 = rbind(shoot, x12)\n    x14 = mapply(x13, x2)\n    x15 = underfill(x3, EIGHT, x14)\n    x16 = shift(x2, x9)\n    x17 = mapply(hfrontier, x16)\n    O = underfill(x15, EIGHT, x17)\n    return O", "line_count": 20}
{"name": "f5b8619d", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[mapply]\n    x4[underfill]\n    x5[hconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    vfrontier --> x3\n    x2 --> x3\n    I --> x4\n    EIGHT --> x4\n    x3 --> x4\n    x4 --> x5\n    x4 --> x5\n    x5 --> O\n    x5 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f5b8619d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O", "line_count": 8}
{"name": "f8c80d96", "graph": "graph TD\n    x1[leastcolor]\n    x2[objects]\n    x3[colorfilter]\n    x4[argmax]\n    x5[argmin]\n    x6[size]\n    x7[equality]\n    x8[branch]\n    x9[chain]\n    x10[power]\n    x11[power]\n    x12[x9]\n    x13[x10]\n    x14[x11]\n    x15[fill]\n    x16[fill]\n    x17[fill]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    F --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    size --> x4\n    x2 --> x5\n    width --> x5\n    x5 --> x6\n    x6 --> x7\n    ONE --> x7\n    x7 --> x8\n    identity --> x8\n    outbox --> x8\n    outbox --> x9\n    outbox --> x9\n    x8 --> x9\n    x9 --> x10\n    TWO --> x10\n    x9 --> x11\n    THREE --> x11\n    x4 --> x12\n    x4 --> x13\n    x4 --> x14\n    I --> x15\n    x1 --> x15\n    x12 --> x15\n    x15 --> x16\n    x1 --> x16\n    x13 --> x16\n    x16 --> x17\n    x1 --> x17\n    x14 --> x17\n    x17 --> O\n    ZERO --> O\n    FIVE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f8c80d96(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = argmax(x3, size)\n    x5 = argmin(x2, width)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = branch(x7, identity, outbox)\n    x9 = chain(outbox, outbox, x8)\n    x10 = power(x9, TWO)\n    x11 = power(x9, THREE)\n    x12 = x9(x4)\n    x13 = x10(x4)\n    x14 = x11(x4)\n    x15 = fill(I, x1, x12)\n    x16 = fill(x15, x1, x13)\n    x17 = fill(x16, x1, x14)\n    O = replace(x17, ZERO, FIVE)\n    return O", "line_count": 20}
{"name": "ecdecbb3", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[colorfilter]\n    x4[product]\n    x5[fork]\n    x6[compose]\n    x7[compose]\n    x8[fork]\n    x9[fork]\n    x10[apply]\n    x11[lbind]\n    x12[compose]\n    x13[mfilter]\n    x14[fill]\n    x15[apply]\n    x16[intersection]\n    x17[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    TWO --> x2\n    x1 --> x3\n    EIGHT --> x3\n    x2 --> x4\n    x3 --> x4\n    gravitate --> x5\n    first --> x5\n    last --> x5\n    crement --> x6\n    x5 --> x6\n    center --> x7\n    first --> x7\n    add --> x8\n    x7 --> x8\n    x6 --> x8\n    connect --> x9\n    x7 --> x9\n    x8 --> x9\n    x9 --> x10\n    x4 --> x10\n    greater --> x11\n    EIGHT --> x11\n    x11 --> x12\n    size --> x12\n    x10 --> x13\n    x12 --> x13\n    I --> x14\n    TWO --> x14\n    x13 --> x14\n    x8 --> x15\n    x4 --> x15\n    x13 --> x16\n    x15 --> x16\n    neighbors --> x17\n    x16 --> x17\n    x14 --> O\n    EIGHT --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ecdecbb3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O", "line_count": 20}
{"name": "e5062a87", "graph": "graph TD\n    x1[ofcolor]\n    x2[recolor]\n    x3[normalize]\n    x4[occurrences]\n    x5[lbind]\n    x6[apply]\n    x7[astuple]\n    x8[astuple]\n    x9[astuple]\n    x10[initset]\n    x11[insert]\n    x12[insert]\n    x13[rbind]\n    x14[chain]\n    x15[sfilter]\n    x16[merge]\n    x17[recolor]\n    O[paint]\n    I[I]\n    I --> x1\n    TWO --> x1\n    ZERO --> x2\n    x1 --> x2\n    x2 --> x3\n    I --> x4\n    x2 --> x4\n    shift --> x5\n    x3 --> x5\n    x5 --> x6\n    x4 --> x6\n    ONE --> x7\n    THREE --> x7\n    FIVE --> x8\n    ONE --> x8\n    TWO --> x9\n    SIX --> x9\n    x7 --> x10\n    x8 --> x11\n    x10 --> x11\n    x9 --> x12\n    x11 --> x12\n    contained --> x13\n    x12 --> x13\n    flip --> x14\n    x13 --> x14\n    ulcorner --> x14\n    x6 --> x15\n    x14 --> x15\n    x15 --> x16\n    TWO --> x17\n    x16 --> x17\n    I --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e5062a87(I):\n    x1 = ofcolor(I, TWO)\n    x2 = recolor(ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(I, x2)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = recolor(TWO, x16)\n    O = paint(I, x17)\n    return O", "line_count": 20}
{"name": "a8d7556c", "graph": "graph TD\n    x1[initset]\n    x2[recolor]\n    x3[upscale]\n    x4[occurrences]\n    x5[lbind]\n    x6[mapply]\n    x7[fill]\n    x8[add]\n    x9[astuple]\n    x10[index]\n    x11[equality]\n    x12[initset]\n    x13[add]\n    x14[insert]\n    x15[toobject]\n    x16[toobject]\n    x17[branch]\n    O[paint]\n    I[I]\n    ORIGIN --> x1\n    ZERO --> x2\n    x1 --> x2\n    x2 --> x3\n    TWO --> x3\n    I --> x4\n    x3 --> x4\n    shift --> x5\n    x3 --> x5\n    x5 --> x6\n    x4 --> x6\n    I --> x7\n    TWO --> x7\n    x6 --> x7\n    SIX --> x8\n    SIX --> x8\n    EIGHT --> x9\n    x8 --> x9\n    x7 --> x10\n    x9 --> x10\n    x10 --> x11\n    TWO --> x11\n    x9 --> x12\n    x9 --> x13\n    DOWN --> x13\n    x13 --> x14\n    x12 --> x14\n    x14 --> x15\n    x7 --> x15\n    x14 --> x16\n    I --> x16\n    x11 --> x17\n    x16 --> x17\n    x15 --> x17\n    x7 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a8d7556c(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    x7 = fill(I, TWO, x6)\n    x8 = add(SIX, SIX)\n    x9 = astuple(EIGHT, x8)\n    x10 = index(x7, x9)\n    x11 = equality(x10, TWO)\n    x12 = initset(x9)\n    x13 = add(x9, DOWN)\n    x14 = insert(x13, x12)\n    x15 = toobject(x14, x7)\n    x16 = toobject(x14, I)\n    x17 = branch(x11, x16, x15)\n    O = paint(x7, x17)\n    return O", "line_count": 20}
{"name": "4938f0c2", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[vmirror]\n    x4[height]\n    x5[width]\n    x6[toivec]\n    x7[tojvec]\n    x8[add]\n    x9[add]\n    x10[shift]\n    x11[fill]\n    x12[ofcolor]\n    x13[hmirror]\n    x14[shift]\n    x15[fill]\n    x16[size]\n    x17[greater]\n    O[branch]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    TWO --> x2\n    x2 --> x3\n    x2 --> x4\n    x2 --> x5\n    x4 --> x6\n    x5 --> x7\n    x7 --> x8\n    ZERO_BY_TWO --> x8\n    x6 --> x9\n    TWO_BY_ZERO --> x9\n    x3 --> x10\n    x8 --> x10\n    I --> x11\n    TWO --> x11\n    x10 --> x11\n    x11 --> x12\n    TWO --> x12\n    x12 --> x13\n    x13 --> x14\n    x9 --> x14\n    x11 --> x15\n    TWO --> x15\n    x14 --> x15\n    x1 --> x16\n    x16 --> x17\n    FOUR --> x17\n    x17 --> O\n    I --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4938f0c2(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, TWO)\n    x3 = vmirror(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, ZERO_BY_TWO)\n    x9 = add(x6, TWO_BY_ZERO)\n    x10 = shift(x3, x8)\n    x11 = fill(I, TWO, x10)\n    x12 = ofcolor(x11, TWO)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x9)\n    x15 = fill(x11, TWO, x14)\n    x16 = size(x1)\n    x17 = greater(x16, FOUR)\n    O = branch(x17, I, x15)\n    return O", "line_count": 20}
{"name": "834ec97d", "graph": "graph TD\n    x1[asindices]\n    x2[objects]\n    x3[first]\n    x4[shift]\n    x5[fill]\n    x6[paint]\n    x7[uppermost]\n    x8[leftmost]\n    x9[subtract]\n    x10[add]\n    x11[interval]\n    x12[lbind]\n    x13[compose]\n    x14[rbind]\n    x15[compose]\n    x16[sfilter]\n    x17[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    x3 --> x4\n    DOWN --> x4\n    I --> x5\n    ZERO --> x5\n    x3 --> x5\n    x5 --> x6\n    x4 --> x6\n    x4 --> x7\n    x4 --> x8\n    x8 --> x9\n    TEN --> x9\n    x8 --> x10\n    TEN --> x10\n    x9 --> x11\n    x10 --> x11\n    TWO --> x11\n    greater --> x12\n    x7 --> x12\n    x12 --> x13\n    first --> x13\n    contained --> x14\n    x11 --> x14\n    x14 --> x15\n    last --> x15\n    x1 --> x16\n    x13 --> x16\n    x16 --> x17\n    x15 --> x17\n    x6 --> O\n    FOUR --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_834ec97d(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, ZERO, x3)\n    x6 = paint(x5, x4)\n    x7 = uppermost(x4)\n    x8 = leftmost(x4)\n    x9 = subtract(x8, TEN)\n    x10 = add(x8, TEN)\n    x11 = interval(x9, x10, TWO)\n    x12 = lbind(greater, x7)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, last)\n    x16 = sfilter(x1, x13)\n    x17 = sfilter(x16, x15)\n    O = fill(x6, FOUR, x17)\n    return O", "line_count": 20}
{"name": "846bdb03", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[matcher]\n    x4[extract]\n    x5[remove]\n    x6[merge]\n    x7[subgrid]\n    x8[index]\n    x9[subgrid]\n    x10[lefthalf]\n    x11[palette]\n    x12[other]\n    x13[equality]\n    x14[branch]\n    x15[x14]\n    x16[normalize]\n    x17[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    colorcount --> x2\n    FOUR --> x2\n    x2 --> x3\n    ZERO --> x3\n    x1 --> x4\n    x3 --> x4\n    x4 --> x5\n    x1 --> x5\n    x5 --> x6\n    x6 --> x7\n    I --> x7\n    x7 --> x8\n    DOWN --> x8\n    x4 --> x9\n    I --> x9\n    x9 --> x10\n    x10 --> x11\n    x11 --> x12\n    ZERO --> x12\n    x8 --> x13\n    x12 --> x13\n    x13 --> x14\n    identity --> x14\n    vmirror --> x14\n    x4 --> x15\n    x15 --> x16\n    x16 --> x17\n    UNITY --> x17\n    x7 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_846bdb03(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(colorcount, FOUR)\n    x3 = matcher(x2, ZERO)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x4, I)\n    x10 = lefthalf(x9)\n    x11 = palette(x10)\n    x12 = other(x11, ZERO)\n    x13 = equality(x8, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(x4)\n    x16 = normalize(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(x7, x17)\n    return O", "line_count": 20}
{"name": "90f3ed37", "graph": "graph TD\n    x1[objects]\n    x2[order]\n    x3[first]\n    x4[remove]\n    x5[normalize]\n    x6[lbind]\n    x7[compose]\n    x8[interval]\n    x9[apply]\n    x10[rbind]\n    x11[lbind]\n    x12[lbind]\n    x13[compose]\n    x14[lbind]\n    x15[chain]\n    x16[fork]\n    x17[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    uppermost --> x2\n    x2 --> x3\n    x3 --> x4\n    x2 --> x4\n    x3 --> x5\n    shift --> x6\n    x5 --> x6\n    x6 --> x7\n    ulcorner --> x7\n    TWO --> x8\n    NEG_ONE --> x8\n    NEG_ONE --> x8\n    tojvec --> x9\n    x8 --> x9\n    apply --> x10\n    x9 --> x10\n    compose --> x11\n    size --> x11\n    lbind --> x12\n    intersection --> x12\n    x11 --> x13\n    x12 --> x13\n    lbind --> x14\n    shift --> x14\n    x10 --> x15\n    x14 --> x15\n    x7 --> x15\n    argmax --> x16\n    x15 --> x16\n    x13 --> x16\n    x16 --> x17\n    x4 --> x17\n    I --> O\n    ONE --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_90f3ed37(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O", "line_count": 20}
{"name": "8403a5d5", "graph": "graph TD\n    x1[asindices]\n    x2[objects]\n    x3[first]\n    x4[color]\n    x5[leftmost]\n    x6[interval]\n    x7[rbind]\n    x8[compose]\n    x9[sfilter]\n    x10[increment]\n    x11[add]\n    x12[interval]\n    x13[interval]\n    x14[lbind]\n    x15[apply]\n    x16[apply]\n    x17[fill]\n    x18[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x2 --> x3\n    x3 --> x4\n    x3 --> x5\n    x5 --> x6\n    TEN --> x6\n    TWO --> x6\n    contained --> x7\n    x6 --> x7\n    x7 --> x8\n    last --> x8\n    x1 --> x9\n    x8 --> x9\n    x5 --> x10\n    x5 --> x11\n    THREE --> x11\n    x10 --> x12\n    TEN --> x12\n    FOUR --> x12\n    x11 --> x13\n    TEN --> x13\n    FOUR --> x13\n    astuple --> x14\n    NINE --> x14\n    tojvec --> x15\n    x12 --> x15\n    x14 --> x16\n    x13 --> x16\n    I --> x17\n    x4 --> x17\n    x9 --> x17\n    x17 --> x18\n    FIVE --> x18\n    x15 --> x18\n    x18 --> O\n    FIVE --> O\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8403a5d5(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = interval(x11, TEN, FOUR)\n    x14 = lbind(astuple, NINE)\n    x15 = apply(tojvec, x12)\n    x16 = apply(x14, x13)\n    x17 = fill(I, x4, x9)\n    x18 = fill(x17, FIVE, x15)\n    O = fill(x18, FIVE, x16)\n    return O", "line_count": 21}
{"name": "91413438", "graph": "graph TD\n    x1[colorcount]\n    x2[subtract]\n    x3[multiply]\n    x4[multiply]\n    x5[subtract]\n    x6[astuple]\n    x7[canvas]\n    x8[hconcat]\n    x9[objects]\n    x10[first]\n    x11[lbind]\n    x12[compose]\n    x13[interval]\n    x14[rbind]\n    x15[apply]\n    x16[mapply]\n    x17[paint]\n    x18[hsplit]\n    O[merge]\n    I[I]\n    I --> x1\n    ZERO --> x1\n    NINE --> x2\n    x1 --> x2\n    x1 --> x3\n    THREE --> x3\n    x3 --> x4\n    x1 --> x4\n    x4 --> x5\n    THREE --> x5\n    THREE --> x6\n    x5 --> x6\n    ZERO --> x7\n    x6 --> x7\n    I --> x8\n    x7 --> x8\n    x8 --> x9\n    T --> x9\n    T --> x9\n    T --> x9\n    x9 --> x10\n    shift --> x11\n    x10 --> x11\n    x11 --> x12\n    tojvec --> x12\n    ZERO --> x13\n    x2 --> x13\n    ONE --> x13\n    multiply --> x14\n    THREE --> x14\n    x14 --> x15\n    x13 --> x15\n    x12 --> x16\n    x15 --> x16\n    x8 --> x17\n    x16 --> x17\n    x17 --> x18\n    x1 --> x18\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_91413438(I):\n    x1 = colorcount(I, ZERO)\n    x2 = subtract(NINE, x1)\n    x3 = multiply(x1, THREE)\n    x4 = multiply(x3, x1)\n    x5 = subtract(x4, THREE)\n    x6 = astuple(THREE, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, T, T, T)\n    x10 = first(x9)\n    x11 = lbind(shift, x10)\n    x12 = compose(x11, tojvec)\n    x13 = interval(ZERO, x2, ONE)\n    x14 = rbind(multiply, THREE)\n    x15 = apply(x14, x13)\n    x16 = mapply(x12, x15)\n    x17 = paint(x8, x16)\n    x18 = hsplit(x17, x1)\n    O = merge(x18)\n    return O", "line_count": 21}
{"name": "539a4f51", "graph": "graph TD\n    x1[shape]\n    x2[index]\n    x3[colorcount]\n    x4[decrement]\n    x5[positive]\n    x6[branch]\n    x7[crop]\n    x8[width]\n    x9[astuple]\n    x10[crop]\n    x11[vupscale]\n    x12[dmirror]\n    x13[hconcat]\n    x14[hconcat]\n    x15[vconcat]\n    x16[asobject]\n    x17[multiply]\n    x18[canvas]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    ORIGIN --> x2\n    I --> x3\n    ZERO --> x3\n    x1 --> x4\n    x3 --> x5\n    x5 --> x6\n    x4 --> x6\n    x1 --> x6\n    I --> x7\n    ORIGIN --> x7\n    x6 --> x7\n    x7 --> x8\n    ONE --> x9\n    x8 --> x9\n    x7 --> x10\n    ORIGIN --> x10\n    x9 --> x10\n    x10 --> x11\n    x8 --> x11\n    x11 --> x12\n    x7 --> x13\n    x11 --> x13\n    x12 --> x14\n    x7 --> x14\n    x13 --> x15\n    x14 --> x15\n    x15 --> x16\n    UNITY --> x17\n    TEN --> x17\n    x2 --> x18\n    x17 --> x18\n    x18 --> O\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_539a4f51(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = colorcount(I, ZERO)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = width(x7)\n    x9 = astuple(ONE, x8)\n    x10 = crop(x7, ORIGIN, x9)\n    x11 = vupscale(x10, x8)\n    x12 = dmirror(x11)\n    x13 = hconcat(x7, x11)\n    x14 = hconcat(x12, x7)\n    x15 = vconcat(x13, x14)\n    x16 = asobject(x15)\n    x17 = multiply(UNITY, TEN)\n    x18 = canvas(x2, x17)\n    O = paint(x18, x16)\n    return O", "line_count": 21}
{"name": "5daaa586", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[rbind]\n    x4[compose]\n    x5[extract]\n    x6[outbox]\n    x7[subgrid]\n    x8[fgpartition]\n    x9[argmax]\n    x10[color]\n    x11[toindices]\n    x12[prapply]\n    x13[mfilter]\n    x14[mfilter]\n    x15[size]\n    x16[size]\n    x17[greater]\n    x18[branch]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    bordering --> x3\n    I --> x3\n    flip --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    x5 --> x6\n    x6 --> x7\n    I --> x7\n    x7 --> x8\n    x8 --> x9\n    size --> x9\n    x9 --> x10\n    x9 --> x11\n    connect --> x12\n    x11 --> x12\n    x11 --> x12\n    x12 --> x13\n    vline --> x13\n    x12 --> x14\n    hline --> x14\n    x13 --> x15\n    x14 --> x16\n    x15 --> x17\n    x16 --> x17\n    x17 --> x18\n    x13 --> x18\n    x14 --> x18\n    x7 --> O\n    x10 --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_5daaa586(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O", "line_count": 21}
{"name": "3bdb4ada", "graph": "graph TD\n    x1[objects]\n    x2[totuple]\n    x3[compose]\n    x4[compose]\n    x5[apply]\n    x6[apply]\n    x7[papply]\n    x8[apply]\n    x9[compose]\n    x10[power]\n    x11[fork]\n    x12[compose]\n    x13[lbind]\n    x14[lbind]\n    x15[compose]\n    x16[fork]\n    x17[pair]\n    x18[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    increment --> x3\n    ulcorner --> x3\n    decrement --> x4\n    lrcorner --> x4\n    x3 --> x5\n    x2 --> x5\n    x4 --> x6\n    x2 --> x6\n    connect --> x7\n    x5 --> x7\n    x6 --> x7\n    last --> x8\n    x5 --> x8\n    last --> x9\n    first --> x9\n    last --> x10\n    TWO --> x10\n    subtract --> x11\n    x9 --> x11\n    x10 --> x11\n    even --> x12\n    x11 --> x12\n    rbind --> x13\n    astuple --> x13\n    compose --> x14\n    x12 --> x14\n    x14 --> x15\n    x13 --> x15\n    sfilter --> x16\n    first --> x16\n    x15 --> x16\n    x7 --> x17\n    x8 --> x17\n    x16 --> x18\n    x17 --> x18\n    I --> O\n    ZERO --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3bdb4ada(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = compose(increment, ulcorner)\n    x4 = compose(decrement, lrcorner)\n    x5 = apply(x3, x2)\n    x6 = apply(x4, x2)\n    x7 = papply(connect, x5, x6)\n    x8 = apply(last, x5)\n    x9 = compose(last, first)\n    x10 = power(last, TWO)\n    x11 = fork(subtract, x9, x10)\n    x12 = compose(even, x11)\n    x13 = lbind(rbind, astuple)\n    x14 = lbind(compose, x12)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, first, x15)\n    x17 = pair(x7, x8)\n    x18 = mapply(x16, x17)\n    O = fill(I, ZERO, x18)\n    return O", "line_count": 21}
{"name": "ec883f72", "graph": "graph TD\n    x1[palette]\n    x2[objects]\n    x3[fork]\n    x4[argmax]\n    x5[color]\n    x6[remove]\n    x7[other]\n    x8[lrcorner]\n    x9[llcorner]\n    x10[urcorner]\n    x11[ulcorner]\n    x12[shoot]\n    x13[shoot]\n    x14[shoot]\n    x15[shoot]\n    x16[combine]\n    x17[combine]\n    x18[combine]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    multiply --> x3\n    height --> x3\n    width --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    ZERO --> x6\n    x1 --> x6\n    x6 --> x7\n    x5 --> x7\n    x4 --> x8\n    x4 --> x9\n    x4 --> x10\n    x4 --> x11\n    x8 --> x12\n    UNITY --> x12\n    x9 --> x13\n    DOWN_LEFT --> x13\n    x10 --> x14\n    UP_RIGHT --> x14\n    x11 --> x15\n    NEG_UNITY --> x15\n    x12 --> x16\n    x13 --> x16\n    x14 --> x17\n    x15 --> x17\n    x16 --> x18\n    x17 --> x18\n    I --> O\n    x7 --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_ec883f72(I):\n    x1 = palette(I)\n    x2 = objects(I, T, T, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(I, x7, x18)\n    return O", "line_count": 21}
{"name": "2bee17df", "graph": "graph TD\n    x1[height]\n    x2[rot90]\n    x3[subtract]\n    x4[interval]\n    x5[rbind]\n    x6[matcher]\n    x7[rbind]\n    x8[lbind]\n    x9[compose]\n    x10[x9]\n    x11[pair]\n    x12[sfilter]\n    x13[mapply]\n    x14[x9]\n    x15[pair]\n    x16[sfilter]\n    x17[mapply]\n    x18[astuple]\n    x19[merge]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    TWO --> x3\n    ZERO --> x4\n    x1 --> x4\n    ONE --> x4\n    colorcount --> x5\n    ZERO --> x5\n    x5 --> x6\n    x3 --> x6\n    vsplit --> x7\n    x1 --> x7\n    apply --> x8\n    x6 --> x8\n    x8 --> x9\n    x7 --> x9\n    I --> x10\n    x4 --> x11\n    x10 --> x11\n    x11 --> x12\n    last --> x12\n    hfrontier --> x13\n    x12 --> x13\n    x2 --> x14\n    x14 --> x15\n    x4 --> x15\n    x15 --> x16\n    first --> x16\n    vfrontier --> x17\n    x16 --> x17\n    x13 --> x18\n    x17 --> x18\n    x18 --> x19\n    I --> O\n    THREE --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2bee17df(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = interval(ZERO, x1, ONE)\n    x5 = rbind(colorcount, ZERO)\n    x6 = matcher(x5, x3)\n    x7 = rbind(vsplit, x1)\n    x8 = lbind(apply, x6)\n    x9 = compose(x8, x7)\n    x10 = x9(I)\n    x11 = pair(x4, x10)\n    x12 = sfilter(x11, last)\n    x13 = mapply(hfrontier, x12)\n    x14 = x9(x2)\n    x15 = pair(x14, x4)\n    x16 = sfilter(x15, first)\n    x17 = mapply(vfrontier, x16)\n    x18 = astuple(x13, x17)\n    x19 = merge(x18)\n    O = underfill(I, THREE, x19)\n    return O", "line_count": 22}
{"name": "e8dc4411", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[ofcolor]\n    x4[position]\n    x5[fork]\n    x6[x5]\n    x7[intersection]\n    x8[equality]\n    x9[fork]\n    x10[fork]\n    x11[branch]\n    x12[shape]\n    x13[multiply]\n    x14[apply]\n    x15[interval]\n    x16[lbind]\n    x17[apply]\n    x18[lbind]\n    x19[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    ZERO --> x2\n    I --> x3\n    x1 --> x3\n    x2 --> x4\n    x3 --> x4\n    connect --> x5\n    ulcorner --> x5\n    lrcorner --> x5\n    x2 --> x6\n    x2 --> x7\n    x6 --> x7\n    x6 --> x8\n    x7 --> x8\n    subtract --> x9\n    identity --> x9\n    crement --> x9\n    add --> x10\n    identity --> x10\n    x9 --> x10\n    x8 --> x11\n    identity --> x11\n    x10 --> x11\n    x2 --> x12\n    x12 --> x13\n    x4 --> x13\n    x11 --> x14\n    x13 --> x14\n    ONE --> x15\n    FIVE --> x15\n    ONE --> x15\n    multiply --> x16\n    x14 --> x16\n    x16 --> x17\n    x15 --> x17\n    shift --> x18\n    x2 --> x18\n    x18 --> x19\n    x17 --> x19\n    I --> O\n    x1 --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e8dc4411(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, ZERO)\n    x3 = ofcolor(I, x1)\n    x4 = position(x2, x3)\n    x5 = fork(connect, ulcorner, lrcorner)\n    x6 = x5(x2)\n    x7 = intersection(x2, x6)\n    x8 = equality(x6, x7)\n    x9 = fork(subtract, identity, crement)\n    x10 = fork(add, identity, x9)\n    x11 = branch(x8, identity, x10)\n    x12 = shape(x2)\n    x13 = multiply(x12, x4)\n    x14 = apply(x11, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = lbind(multiply, x14)\n    x17 = apply(x16, x15)\n    x18 = lbind(shift, x2)\n    x19 = mapply(x18, x17)\n    O = fill(I, x1, x19)\n    return O", "line_count": 22}
{"name": "e40b9e2f", "graph": "graph TD\n    x1[objects]\n    x2[neighbors]\n    x3[mapply]\n    x4[first]\n    x5[lbind]\n    x6[compose]\n    x7[x6]\n    x8[lbind]\n    x9[apply]\n    x10[argmax]\n    x11[paint]\n    x12[objects]\n    x13[first]\n    x14[compose]\n    x15[compose]\n    x16[x15]\n    x17[lbind]\n    x18[apply]\n    x19[argmax]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    ORIGIN --> x2\n    neighbors --> x3\n    x2 --> x3\n    x1 --> x4\n    intersection --> x5\n    x4 --> x5\n    hmirror --> x6\n    vmirror --> x6\n    x4 --> x7\n    shift --> x8\n    x7 --> x8\n    x8 --> x9\n    x3 --> x9\n    x9 --> x10\n    x5 --> x10\n    I --> x11\n    x10 --> x11\n    x11 --> x12\n    F --> x12\n    T --> x12\n    T --> x12\n    x12 --> x13\n    size --> x14\n    x5 --> x14\n    vmirror --> x15\n    dmirror --> x15\n    x13 --> x16\n    shift --> x17\n    x16 --> x17\n    x17 --> x18\n    x3 --> x18\n    x18 --> x19\n    x14 --> x19\n    x11 --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e40b9e2f(I):\n    x1 = objects(I, F, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = first(x1)\n    x5 = lbind(intersection, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = x6(x4)\n    x8 = lbind(shift, x7)\n    x9 = apply(x8, x3)\n    x10 = argmax(x9, x5)\n    x11 = paint(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = compose(size, x5)\n    x15 = compose(vmirror, dmirror)\n    x16 = x15(x13)\n    x17 = lbind(shift, x16)\n    x18 = apply(x17, x3)\n    x19 = argmax(x18, x14)\n    O = paint(x11, x19)\n    return O", "line_count": 22}
{"name": "29623171", "graph": "graph TD\n    x1[leastcolor]\n    x2[interval]\n    x3[product]\n    x4[rbind]\n    x5[rbind]\n    x6[fork]\n    x7[compose]\n    x8[compose]\n    x9[fork]\n    x10[rbind]\n    x11[rbind]\n    x12[compose]\n    x13[apply]\n    x14[valmax]\n    x15[matcher]\n    x16[compose]\n    x17[mfilter]\n    x18[mfilter]\n    x19[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    ZERO --> x2\n    NINE --> x2\n    FOUR --> x2\n    x2 --> x3\n    x2 --> x3\n    add --> x4\n    THREE --> x4\n    interval --> x5\n    ONE --> x5\n    x5 --> x6\n    identity --> x6\n    x4 --> x6\n    x6 --> x7\n    first --> x7\n    x6 --> x8\n    last --> x8\n    product --> x9\n    x7 --> x9\n    x8 --> x9\n    colorcount --> x10\n    x1 --> x10\n    toobject --> x11\n    I --> x11\n    x10 --> x12\n    x11 --> x12\n    x9 --> x13\n    x3 --> x13\n    x13 --> x14\n    x12 --> x14\n    x12 --> x15\n    x14 --> x15\n    flip --> x16\n    x15 --> x16\n    x13 --> x17\n    x15 --> x17\n    x13 --> x18\n    x16 --> x18\n    I --> x19\n    x1 --> x19\n    x17 --> x19\n    x19 --> O\n    ZERO --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_29623171(I):\n    x1 = leastcolor(I)\n    x2 = interval(ZERO, NINE, FOUR)\n    x3 = product(x2, x2)\n    x4 = rbind(add, THREE)\n    x5 = rbind(interval, ONE)\n    x6 = fork(x5, identity, x4)\n    x7 = compose(x6, first)\n    x8 = compose(x6, last)\n    x9 = fork(product, x7, x8)\n    x10 = rbind(colorcount, x1)\n    x11 = rbind(toobject, I)\n    x12 = compose(x10, x11)\n    x13 = apply(x9, x3)\n    x14 = valmax(x13, x12)\n    x15 = matcher(x12, x14)\n    x16 = compose(flip, x15)\n    x17 = mfilter(x13, x15)\n    x18 = mfilter(x13, x16)\n    x19 = fill(I, x1, x17)\n    O = fill(x19, ZERO, x18)\n    return O", "line_count": 22}
{"name": "a2fd1cf0", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[uppermost]\n    x4[leftmost]\n    x5[uppermost]\n    x6[leftmost]\n    x7[astuple]\n    x8[minimum]\n    x9[maximum]\n    x10[astuple]\n    x11[astuple]\n    x12[connect]\n    x13[astuple]\n    x14[minimum]\n    x15[maximum]\n    x16[astuple]\n    x17[astuple]\n    x18[connect]\n    x19[combine]\n    O[underfill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    THREE --> x2\n    x1 --> x3\n    x1 --> x4\n    x2 --> x5\n    x2 --> x6\n    x3 --> x7\n    x5 --> x7\n    x7 --> x8\n    x7 --> x9\n    x8 --> x10\n    x6 --> x10\n    x9 --> x11\n    x6 --> x11\n    x10 --> x12\n    x11 --> x12\n    x4 --> x13\n    x6 --> x13\n    x13 --> x14\n    x13 --> x15\n    x3 --> x16\n    x14 --> x16\n    x3 --> x17\n    x15 --> x17\n    x16 --> x18\n    x17 --> x18\n    x12 --> x19\n    x18 --> x19\n    I --> O\n    EIGHT --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a2fd1cf0(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O", "line_count": 22}
{"name": "b0c4d837", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[height]\n    x4[decrement]\n    x5[height]\n    x6[subtract]\n    x7[astuple]\n    x8[canvas]\n    x9[subtract]\n    x10[astuple]\n    x11[canvas]\n    x12[hconcat]\n    x13[hsplit]\n    x14[first]\n    x15[last]\n    x16[vmirror]\n    x17[vconcat]\n    x18[astuple]\n    x19[canvas]\n    O[vconcat]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    I --> x2\n    EIGHT --> x2\n    x1 --> x3\n    x3 --> x4\n    x2 --> x5\n    x4 --> x6\n    x5 --> x6\n    ONE --> x7\n    x6 --> x7\n    EIGHT --> x8\n    x7 --> x8\n    SIX --> x9\n    x6 --> x9\n    ONE --> x10\n    x9 --> x10\n    ZERO --> x11\n    x10 --> x11\n    x8 --> x12\n    x11 --> x12\n    x12 --> x13\n    TWO --> x13\n    x13 --> x14\n    x13 --> x15\n    x15 --> x16\n    x14 --> x17\n    x16 --> x17\n    ONE --> x18\n    THREE --> x18\n    ZERO --> x19\n    x18 --> x19\n    x17 --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b0c4d837(I):\n    x1 = ofcolor(I, FIVE)\n    x2 = ofcolor(I, EIGHT)\n    x3 = height(x1)\n    x4 = decrement(x3)\n    x5 = height(x2)\n    x6 = subtract(x4, x5)\n    x7 = astuple(ONE, x6)\n    x8 = canvas(EIGHT, x7)\n    x9 = subtract(SIX, x6)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = hconcat(x8, x11)\n    x13 = hsplit(x12, TWO)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = vmirror(x15)\n    x17 = vconcat(x14, x16)\n    x18 = astuple(ONE, THREE)\n    x19 = canvas(ZERO, x18)\n    O = vconcat(x17, x19)\n    return O", "line_count": 22}
{"name": "8731374e", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[subgrid]\n    x4[height]\n    x5[width]\n    x6[vsplit]\n    x7[lbind]\n    x8[compose]\n    x9[sfilter]\n    x10[merge]\n    x11[rot90]\n    x12[vsplit]\n    x13[sfilter]\n    x14[merge]\n    x15[rot270]\n    x16[leastcolor]\n    x17[ofcolor]\n    x18[fork]\n    x19[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    I --> x3\n    x3 --> x4\n    x3 --> x5\n    x3 --> x6\n    x4 --> x6\n    greater --> x7\n    FOUR --> x7\n    x7 --> x8\n    numcolors --> x8\n    x6 --> x9\n    x8 --> x9\n    x9 --> x10\n    x10 --> x11\n    x11 --> x12\n    x5 --> x12\n    x12 --> x13\n    x8 --> x13\n    x13 --> x14\n    x14 --> x15\n    x15 --> x16\n    x15 --> x17\n    x16 --> x17\n    combine --> x18\n    vfrontier --> x18\n    hfrontier --> x18\n    x18 --> x19\n    x17 --> x19\n    x15 --> O\n    x16 --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8731374e(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater, FOUR)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = vsplit(x11, x5)\n    x13 = sfilter(x12, x8)\n    x14 = merge(x13)\n    x15 = rot270(x14)\n    x16 = leastcolor(x15)\n    x17 = ofcolor(x15, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = mapply(x18, x17)\n    O = fill(x15, x16, x19)\n    return O", "line_count": 22}
{"name": "272f95fa", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[apply]\n    x4[rbind]\n    x5[compose]\n    x6[extract]\n    x7[remove]\n    x8[lbind]\n    x9[lbind]\n    x10[sfilter]\n    x11[sfilter]\n    x12[argmin]\n    x13[argmax]\n    x14[argmin]\n    x15[argmax]\n    x16[fill]\n    x17[fill]\n    x18[fill]\n    x19[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    toindices --> x3\n    x2 --> x3\n    bordering --> x4\n    I --> x4\n    flip --> x5\n    x4 --> x5\n    x3 --> x6\n    x5 --> x6\n    x6 --> x7\n    x3 --> x7\n    vmatching --> x8\n    x6 --> x8\n    hmatching --> x9\n    x6 --> x9\n    x7 --> x10\n    x8 --> x10\n    x7 --> x11\n    x9 --> x11\n    x10 --> x12\n    uppermost --> x12\n    x10 --> x13\n    uppermost --> x13\n    x11 --> x14\n    leftmost --> x14\n    x11 --> x15\n    leftmost --> x15\n    I --> x16\n    SIX --> x16\n    x6 --> x16\n    x16 --> x17\n    TWO --> x17\n    x12 --> x17\n    x17 --> x18\n    ONE --> x18\n    x13 --> x18\n    x18 --> x19\n    FOUR --> x19\n    x14 --> x19\n    x19 --> O\n    THREE --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_272f95fa(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = apply(toindices, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = extract(x3, x5)\n    x7 = remove(x6, x3)\n    x8 = lbind(vmatching, x6)\n    x9 = lbind(hmatching, x6)\n    x10 = sfilter(x7, x8)\n    x11 = sfilter(x7, x9)\n    x12 = argmin(x10, uppermost)\n    x13 = argmax(x10, uppermost)\n    x14 = argmin(x11, leftmost)\n    x15 = argmax(x11, leftmost)\n    x16 = fill(I, SIX, x6)\n    x17 = fill(x16, TWO, x12)\n    x18 = fill(x17, ONE, x13)\n    x19 = fill(x18, FOUR, x14)\n    O = fill(x19, THREE, x15)\n    return O", "line_count": 22}
{"name": "db93a21d", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[colorfilter]\n    x4[rbind]\n    x5[mapply]\n    x6[underfill]\n    x7[compose]\n    x8[rbind]\n    x9[compose]\n    x10[matcher]\n    x11[power]\n    x12[power]\n    x13[mapply]\n    x14[sfilter]\n    x15[sfilter]\n    x16[mapply]\n    x17[mapply]\n    x18[fill]\n    x19[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    NINE --> x2\n    x1 --> x3\n    NINE --> x3\n    shoot --> x4\n    DOWN --> x4\n    x4 --> x5\n    x2 --> x5\n    I --> x6\n    ONE --> x6\n    x5 --> x6\n    halve --> x7\n    width --> x7\n    greater --> x8\n    ONE --> x8\n    x8 --> x9\n    x7 --> x9\n    x7 --> x10\n    THREE --> x10\n    outbox --> x11\n    TWO --> x11\n    outbox --> x12\n    THREE --> x12\n    outbox --> x13\n    x3 --> x13\n    x3 --> x14\n    x9 --> x14\n    x3 --> x15\n    x10 --> x15\n    x11 --> x16\n    x14 --> x16\n    x12 --> x17\n    x15 --> x17\n    x6 --> x18\n    THREE --> x18\n    x13 --> x18\n    x18 --> x19\n    THREE --> x19\n    x16 --> x19\n    x19 --> O\n    THREE --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_db93a21d(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, NINE)\n    x3 = colorfilter(x1, NINE)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, ONE, x5)\n    x7 = compose(halve, width)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = matcher(x7, THREE)\n    x11 = power(outbox, TWO)\n    x12 = power(outbox, THREE)\n    x13 = mapply(outbox, x3)\n    x14 = sfilter(x3, x9)\n    x15 = sfilter(x3, x10)\n    x16 = mapply(x11, x14)\n    x17 = mapply(x12, x15)\n    x18 = fill(x6, THREE, x13)\n    x19 = fill(x18, THREE, x16)\n    O = fill(x19, THREE, x17)\n    return O", "line_count": 22}
{"name": "53b68214", "graph": "graph TD\n    x1[width]\n    x2[objects]\n    x3[first]\n    x4[vperiod]\n    x5[toivec]\n    x6[interval]\n    x7[lbind]\n    x8[apply]\n    x9[lbind]\n    x10[mapply]\n    x11[astuple]\n    x12[portrait]\n    x13[shape]\n    x14[add]\n    x15[decrement]\n    x16[shift]\n    x17[branch]\n    x18[canvas]\n    x19[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    x2 --> x3\n    x3 --> x4\n    x4 --> x5\n    ZERO --> x6\n    NINE --> x6\n    ONE --> x6\n    multiply --> x7\n    x5 --> x7\n    x7 --> x8\n    x6 --> x8\n    shift --> x9\n    x3 --> x9\n    x9 --> x10\n    x8 --> x10\n    x1 --> x11\n    x1 --> x11\n    x3 --> x12\n    x3 --> x13\n    DOWN --> x14\n    x13 --> x14\n    x14 --> x15\n    x3 --> x16\n    x15 --> x16\n    x12 --> x17\n    x10 --> x17\n    x16 --> x17\n    ZERO --> x18\n    x11 --> x18\n    x18 --> x19\n    x3 --> x19\n    x19 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_53b68214(I):\n    x1 = width(I)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = vperiod(x3)\n    x5 = toivec(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = lbind(multiply, x5)\n    x8 = apply(x7, x6)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    x11 = astuple(x1, x1)\n    x12 = portrait(x3)\n    x13 = shape(x3)\n    x14 = add(DOWN, x13)\n    x15 = decrement(x14)\n    x16 = shift(x3, x15)\n    x17 = branch(x12, x10, x16)\n    x18 = canvas(ZERO, x11)\n    x19 = paint(x18, x3)\n    O = paint(x19, x17)\n    return O", "line_count": 22}
{"name": "d6ad076f", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    x3[argmax]\n    x4[vmatching]\n    x5[branch]\n    x6[branch]\n    x7[valmax]\n    x8[x6]\n    x9[equality]\n    x10[branch]\n    x11[multiply]\n    x12[inbox]\n    x13[rbind]\n    x14[mapply]\n    x15[underfill]\n    x16[objects]\n    x17[colorfilter]\n    x18[rbind]\n    x19[mfilter]\n    O[cover]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x1 --> x3\n    size --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    DOWN --> x5\n    RIGHT --> x5\n    x4 --> x6\n    uppermost --> x6\n    leftmost --> x6\n    x1 --> x7\n    x6 --> x7\n    x2 --> x8\n    x7 --> x9\n    x8 --> x9\n    x9 --> x10\n    NEG_ONE --> x10\n    ONE --> x10\n    x5 --> x11\n    x10 --> x11\n    x2 --> x12\n    shoot --> x13\n    x11 --> x13\n    x13 --> x14\n    x12 --> x14\n    I --> x15\n    EIGHT --> x15\n    x14 --> x15\n    x15 --> x16\n    T --> x16\n    F --> x16\n    T --> x16\n    x16 --> x17\n    EIGHT --> x17\n    bordering --> x18\n    I --> x18\n    x17 --> x19\n    x18 --> x19\n    x15 --> O\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d6ad076f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    x3 = argmax(x1, size)\n    x4 = vmatching(x2, x3)\n    x5 = branch(x4, DOWN, RIGHT)\n    x6 = branch(x4, uppermost, leftmost)\n    x7 = valmax(x1, x6)\n    x8 = x6(x2)\n    x9 = equality(x7, x8)\n    x10 = branch(x9, NEG_ONE, ONE)\n    x11 = multiply(x5, x10)\n    x12 = inbox(x2)\n    x13 = rbind(shoot, x11)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, EIGHT, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O", "line_count": 22}
{"name": "6cdd2623", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[prapply]\n    x4[fgpartition]\n    x5[merge]\n    x6[cover]\n    x7[fork]\n    x8[box]\n    x9[rbind]\n    x10[chain]\n    x11[fork]\n    x12[mfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    connect --> x3\n    x2 --> x3\n    x2 --> x3\n    I --> x4\n    x4 --> x5\n    I --> x6\n    x5 --> x6\n    either --> x7\n    hline --> x7\n    vline --> x7\n    x5 --> x8\n    difference --> x9\n    x8 --> x9\n    positive --> x10\n    size --> x10\n    x9 --> x10\n    both --> x11\n    x7 --> x11\n    x10 --> x11\n    x3 --> x12\n    x11 --> x12\n    x6 --> O\n    x1 --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6cdd2623(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O", "line_count": 15}
{"name": "a3df8b1e", "graph": "graph TD\n    x1[shape]\n    x2[ofcolor]\n    x3[first]\n    x4[shoot]\n    x5[fill]\n    x6[ofcolor]\n    x7[urcorner]\n    x8[shoot]\n    x9[fill]\n    x10[objects]\n    x11[first]\n    x12[subgrid]\n    x13[shape]\n    x14[subtract]\n    x15[crop]\n    x16[vconcat]\n    x17[vconcat]\n    x18[vconcat]\n    x19[hmirror]\n    x20[crop]\n    O[hmirror]\n    I[I]\n    I --> x1\n    I --> x2\n    ONE --> x2\n    x2 --> x3\n    x3 --> x4\n    UP_RIGHT --> x4\n    I --> x5\n    ONE --> x5\n    x4 --> x5\n    x5 --> x6\n    ONE --> x6\n    x6 --> x7\n    x7 --> x8\n    NEG_UNITY --> x8\n    x5 --> x9\n    ONE --> x9\n    x8 --> x9\n    x9 --> x10\n    T --> x10\n    T --> x10\n    T --> x10\n    x10 --> x11\n    x11 --> x12\n    x9 --> x12\n    x12 --> x13\n    x13 --> x14\n    DOWN --> x14\n    x12 --> x15\n    DOWN --> x15\n    x14 --> x15\n    x15 --> x16\n    x15 --> x16\n    x16 --> x17\n    x16 --> x17\n    x17 --> x18\n    x17 --> x18\n    x18 --> x19\n    x19 --> x20\n    ORIGIN --> x20\n    x1 --> x20\n    x20 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a3df8b1e(I):\n    x1 = shape(I)\n    x2 = ofcolor(I, ONE)\n    x3 = first(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = fill(I, ONE, x4)\n    x6 = ofcolor(x5, ONE)\n    x7 = urcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(x5, ONE, x8)\n    x10 = objects(x9, T, T, T)\n    x11 = first(x10)\n    x12 = subgrid(x11, x9)\n    x13 = shape(x12)\n    x14 = subtract(x13, DOWN)\n    x15 = crop(x12, DOWN, x14)\n    x16 = vconcat(x15, x15)\n    x17 = vconcat(x16, x16)\n    x18 = vconcat(x17, x17)\n    x19 = hmirror(x18)\n    x20 = crop(x19, ORIGIN, x1)\n    O = hmirror(x20)\n    return O", "line_count": 23}
{"name": "8d510a79", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[ofcolor]\n    x4[uppermost]\n    x5[chain]\n    x6[lbind]\n    x7[compose]\n    x8[chain]\n    x9[fork]\n    x10[compose]\n    x11[fork]\n    x12[lbind]\n    x13[compose]\n    x14[fork]\n    x15[mapply]\n    x16[mapply]\n    x17[underfill]\n    O[fill]\n    I[I]\n    I --> x1\n    ONE --> x1\n    I --> x2\n    TWO --> x2\n    I --> x3\n    FIVE --> x3\n    x3 --> x4\n    toivec --> x5\n    decrement --> x5\n    double --> x5\n    greater --> x6\n    x4 --> x6\n    x6 --> x7\n    first --> x7\n    invert --> x8\n    x5 --> x8\n    x7 --> x8\n    shoot --> x9\n    identity --> x9\n    x8 --> x9\n    x5 --> x10\n    x7 --> x10\n    shoot --> x11\n    identity --> x11\n    x10 --> x11\n    matcher --> x12\n    x7 --> x12\n    x12 --> x13\n    x7 --> x13\n    sfilter --> x14\n    x11 --> x14\n    x13 --> x14\n    x9 --> x15\n    x1 --> x15\n    x14 --> x16\n    x2 --> x16\n    I --> x17\n    TWO --> x17\n    x16 --> x17\n    x17 --> O\n    ONE --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_8d510a79(I):\n    x1 = ofcolor(I, ONE)\n    x2 = ofcolor(I, TWO)\n    x3 = ofcolor(I, FIVE)\n    x4 = uppermost(x3)\n    x5 = chain(toivec, decrement, double)\n    x6 = lbind(greater, x4)\n    x7 = compose(x6, first)\n    x8 = chain(invert, x5, x7)\n    x9 = fork(shoot, identity, x8)\n    x10 = compose(x5, x7)\n    x11 = fork(shoot, identity, x10)\n    x12 = lbind(matcher, x7)\n    x13 = compose(x12, x7)\n    x14 = fork(sfilter, x11, x13)\n    x15 = mapply(x9, x1)\n    x16 = mapply(x14, x2)\n    x17 = underfill(I, TWO, x16)\n    O = fill(x17, ONE, x15)\n    return O", "line_count": 20}
{"name": "cdecee7f", "graph": "graph TD\n    x1[objects]\n    x2[astuple]\n    x3[size]\n    x4[order]\n    x5[apply]\n    x6[rbind]\n    x7[apply]\n    x8[merge]\n    x9[dmirror]\n    x10[subtract]\n    x11[astuple]\n    x12[canvas]\n    x13[hconcat]\n    x14[hsplit]\n    x15[merge]\n    x16[crop]\n    x17[crop]\n    x18[crop]\n    x19[vmirror]\n    x20[vconcat]\n    O[vconcat]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    ONE --> x2\n    THREE --> x2\n    x1 --> x3\n    x1 --> x4\n    leftmost --> x4\n    color --> x5\n    x4 --> x5\n    canvas --> x6\n    UNITY --> x6\n    x6 --> x7\n    x5 --> x7\n    x7 --> x8\n    x8 --> x9\n    NINE --> x10\n    x3 --> x10\n    ONE --> x11\n    x10 --> x11\n    ZERO --> x12\n    x11 --> x12\n    x9 --> x13\n    x12 --> x13\n    x13 --> x14\n    THREE --> x14\n    x14 --> x15\n    x15 --> x16\n    ORIGIN --> x16\n    x2 --> x16\n    x15 --> x17\n    DOWN --> x17\n    x2 --> x17\n    x15 --> x18\n    TWO_BY_ZERO --> x18\n    x2 --> x18\n    x17 --> x19\n    x16 --> x20\n    x19 --> x20\n    x20 --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_cdecee7f(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O", "line_count": 23}
{"name": "3345333e", "graph": "graph TD\n    x1[leastcolor]\n    x2[ofcolor]\n    x3[cover]\n    x4[leastcolor]\n    x5[ofcolor]\n    x6[neighbors]\n    x7[mapply]\n    x8[vmirror]\n    x9[lbind]\n    x10[apply]\n    x11[rbind]\n    x12[compose]\n    x13[argmax]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x2\n    I --> x3\n    x2 --> x3\n    x3 --> x4\n    x3 --> x5\n    x4 --> x5\n    ORIGIN --> x6\n    neighbors --> x7\n    x6 --> x7\n    x5 --> x8\n    shift --> x9\n    x8 --> x9\n    x9 --> x10\n    x7 --> x10\n    intersection --> x11\n    x5 --> x11\n    size --> x12\n    x11 --> x12\n    x10 --> x13\n    x12 --> x13\n    x3 --> O\n    x4 --> O\n    x13 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3345333e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(x3)\n    x5 = ofcolor(x3, x4)\n    x6 = neighbors(ORIGIN)\n    x7 = mapply(neighbors, x6)\n    x8 = vmirror(x5)\n    x9 = lbind(shift, x8)\n    x10 = apply(x9, x7)\n    x11 = rbind(intersection, x5)\n    x12 = compose(size, x11)\n    x13 = argmax(x10, x12)\n    O = fill(x3, x4, x13)\n    return O", "line_count": 16}
{"name": "b190f7f5", "graph": "graph TD\n    x1[portrait]\n    x2[branch]\n    x3[x2]\n    x4[argmin]\n    x5[argmax]\n    x6[width]\n    x7[rbind]\n    x8[chain]\n    x9[upscale]\n    x10[x8]\n    x11[x8]\n    x12[ofcolor]\n    O[fill]\n    I[I]\n    I --> x1\n    x1 --> x2\n    vsplit --> x2\n    hsplit --> x2\n    I --> x3\n    TWO --> x3\n    x3 --> x4\n    numcolors --> x4\n    x3 --> x5\n    numcolors --> x5\n    x5 --> x6\n    repeat --> x7\n    x6 --> x7\n    dmirror --> x8\n    merge --> x8\n    x7 --> x8\n    x5 --> x9\n    x6 --> x9\n    x4 --> x10\n    x10 --> x11\n    x11 --> x12\n    ZERO --> x12\n    x9 --> O\n    ZERO --> O\n    x12 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b190f7f5(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O", "line_count": 15}
{"name": "caa06a1f", "graph": "graph TD\n    x1[asobject]\n    x2[shape]\n    x3[decrement]\n    x4[index]\n    x5[double]\n    x6[canvas]\n    x7[paint]\n    x8[objects]\n    x9[first]\n    x10[shift]\n    x11[vperiod]\n    x12[hperiod]\n    x13[neighbors]\n    x14[lbind]\n    x15[power]\n    x16[x15]\n    x17[astuple]\n    x18[lbind]\n    x19[apply]\n    x20[lbind]\n    x21[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    I --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x6\n    x5 --> x6\n    x6 --> x7\n    x1 --> x7\n    x7 --> x8\n    F --> x8\n    F --> x8\n    T --> x8\n    x8 --> x9\n    x9 --> x10\n    LEFT --> x10\n    x10 --> x11\n    x10 --> x12\n    ORIGIN --> x13\n    mapply --> x14\n    neighbors --> x14\n    x14 --> x15\n    TWO --> x15\n    x13 --> x16\n    x11 --> x17\n    x12 --> x17\n    multiply --> x18\n    x17 --> x18\n    x18 --> x19\n    x16 --> x19\n    shift --> x20\n    x10 --> x20\n    x20 --> x21\n    x19 --> x21\n    I --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_caa06a1f(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O", "line_count": 24}
{"name": "e21d9049", "graph": "graph TD\n    x1[asindices]\n    x2[leastcolor]\n    x3[objects]\n    x4[ofcolor]\n    x5[merge]\n    x6[shape]\n    x7[neighbors]\n    x8[lbind]\n    x9[power]\n    x10[x9]\n    x11[lbind]\n    x12[lbind]\n    x13[apply]\n    x14[mapply]\n    x15[lbind]\n    x16[lbind]\n    x17[fork]\n    x18[compose]\n    x19[paint]\n    x20[sfilter]\n    x21[difference]\n    O[cover]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    T --> x3\n    F --> x3\n    T --> x3\n    I --> x4\n    x2 --> x4\n    x3 --> x5\n    x5 --> x6\n    ORIGIN --> x7\n    mapply --> x8\n    neighbors --> x8\n    x8 --> x9\n    TWO --> x9\n    x7 --> x10\n    multiply --> x11\n    x6 --> x11\n    shift --> x12\n    x5 --> x12\n    x11 --> x13\n    x10 --> x13\n    x12 --> x14\n    x13 --> x14\n    hmatching --> x15\n    x4 --> x15\n    vmatching --> x16\n    x4 --> x16\n    either --> x17\n    x15 --> x17\n    x16 --> x17\n    x17 --> x18\n    initset --> x18\n    I --> x19\n    x14 --> x19\n    x1 --> x20\n    x18 --> x20\n    x1 --> x21\n    x20 --> x21\n    x19 --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e21d9049(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = objects(I, T, F, T)\n    x4 = ofcolor(I, x2)\n    x5 = merge(x3)\n    x6 = shape(x5)\n    x7 = neighbors(ORIGIN)\n    x8 = lbind(mapply, neighbors)\n    x9 = power(x8, TWO)\n    x10 = x9(x7)\n    x11 = lbind(multiply, x6)\n    x12 = lbind(shift, x5)\n    x13 = apply(x11, x10)\n    x14 = mapply(x12, x13)\n    x15 = lbind(hmatching, x4)\n    x16 = lbind(vmatching, x4)\n    x17 = fork(either, x15, x16)\n    x18 = compose(x17, initset)\n    x19 = paint(I, x14)\n    x20 = sfilter(x1, x18)\n    x21 = difference(x1, x20)\n    O = cover(x19, x21)\n    return O", "line_count": 24}
{"name": "d89b689b", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[sizefilter]\n    x4[apply]\n    x5[lbind]\n    x6[lbind]\n    x7[compose]\n    x8[fork]\n    x9[mapply]\n    x10[merge]\n    x11[cover]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    EIGHT --> x2\n    x1 --> x3\n    ONE --> x3\n    initset --> x4\n    x2 --> x4\n    argmin --> x5\n    x4 --> x5\n    rbind --> x6\n    manhattan --> x6\n    x5 --> x7\n    x6 --> x7\n    recolor --> x8\n    color --> x8\n    x7 --> x8\n    x8 --> x9\n    x3 --> x9\n    x3 --> x10\n    I --> x11\n    x10 --> x11\n    x11 --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d89b689b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, EIGHT)\n    x3 = sizefilter(x1, ONE)\n    x4 = apply(initset, x2)\n    x5 = lbind(argmin, x4)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x5, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = merge(x3)\n    x11 = cover(I, x10)\n    O = paint(x11, x9)\n    return O", "line_count": 14}
{"name": "746b3537", "graph": "graph TD\n    x1[chain]\n    x2[x1]\n    x3[equality]\n    x4[branch]\n    x5[x4]\n    x6[objects]\n    x7[order]\n    x8[apply]\n    x9[repeat]\n    O[x4]\n    I[I]\n    size --> x1\n    dedupe --> x1\n    first --> x1\n    I --> x2\n    x2 --> x3\n    ONE --> x3\n    x3 --> x4\n    dmirror --> x4\n    identity --> x4\n    I --> x5\n    x5 --> x6\n    T --> x6\n    F --> x6\n    F --> x6\n    x6 --> x7\n    leftmost --> x7\n    color --> x8\n    x7 --> x8\n    x8 --> x9\n    ONE --> x9\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_746b3537(I):\n    x1 = chain(size, dedupe, first)\n    x2 = x1(I)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, F)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O", "line_count": 12}
{"name": "63613498", "graph": "graph TD\n    x1[crop]\n    x2[ofcolor]\n    x3[asindices]\n    x4[difference]\n    x5[normalize]\n    x6[objects]\n    x7[compose]\n    x8[matcher]\n    x9[mfilter]\n    x10[fill]\n    x11[asobject]\n    O[paint]\n    I[I]\n    I --> x1\n    ORIGIN --> x1\n    THREE_BY_THREE --> x1\n    x1 --> x2\n    ZERO --> x2\n    x1 --> x3\n    x3 --> x4\n    x2 --> x4\n    x4 --> x5\n    I --> x6\n    T --> x6\n    F --> x6\n    T --> x6\n    toindices --> x7\n    normalize --> x7\n    x7 --> x8\n    x5 --> x8\n    x6 --> x9\n    x8 --> x9\n    I --> x10\n    FIVE --> x10\n    x9 --> x10\n    x1 --> x11\n    x10 --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_63613498(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, FIVE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O", "line_count": 14}
{"name": "06df4c85", "graph": "graph TD\n    x1[partition]\n    x2[mostcolor]\n    x3[ofcolor]\n    x4[colorfilter]\n    x5[argmax]\n    x6[difference]\n    x7[remove]\n    x8[merge]\n    x9[product]\n    x10[power]\n    x11[compose]\n    x12[fork]\n    x13[sfilter]\n    x14[compose]\n    x15[power]\n    x16[fork]\n    x17[fork]\n    x18[apply]\n    x19[fork]\n    x20[mfilter]\n    x21[paint]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x2 --> x3\n    x1 --> x4\n    ZERO --> x4\n    x1 --> x5\n    size --> x5\n    x1 --> x6\n    x4 --> x6\n    x5 --> x7\n    x6 --> x7\n    x7 --> x8\n    x8 --> x9\n    x8 --> x9\n    first --> x10\n    TWO --> x10\n    first --> x11\n    last --> x11\n    equality --> x12\n    x10 --> x12\n    x11 --> x12\n    x9 --> x13\n    x12 --> x13\n    last --> x14\n    first --> x14\n    last --> x15\n    TWO --> x15\n    connect --> x16\n    x14 --> x16\n    x15 --> x16\n    recolor --> x17\n    color --> x17\n    x16 --> x17\n    x17 --> x18\n    x13 --> x18\n    either --> x19\n    vline --> x19\n    hline --> x19\n    x18 --> x20\n    x19 --> x20\n    I --> x21\n    x20 --> x21\n    x21 --> O\n    x2 --> O\n    x3 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_06df4c85(I):\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = colorfilter(x1, ZERO)\n    x5 = argmax(x1, size)\n    x6 = difference(x1, x4)\n    x7 = remove(x5, x6)\n    x8 = merge(x7)\n    x9 = product(x8, x8)\n    x10 = power(first, TWO)\n    x11 = compose(first, last)\n    x12 = fork(equality, x10, x11)\n    x13 = sfilter(x9, x12)\n    x14 = compose(last, first)\n    x15 = power(last, TWO)\n    x16 = fork(connect, x14, x15)\n    x17 = fork(recolor, color, x16)\n    x18 = apply(x17, x13)\n    x19 = fork(either, vline, hline)\n    x20 = mfilter(x18, x19)\n    x21 = paint(I, x20)\n    O = fill(x21, x2, x3)\n    return O", "line_count": 24}
{"name": "f9012d9b", "graph": "graph TD\n    x1[objects]\n    x2[ofcolor]\n    x3[lbind]\n    x4[chain]\n    x5[mfilter]\n    x6[vsplit]\n    x7[hsplit]\n    x8[extract]\n    x9[extract]\n    x10[asobject]\n    x11[asobject]\n    x12[vperiod]\n    x13[hperiod]\n    x14[neighbors]\n    x15[mapply]\n    x16[astuple]\n    x17[rbind]\n    x18[apply]\n    x19[lbind]\n    x20[mapply]\n    x21[paint]\n    O[subgrid]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    I --> x2\n    ZERO --> x2\n    contained --> x3\n    ZERO --> x3\n    flip --> x4\n    x3 --> x4\n    palette --> x4\n    x1 --> x5\n    x4 --> x5\n    I --> x6\n    TWO --> x6\n    I --> x7\n    TWO --> x7\n    x6 --> x8\n    x4 --> x8\n    x7 --> x9\n    x4 --> x9\n    x8 --> x10\n    x9 --> x11\n    x10 --> x12\n    x11 --> x13\n    ORIGIN --> x14\n    neighbors --> x15\n    x14 --> x15\n    x12 --> x16\n    x13 --> x16\n    multiply --> x17\n    x16 --> x17\n    x17 --> x18\n    x15 --> x18\n    shift --> x19\n    x5 --> x19\n    x19 --> x20\n    x18 --> x20\n    I --> x21\n    x20 --> x21\n    x2 --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f9012d9b(I):\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, ZERO)\n    x3 = lbind(contained, ZERO)\n    x4 = chain(flip, x3, palette)\n    x5 = mfilter(x1, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = asobject(x9)\n    x12 = vperiod(x10)\n    x13 = hperiod(x11)\n    x14 = neighbors(ORIGIN)\n    x15 = mapply(neighbors, x14)\n    x16 = astuple(x12, x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x5)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x2, x21)\n    return O", "line_count": 24}
{"name": "4522001f", "graph": "graph TD\n    x1[objects]\n    x2[first]\n    x3[toindices]\n    x4[contained]\n    x5[contained]\n    x6[contained]\n    x7[astuple]\n    x8[canvas]\n    x9[astuple]\n    x10[initset]\n    x11[upscale]\n    x12[upscale]\n    x13[shape]\n    x14[shift]\n    x15[combine]\n    x16[paint]\n    x17[rot90]\n    x18[rot180]\n    x19[rot270]\n    x20[branch]\n    x21[branch]\n    O[branch]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    ZERO_BY_TWO --> x4\n    x3 --> x4\n    TWO_BY_TWO --> x5\n    x3 --> x5\n    TWO_BY_ZERO --> x6\n    x3 --> x6\n    NINE --> x7\n    NINE --> x7\n    ZERO --> x8\n    x7 --> x8\n    THREE --> x9\n    ORIGIN --> x9\n    x9 --> x10\n    x10 --> x11\n    TWO --> x11\n    x11 --> x12\n    TWO --> x12\n    x12 --> x13\n    x12 --> x14\n    x13 --> x14\n    x12 --> x15\n    x14 --> x15\n    x8 --> x16\n    x15 --> x16\n    x16 --> x17\n    x16 --> x18\n    x16 --> x19\n    x4 --> x20\n    x17 --> x20\n    x16 --> x20\n    x5 --> x21\n    x18 --> x21\n    x20 --> x21\n    x6 --> O\n    x19 --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4522001f(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = toindices(x2)\n    x4 = contained(ZERO_BY_TWO, x3)\n    x5 = contained(TWO_BY_TWO, x3)\n    x6 = contained(TWO_BY_ZERO, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = astuple(THREE, ORIGIN)\n    x10 = initset(x9)\n    x11 = upscale(x10, TWO)\n    x12 = upscale(x11, TWO)\n    x13 = shape(x12)\n    x14 = shift(x12, x13)\n    x15 = combine(x12, x14)\n    x16 = paint(x8, x15)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = branch(x4, x17, x16)\n    x21 = branch(x5, x18, x20)\n    O = branch(x6, x19, x21)\n    return O", "line_count": 24}
{"name": "a48eeaf7", "graph": "graph TD\n    x1[ofcolor]\n    x2[outbox]\n    x3[apply]\n    x4[ofcolor]\n    x5[lbind]\n    x6[lbind]\n    x7[compose]\n    x8[compose]\n    x9[mapply]\n    x10[cover]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    x1 --> x2\n    initset --> x3\n    x2 --> x3\n    I --> x4\n    FIVE --> x4\n    argmin --> x5\n    x3 --> x5\n    lbind --> x6\n    manhattan --> x6\n    x6 --> x7\n    initset --> x7\n    x5 --> x8\n    x7 --> x8\n    x8 --> x9\n    x4 --> x9\n    I --> x10\n    x4 --> x10\n    x10 --> O\n    FIVE --> O\n    x9 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a48eeaf7(I):\n    x1 = ofcolor(I, TWO)\n    x2 = outbox(x1)\n    x3 = apply(initset, x2)\n    x4 = ofcolor(I, FIVE)\n    x5 = lbind(argmin, x3)\n    x6 = lbind(lbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = compose(x5, x7)\n    x9 = mapply(x8, x4)\n    x10 = cover(I, x4)\n    O = fill(x10, FIVE, x9)\n    return O", "line_count": 13}
{"name": "eb5a1d5d", "graph": "graph TD\n    x1[compose]\n    x2[x1]\n    x3[x1]\n    x4[fork]\n    x5[compose]\n    x6[fork]\n    x7[x6]\n    x8[dmirror]\n    O[x6]\n    I[I]\n    dmirror --> x1\n    dedupe --> x1\n    I --> x2\n    x2 --> x3\n    remove --> x4\n    last --> x4\n    identity --> x4\n    hmirror --> x5\n    x4 --> x5\n    vconcat --> x6\n    identity --> x6\n    x5 --> x6\n    x3 --> x7\n    x7 --> x8\n    x8 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_eb5a1d5d(I):\n    x1 = compose(dmirror, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fork(remove, last, identity)\n    x5 = compose(hmirror, x4)\n    x6 = fork(vconcat, identity, x5)\n    x7 = x6(x3)\n    x8 = dmirror(x7)\n    O = x6(x8)\n    return O", "line_count": 11}
{"name": "e179c5f4", "graph": "graph TD\n    x1[height]\n    x2[ofcolor]\n    x3[first]\n    x4[shoot]\n    x5[fill]\n    x6[ofcolor]\n    x7[urcorner]\n    x8[shoot]\n    x9[fill]\n    x10[ofcolor]\n    x11[subgrid]\n    x12[height]\n    x13[width]\n    x14[decrement]\n    x15[astuple]\n    x16[ulcorner]\n    x17[crop]\n    x18[repeat]\n    x19[merge]\n    x20[astuple]\n    x21[crop]\n    x22[hmirror]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    ONE --> x2\n    x2 --> x3\n    x3 --> x4\n    UP_RIGHT --> x4\n    I --> x5\n    ONE --> x5\n    x4 --> x5\n    x5 --> x6\n    ONE --> x6\n    x6 --> x7\n    x7 --> x8\n    NEG_UNITY --> x8\n    x5 --> x9\n    ONE --> x9\n    x8 --> x9\n    x9 --> x10\n    ONE --> x10\n    x10 --> x11\n    x9 --> x11\n    x11 --> x12\n    x11 --> x13\n    x12 --> x14\n    x14 --> x15\n    x13 --> x15\n    x10 --> x16\n    x9 --> x17\n    x16 --> x17\n    x15 --> x17\n    x17 --> x18\n    NINE --> x18\n    x18 --> x19\n    x1 --> x20\n    x13 --> x20\n    x19 --> x21\n    ORIGIN --> x21\n    x20 --> x21\n    x21 --> x22\n    x22 --> O\n    ZERO --> O\n    EIGHT --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e179c5f4(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ONE)\n    x3 = first(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = fill(I, ONE, x4)\n    x6 = ofcolor(x5, ONE)\n    x7 = urcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(x5, ONE, x8)\n    x10 = ofcolor(x9, ONE)\n    x11 = subgrid(x10, x9)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x12)\n    x15 = astuple(x14, x13)\n    x16 = ulcorner(x10)\n    x17 = crop(x9, x16, x15)\n    x18 = repeat(x17, NINE)\n    x19 = merge(x18)\n    x20 = astuple(x1, x13)\n    x21 = crop(x19, ORIGIN, x20)\n    x22 = hmirror(x21)\n    O = replace(x22, ZERO, EIGHT)\n    return O", "line_count": 25}
{"name": "228f6490", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[rbind]\n    x4[compose]\n    x5[sfilter]\n    x6[first]\n    x7[last]\n    x8[difference]\n    x9[compose]\n    x10[x9]\n    x11[x9]\n    x12[matcher]\n    x13[matcher]\n    x14[extract]\n    x15[extract]\n    x16[ulcorner]\n    x17[ulcorner]\n    x18[ulcorner]\n    x19[ulcorner]\n    x20[subtract]\n    x21[subtract]\n    x22[move]\n    O[move]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ZERO --> x2\n    bordering --> x3\n    I --> x3\n    flip --> x4\n    x3 --> x4\n    x2 --> x5\n    x4 --> x5\n    x5 --> x6\n    x5 --> x7\n    x1 --> x8\n    x2 --> x8\n    normalize --> x9\n    toindices --> x9\n    x6 --> x10\n    x7 --> x11\n    x9 --> x12\n    x10 --> x12\n    x9 --> x13\n    x11 --> x13\n    x8 --> x14\n    x12 --> x14\n    x8 --> x15\n    x13 --> x15\n    x6 --> x16\n    x7 --> x17\n    x14 --> x18\n    x15 --> x19\n    x16 --> x20\n    x18 --> x20\n    x17 --> x21\n    x19 --> x21\n    I --> x22\n    x14 --> x22\n    x20 --> x22\n    x22 --> O\n    x15 --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_228f6490(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O", "line_count": 25}
{"name": "995c5fa3", "graph": "graph TD\n    x1[hsplit]\n    x2[astuple]\n    x3[rbind]\n    x4[compose]\n    x5[compose]\n    x6[matcher]\n    x7[matcher]\n    x8[matcher]\n    x9[matcher]\n    x10[rbind]\n    x11[power]\n    x12[compose]\n    x13[chain]\n    x14[compose]\n    x15[compose]\n    x16[fork]\n    x17[fork]\n    x18[fork]\n    x19[rbind]\n    x20[compose]\n    x21[apply]\n    x22[merge]\n    O[hupscale]\n    I[I]\n    I --> x1\n    THREE --> x1\n    TWO --> x2\n    ONE --> x2\n    ofcolor --> x3\n    ZERO --> x3\n    ulcorner --> x4\n    x3 --> x4\n    size --> x5\n    x3 --> x5\n    x5 --> x6\n    ZERO --> x6\n    x4 --> x7\n    UNITY --> x7\n    x4 --> x8\n    DOWN --> x8\n    x4 --> x9\n    x2 --> x9\n    multiply --> x10\n    THREE --> x10\n    double --> x11\n    TWO --> x11\n    double --> x12\n    x6 --> x12\n    x11 --> x13\n    double --> x13\n    x7 --> x13\n    x10 --> x14\n    x8 --> x14\n    x11 --> x15\n    x9 --> x15\n    add --> x16\n    x12 --> x16\n    x13 --> x16\n    add --> x17\n    x14 --> x17\n    x15 --> x17\n    add --> x18\n    x16 --> x18\n    x17 --> x18\n    canvas --> x19\n    UNITY --> x19\n    x19 --> x20\n    x18 --> x20\n    x20 --> x21\n    x1 --> x21\n    x21 --> x22\n    x22 --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_995c5fa3(I):\n    x1 = hsplit(I, THREE)\n    x2 = astuple(TWO, ONE)\n    x3 = rbind(ofcolor, ZERO)\n    x4 = compose(ulcorner, x3)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = matcher(x4, UNITY)\n    x8 = matcher(x4, DOWN)\n    x9 = matcher(x4, x2)\n    x10 = rbind(multiply, THREE)\n    x11 = power(double, TWO)\n    x12 = compose(double, x6)\n    x13 = chain(x11, double, x7)\n    x14 = compose(x10, x8)\n    x15 = compose(x11, x9)\n    x16 = fork(add, x12, x13)\n    x17 = fork(add, x14, x15)\n    x18 = fork(add, x16, x17)\n    x19 = rbind(canvas, UNITY)\n    x20 = compose(x19, x18)\n    x21 = apply(x20, x1)\n    x22 = merge(x21)\n    O = hupscale(x22, THREE)\n    return O", "line_count": 25}
{"name": "d06dbe63", "graph": "graph TD\n    x1[ofcolor]\n    x2[center]\n    x3[connect]\n    x4[connect]\n    x5[combine]\n    x6[subtract]\n    x7[shift]\n    x8[astuple]\n    x9[interval]\n    x10[lbind]\n    x11[apply]\n    x12[lbind]\n    x13[mapply]\n    x14[fill]\n    x15[rot180]\n    x16[ofcolor]\n    x17[center]\n    x18[subtract]\n    x19[shift]\n    x20[toivec]\n    x21[shift]\n    x22[fill]\n    O[rot180]\n    I[I]\n    I --> x1\n    EIGHT --> x1\n    x1 --> x2\n    ORIGIN --> x3\n    DOWN --> x3\n    ORIGIN --> x4\n    ZERO_BY_TWO --> x4\n    x3 --> x5\n    x4 --> x5\n    x2 --> x6\n    TWO_BY_ZERO --> x6\n    x5 --> x7\n    x6 --> x7\n    NEG_TWO --> x8\n    TWO --> x8\n    ZERO --> x9\n    FIVE --> x9\n    ONE --> x9\n    multiply --> x10\n    x8 --> x10\n    x10 --> x11\n    x9 --> x11\n    shift --> x12\n    x7 --> x12\n    x12 --> x13\n    x11 --> x13\n    I --> x14\n    FIVE --> x14\n    x13 --> x14\n    x14 --> x15\n    x15 --> x16\n    EIGHT --> x16\n    x16 --> x17\n    x17 --> x18\n    x6 --> x18\n    x13 --> x19\n    x18 --> x19\n    NEG_TWO --> x20\n    x19 --> x21\n    x20 --> x21\n    x15 --> x22\n    FIVE --> x22\n    x21 --> x22\n    x22 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d06dbe63(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = center(x1)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = subtract(x2, TWO_BY_ZERO)\n    x7 = shift(x5, x6)\n    x8 = astuple(NEG_TWO, TWO)\n    x9 = interval(ZERO, FIVE, ONE)\n    x10 = lbind(multiply, x8)\n    x11 = apply(x10, x9)\n    x12 = lbind(shift, x7)\n    x13 = mapply(x12, x11)\n    x14 = fill(I, FIVE, x13)\n    x15 = rot180(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = center(x16)\n    x18 = subtract(x17, x6)\n    x19 = shift(x13, x18)\n    x20 = toivec(NEG_TWO)\n    x21 = shift(x19, x20)\n    x22 = fill(x15, FIVE, x21)\n    O = rot180(x22)\n    return O", "line_count": 25}
{"name": "36fdfd69", "graph": "graph TD\n    x1[upscale]\n    x2[objects]\n    x3[colorfilter]\n    x4[fork]\n    x5[compose]\n    x6[product]\n    x7[sfilter]\n    x8[apply]\n    x9[mapply]\n    x10[fill]\n    x11[merge]\n    x12[paint]\n    O[downscale]\n    I[I]\n    I --> x1\n    TWO --> x1\n    x1 --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    x2 --> x3\n    TWO --> x3\n    manhattan --> x4\n    first --> x4\n    last --> x4\n    x4 --> x5\n    x3 --> x6\n    x3 --> x6\n    x6 --> x7\n    x5 --> x7\n    merge --> x8\n    x7 --> x8\n    delta --> x9\n    x8 --> x9\n    x1 --> x10\n    FOUR --> x10\n    x9 --> x10\n    x3 --> x11\n    x10 --> x12\n    x11 --> x12\n    x12 --> O\n    TWO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_36fdfd69(I):\n    x1 = upscale(I, TWO)\n    x2 = objects(x1, T, T, T)\n    x3 = colorfilter(x2, TWO)\n    x4 = fork(manhattan, first, last)\n    x5 = compose(lbind(greater, FIVE), x4)\n    x6 = product(x3, x3)\n    x7 = sfilter(x6, x5)\n    x8 = apply(merge, x7)\n    x9 = mapply(delta, x8)\n    x10 = fill(x1, FOUR, x9)\n    x11 = merge(x3)\n    x12 = paint(x10, x11)\n    O = downscale(x12, TWO)\n    return O", "line_count": 15}
{"name": "0a938d79", "graph": "graph TD\n    x1[portrait]\n    x2[branch]\n    x3[x2]\n    x4[fgpartition]\n    x5[merge]\n    x6[chain]\n    x7[x6]\n    x8[compose]\n    x9[lbind]\n    x10[rbind]\n    x11[width]\n    x12[rbind]\n    x13[chain]\n    x14[fork]\n    x15[mapply]\n    x16[paint]\n    O[x2]\n    I[I]\n    I --> x1\n    x1 --> x2\n    dmirror --> x2\n    identity --> x2\n    I --> x3\n    x3 --> x4\n    x4 --> x5\n    double --> x6\n    decrement --> x6\n    width --> x6\n    x5 --> x7\n    vfrontier --> x8\n    tojvec --> x8\n    mapply --> x9\n    x8 --> x9\n    interval --> x10\n    x7 --> x10\n    x3 --> x11\n    x10 --> x12\n    x11 --> x12\n    x9 --> x13\n    x12 --> x13\n    leftmost --> x13\n    recolor --> x14\n    color --> x14\n    x13 --> x14\n    x14 --> x15\n    x4 --> x15\n    x3 --> x16\n    x15 --> x16\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0a938d79(I):\n    x1 = portrait(I)\n    x2 = branch(x1, dmirror, identity)\n    x3 = x2(I)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = chain(double, decrement, width)\n    x7 = x6(x5)\n    x8 = compose(vfrontier, tojvec)\n    x9 = lbind(mapply, x8)\n    x10 = rbind(interval, x7)\n    x11 = width(x3)\n    x12 = rbind(x10, x11)\n    x13 = chain(x9, x12, leftmost)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x4)\n    x16 = paint(x3, x15)\n    O = x2(x16)\n    return O", "line_count": 19}
{"name": "045e512c", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[remove]\n    x4[lbind]\n    x5[lbind]\n    x6[double]\n    x7[interval]\n    x8[rbind]\n    x9[lbind]\n    x10[lbind]\n    x11[chain]\n    x12[compose]\n    x13[fork]\n    x14[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x1 --> x3\n    shift --> x4\n    x2 --> x4\n    mapply --> x5\n    x4 --> x5\n    TEN --> x6\n    FOUR --> x7\n    x6 --> x7\n    FOUR --> x7\n    apply --> x8\n    x7 --> x8\n    position --> x9\n    x2 --> x9\n    rbind --> x10\n    multiply --> x10\n    x8 --> x11\n    x10 --> x11\n    x9 --> x11\n    x5 --> x12\n    x11 --> x12\n    recolor --> x13\n    color --> x13\n    x12 --> x13\n    x13 --> x14\n    x3 --> x14\n    I --> O\n    x14 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_045e512c(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O", "line_count": 17}
{"name": "82819916", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[remove]\n    x4[normalize]\n    x5[compose]\n    x6[rbind]\n    x7[compose]\n    x8[fork]\n    x9[x7]\n    x10[matcher]\n    x11[sfilter]\n    x12[difference]\n    x13[compose]\n    x14[lbind]\n    x15[lbind]\n    x16[compose]\n    x17[compose]\n    x18[fork]\n    x19[fork]\n    x20[fork]\n    x21[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x1 --> x3\n    x2 --> x4\n    last --> x5\n    last --> x5\n    argmin --> x6\n    x5 --> x6\n    first --> x7\n    x6 --> x7\n    other --> x8\n    palette --> x8\n    x7 --> x8\n    x4 --> x9\n    first --> x10\n    x9 --> x10\n    x4 --> x11\n    x10 --> x11\n    x4 --> x12\n    x11 --> x12\n    toivec --> x13\n    uppermost --> x13\n    shift --> x14\n    x11 --> x14\n    shift --> x15\n    x12 --> x15\n    x14 --> x16\n    x13 --> x16\n    x15 --> x17\n    x13 --> x17\n    recolor --> x18\n    x7 --> x18\n    x16 --> x18\n    recolor --> x19\n    x8 --> x19\n    x17 --> x19\n    combine --> x20\n    x18 --> x20\n    x19 --> x20\n    x20 --> x21\n    x3 --> x21\n    I --> O\n    x21 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_82819916(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O", "line_count": 24}
{"name": "99fa7670", "graph": "graph TD\n    x1[shape]\n    x2[objects]\n    x3[rbind]\n    x4[compose]\n    x5[fork]\n    x6[mapply]\n    x7[paint]\n    x8[add]\n    x9[initset]\n    x10[recolor]\n    x11[objects]\n    x12[insert]\n    x13[order]\n    x14[first]\n    x15[remove]\n    x16[remove]\n    x17[compose]\n    x18[compose]\n    x19[fork]\n    x20[compose]\n    x21[fork]\n    x22[pair]\n    x23[mapply]\n    O[underpaint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    shoot --> x3\n    RIGHT --> x3\n    x3 --> x4\n    center --> x4\n    recolor --> x5\n    color --> x5\n    x4 --> x5\n    x5 --> x6\n    x2 --> x6\n    I --> x7\n    x6 --> x7\n    x1 --> x8\n    DOWN_LEFT --> x8\n    x8 --> x9\n    ZERO --> x10\n    x9 --> x10\n    x7 --> x11\n    T --> x11\n    F --> x11\n    T --> x11\n    x10 --> x12\n    x11 --> x12\n    x12 --> x13\n    uppermost --> x13\n    x13 --> x14\n    x10 --> x15\n    x13 --> x15\n    x14 --> x16\n    x13 --> x16\n    lrcorner --> x17\n    first --> x17\n    lrcorner --> x18\n    last --> x18\n    connect --> x19\n    x17 --> x19\n    x18 --> x19\n    color --> x20\n    first --> x20\n    recolor --> x21\n    x20 --> x21\n    x19 --> x21\n    x15 --> x22\n    x16 --> x22\n    x21 --> x23\n    x22 --> x23\n    x7 --> O\n    x23 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_99fa7670(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = recolor(ZERO, x9)\n    x11 = objects(x7, T, F, T)\n    x12 = insert(x10, x11)\n    x13 = order(x12, uppermost)\n    x14 = first(x13)\n    x15 = remove(x10, x13)\n    x16 = remove(x14, x13)\n    x17 = compose(lrcorner, first)\n    x18 = compose(lrcorner, last)\n    x19 = fork(connect, x17, x18)\n    x20 = compose(color, first)\n    x21 = fork(recolor, x20, x19)\n    x22 = pair(x15, x16)\n    x23 = mapply(x21, x22)\n    O = underpaint(x7, x23)\n    return O", "line_count": 26}
{"name": "72322fa7", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[sfilter]\n    x4[difference]\n    x5[lbind]\n    x6[compose]\n    x7[fork]\n    x8[fork]\n    x9[lbind]\n    x10[compose]\n    x11[compose]\n    x12[compose]\n    x13[fork]\n    x14[lbind]\n    x15[compose]\n    x16[fork]\n    x17[lbind]\n    x18[compose]\n    x19[fork]\n    x20[fork]\n    x21[mapply]\n    x22[mapply]\n    x23[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    numcolors --> x2\n    ONE --> x2\n    x1 --> x3\n    x2 --> x3\n    x1 --> x4\n    x3 --> x4\n    matcher --> x5\n    first --> x5\n    x5 --> x6\n    mostcolor --> x6\n    sfilter --> x7\n    identity --> x7\n    x6 --> x7\n    difference --> x8\n    identity --> x8\n    x7 --> x8\n    occurrences --> x9\n    I --> x9\n    x9 --> x10\n    x7 --> x10\n    x9 --> x11\n    x8 --> x11\n    ulcorner --> x12\n    x8 --> x12\n    subtract --> x13\n    ulcorner --> x13\n    x12 --> x13\n    rbind --> x14\n    add --> x14\n    x14 --> x15\n    x13 --> x15\n    apply --> x16\n    x15 --> x16\n    x11 --> x16\n    lbind --> x17\n    shift --> x17\n    x17 --> x18\n    normalize --> x18\n    mapply --> x19\n    x18 --> x19\n    x10 --> x19\n    mapply --> x20\n    x18 --> x20\n    x16 --> x20\n    x19 --> x21\n    x4 --> x21\n    x20 --> x22\n    x4 --> x22\n    I --> x23\n    x21 --> x23\n    x23 --> O\n    x22 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_72322fa7(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = lbind(matcher, first)\n    x6 = compose(x5, mostcolor)\n    x7 = fork(sfilter, identity, x6)\n    x8 = fork(difference, identity, x7)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x7)\n    x11 = compose(x9, x8)\n    x12 = compose(ulcorner, x8)\n    x13 = fork(subtract, ulcorner, x12)\n    x14 = lbind(rbind, add)\n    x15 = compose(x14, x13)\n    x16 = fork(apply, x15, x11)\n    x17 = lbind(lbind, shift)\n    x18 = compose(x17, normalize)\n    x19 = fork(mapply, x18, x10)\n    x20 = fork(mapply, x18, x16)\n    x21 = mapply(x19, x4)\n    x22 = mapply(x20, x4)\n    x23 = paint(I, x21)\n    O = paint(x23, x22)\n    return O", "line_count": 26}
{"name": "855e0971", "graph": "graph TD\n    x1[rot90]\n    x2[frontiers]\n    x3[sfilter]\n    x4[size]\n    x6[positive]\n    x7[branch]\n    x8[x7]\n    x9[rbind]\n    x10[matcher]\n    x11[compose]\n    x12[partition]\n    x13[sfilter]\n    x14[rbind]\n    x15[lbind]\n    x16[chain]\n    x17[fork]\n    x18[fork]\n    x19[mapply]\n    x20[fill]\n    O[x7]\n    I[I]\n    I --> x1\n    I --> x2\n    x2 --> x3\n    hline --> x3\n    x3 --> x4\n    x4 --> x6\n    x6 --> x7\n    identity --> x7\n    dmirror --> x7\n    I --> x8\n    subgrid --> x9\n    x8 --> x9\n    color --> x10\n    ZERO --> x10\n    flip --> x11\n    x10 --> x11\n    x8 --> x12\n    x12 --> x13\n    x11 --> x13\n    ofcolor --> x14\n    ZERO --> x14\n    mapply --> x15\n    vfrontier --> x15\n    x15 --> x16\n    x14 --> x16\n    x9 --> x16\n    shift --> x17\n    x16 --> x17\n    ulcorner --> x17\n    intersection --> x18\n    toindices --> x18\n    x17 --> x18\n    x18 --> x19\n    x13 --> x19\n    x8 --> x20\n    ZERO --> x20\n    x19 --> x20\n    x20 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_855e0971(I):\n    x1 = rot90(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x6 = positive(x4)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = rbind(subgrid, x8)\n    x10 = matcher(color, ZERO)\n    x11 = compose(flip, x10)\n    x12 = partition(x8)\n    x13 = sfilter(x12, x11)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = lbind(mapply, vfrontier)\n    x16 = chain(x15, x14, x9)\n    x17 = fork(shift, x16, ulcorner)\n    x18 = fork(intersection, toindices, x17)\n    x19 = mapply(x18, x13)\n    x20 = fill(x8, ZERO, x19)\n    O = x7(x20)\n    return O", "line_count": 22}
{"name": "a78176bb", "graph": "graph TD\n    x1[palette]\n    x2[objects]\n    x3[remove]\n    x4[other]\n    x5[colorfilter]\n    x6[lbind]\n    x7[compose]\n    x8[matcher]\n    x9[sfilter]\n    x10[difference]\n    x11[apply]\n    x12[apply]\n    x13[rbind]\n    x14[rbind]\n    x15[apply]\n    x16[apply]\n    x17[rbind]\n    x18[rbind]\n    x19[fork]\n    x20[mapply]\n    x21[mapply]\n    x22[combine]\n    x23[fill]\n    O[replace]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    ZERO --> x3\n    x1 --> x3\n    x3 --> x4\n    FIVE --> x4\n    x2 --> x5\n    FIVE --> x5\n    index --> x6\n    I --> x6\n    x6 --> x7\n    urcorner --> x7\n    x7 --> x8\n    FIVE --> x8\n    x5 --> x9\n    x8 --> x9\n    x5 --> x10\n    x9 --> x10\n    urcorner --> x11\n    x9 --> x11\n    llcorner --> x12\n    x10 --> x12\n    add --> x13\n    UP_RIGHT --> x13\n    add --> x14\n    DOWN_LEFT --> x14\n    x13 --> x15\n    x11 --> x15\n    x14 --> x16\n    x12 --> x16\n    shoot --> x17\n    UNITY --> x17\n    shoot --> x18\n    NEG_UNITY --> x18\n    combine --> x19\n    x17 --> x19\n    x18 --> x19\n    x19 --> x20\n    x15 --> x20\n    x19 --> x21\n    x16 --> x21\n    x20 --> x22\n    x21 --> x22\n    I --> x23\n    x4 --> x23\n    x22 --> x23\n    x23 --> O\n    FIVE --> O\n    ZERO --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a78176bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O", "line_count": 26}
{"name": "952a094c", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[argmax]\n    x4[outbox]\n    x5[corners]\n    x6[lbind]\n    x7[lbind]\n    x8[chain]\n    x9[compose]\n    x10[fork]\n    x11[apply]\n    x12[merge]\n    x13[cover]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    ONE --> x2\n    x1 --> x3\n    size --> x3\n    x3 --> x4\n    x4 --> x5\n    rbind --> x6\n    manhattan --> x6\n    argmax --> x7\n    x2 --> x7\n    x7 --> x8\n    x6 --> x8\n    initset --> x8\n    color --> x9\n    x8 --> x9\n    astuple --> x10\n    x9 --> x10\n    identity --> x10\n    x10 --> x11\n    x5 --> x11\n    x2 --> x12\n    I --> x13\n    x12 --> x13\n    x13 --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_952a094c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x1, size)\n    x4 = outbox(x3)\n    x5 = corners(x4)\n    x6 = lbind(rbind, manhattan)\n    x7 = lbind(argmax, x2)\n    x8 = chain(x7, x6, initset)\n    x9 = compose(color, x8)\n    x10 = fork(astuple, x9, identity)\n    x11 = apply(x10, x5)\n    x12 = merge(x2)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O", "line_count": 16}
{"name": "6d58a25d", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[remove]\n    x4[merge]\n    x5[color]\n    x6[uppermost]\n    x7[rbind]\n    x8[compose]\n    x9[rbind]\n    x10[fork]\n    x11[sfilter]\n    x12[increment]\n    x13[rbind]\n    x14[compose]\n    x15[rbind]\n    x16[chain]\n    x17[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    x2 --> x6\n    greater --> x7\n    x6 --> x7\n    x7 --> x8\n    uppermost --> x8\n    vmatching --> x9\n    x2 --> x9\n    both --> x10\n    x9 --> x10\n    x8 --> x10\n    x3 --> x11\n    x10 --> x11\n    x6 --> x12\n    greater --> x13\n    x12 --> x13\n    x13 --> x14\n    first --> x14\n    sfilter --> x15\n    x14 --> x15\n    x15 --> x16\n    vfrontier --> x16\n    center --> x16\n    x16 --> x17\n    x11 --> x17\n    I --> O\n    x5 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6d58a25d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O", "line_count": 20}
{"name": "6aa20dc0", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[normalize]\n    x4[lbind]\n    x5[compose]\n    x6[fork]\n    x7[fork]\n    x8[lbind]\n    x9[interval]\n    x10[apply]\n    x11[initset]\n    x12[insert]\n    x13[insert]\n    x14[insert]\n    x15[insert]\n    x16[fork]\n    x17[lbind]\n    x18[lbind]\n    x19[compose]\n    x20[product]\n    x21[apply]\n    x22[rapply]\n    x23[fork]\n    x24[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    x2 --> x3\n    matcher --> x4\n    first --> x4\n    x4 --> x5\n    mostcolor --> x5\n    sfilter --> x6\n    identity --> x6\n    x5 --> x6\n    difference --> x7\n    identity --> x7\n    x6 --> x7\n    rbind --> x8\n    upscale --> x8\n    ONE --> x9\n    FOUR --> x9\n    ONE --> x9\n    x8 --> x10\n    x9 --> x10\n    identity --> x11\n    vmirror --> x12\n    x11 --> x12\n    hmirror --> x13\n    x12 --> x13\n    cmirror --> x14\n    x13 --> x14\n    dmirror --> x15\n    x14 --> x15\n    compose --> x16\n    first --> x16\n    last --> x16\n    occurrences --> x17\n    I --> x17\n    lbind --> x18\n    shift --> x18\n    x17 --> x19\n    x7 --> x19\n    x15 --> x20\n    x10 --> x20\n    x16 --> x21\n    x20 --> x21\n    x21 --> x22\n    x3 --> x22\n    mapply --> x23\n    x18 --> x23\n    x19 --> x23\n    x23 --> x24\n    x22 --> x24\n    I --> O\n    x24 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6aa20dc0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O", "line_count": 27}
{"name": "e6721834", "graph": "graph TD\n    x1[portrait]\n    x2[branch]\n    x3[x2]\n    x4[order]\n    x5[first]\n    x6[last]\n    x7[objects]\n    x8[merge]\n    x9[mostcolor]\n    x10[matcher]\n    x11[compose]\n    x12[rbind]\n    x13[lbind]\n    x14[compose]\n    x15[chain]\n    x16[sfilter]\n    x17[chain]\n    x18[compose]\n    x19[fork]\n    x20[fork]\n    x21[apply]\n    x22[compose]\n    x23[chain]\n    x24[mfilter]\n    O[paint]\n    I[I]\n    I --> x1\n    x1 --> x2\n    vsplit --> x2\n    hsplit --> x2\n    I --> x3\n    TWO --> x3\n    x3 --> x4\n    numcolors --> x4\n    x4 --> x5\n    x4 --> x6\n    x6 --> x7\n    F --> x7\n    F --> x7\n    T --> x7\n    x7 --> x8\n    x8 --> x9\n    first --> x10\n    x9 --> x10\n    flip --> x11\n    x10 --> x11\n    sfilter --> x12\n    x11 --> x12\n    occurrences --> x13\n    x5 --> x13\n    x13 --> x14\n    x12 --> x14\n    positive --> x15\n    size --> x15\n    x14 --> x15\n    x7 --> x16\n    x15 --> x16\n    first --> x17\n    x13 --> x17\n    x12 --> x17\n    ulcorner --> x18\n    x12 --> x18\n    subtract --> x19\n    x17 --> x19\n    x18 --> x19\n    shift --> x20\n    identity --> x20\n    x19 --> x20\n    x20 --> x21\n    x16 --> x21\n    decrement --> x22\n    width --> x22\n    positive --> x23\n    decrement --> x23\n    x22 --> x23\n    x21 --> x24\n    x23 --> x24\n    x5 --> O\n    x24 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_e6721834(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O", "line_count": 27}
{"name": "447fd412", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[normalize]\n    x4[lbind]\n    x5[compose]\n    x6[fork]\n    x7[fork]\n    x8[lbind]\n    x9[interval]\n    x10[apply]\n    x11[lbind]\n    x12[compose]\n    x13[fork]\n    x14[lbind]\n    x15[lbind]\n    x16[lbind]\n    x17[lbind]\n    x18[chain]\n    x19[chain]\n    x20[fork]\n    x21[compose]\n    x22[fork]\n    x23[rapply]\n    x24[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    x2 --> x3\n    matcher --> x4\n    first --> x4\n    x4 --> x5\n    mostcolor --> x5\n    sfilter --> x6\n    identity --> x6\n    x5 --> x6\n    difference --> x7\n    identity --> x7\n    x6 --> x7\n    rbind --> x8\n    upscale --> x8\n    ONE --> x9\n    FOUR --> x9\n    ONE --> x9\n    x8 --> x10\n    x9 --> x10\n    recolor --> x11\n    ZERO --> x11\n    x11 --> x12\n    outbox --> x12\n    combine --> x13\n    identity --> x13\n    x12 --> x13\n    occurrences --> x14\n    I --> x14\n    rbind --> x15\n    subtract --> x15\n    apply --> x16\n    increment --> x16\n    lbind --> x17\n    shift --> x17\n    x15 --> x18\n    ulcorner --> x18\n    x7 --> x18\n    x14 --> x19\n    x13 --> x19\n    x7 --> x19\n    apply --> x20\n    x18 --> x20\n    x19 --> x20\n    x16 --> x21\n    x20 --> x21\n    mapply --> x22\n    x17 --> x22\n    x21 --> x22\n    x10 --> x23\n    x3 --> x23\n    x22 --> x24\n    x23 --> x24\n    I --> O\n    x24 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_447fd412(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O", "line_count": 27}
{"name": "2bcee788", "graph": "graph TD\n    x1[mostcolor]\n    x2[objects]\n    x3[replace]\n    x4[argmax]\n    x5[argmin]\n    x6[position]\n    x7[first]\n    x8[last]\n    x9[subgrid]\n    x10[hline]\n    x11[hmirror]\n    x12[vmirror]\n    x13[branch]\n    x14[branch]\n    x15[branch]\n    x16[asobject]\n    x17[matcher]\n    x18[compose]\n    x19[sfilter]\n    x20[ulcorner]\n    x21[shape]\n    x22[astuple]\n    x23[multiply]\n    x24[add]\n    x25[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    I --> x3\n    x1 --> x3\n    THREE --> x3\n    x2 --> x4\n    size --> x4\n    x2 --> x5\n    size --> x5\n    x4 --> x6\n    x5 --> x6\n    x6 --> x7\n    x6 --> x8\n    x4 --> x9\n    x3 --> x9\n    x5 --> x10\n    x9 --> x11\n    x9 --> x12\n    x10 --> x13\n    x11 --> x13\n    x12 --> x13\n    x10 --> x14\n    x7 --> x14\n    ZERO --> x14\n    x10 --> x15\n    ZERO --> x15\n    x8 --> x15\n    x13 --> x16\n    first --> x17\n    THREE --> x17\n    flip --> x18\n    x17 --> x18\n    x16 --> x19\n    x18 --> x19\n    x4 --> x20\n    x4 --> x21\n    x14 --> x22\n    x15 --> x22\n    x21 --> x23\n    x22 --> x23\n    x20 --> x24\n    x23 --> x24\n    x19 --> x25\n    x24 --> x25\n    x3 --> O\n    x25 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2bcee788(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, THREE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x16 = asobject(x13)\n    x17 = matcher(first, THREE)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = ulcorner(x4)\n    x21 = shape(x4)\n    x22 = astuple(x14, x15)\n    x23 = multiply(x21, x22)\n    x24 = add(x20, x23)\n    x25 = shift(x19, x24)\n    O = paint(x3, x25)\n    return O", "line_count": 28}
{"name": "776ffc46", "graph": "graph TD\n    x1[objects]\n    x2[colorfilter]\n    x3[fork]\n    x4[extract]\n    x5[inbox]\n    x6[subgrid]\n    x7[asobject]\n    x8[matcher]\n    x9[compose]\n    x10[sfilter]\n    x11[normalize]\n    x12[toindices]\n    x13[compose]\n    x14[matcher]\n    x15[mfilter]\n    x16[color]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    FIVE --> x2\n    equality --> x3\n    toindices --> x3\n    box --> x3\n    x2 --> x4\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    I --> x6\n    x6 --> x7\n    first --> x8\n    ZERO --> x8\n    flip --> x9\n    x8 --> x9\n    x7 --> x10\n    x9 --> x10\n    x10 --> x11\n    x11 --> x12\n    toindices --> x13\n    normalize --> x13\n    x13 --> x14\n    x12 --> x14\n    x1 --> x15\n    x14 --> x15\n    x11 --> x16\n    I --> O\n    x16 --> O\n    x15 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_776ffc46(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = fork(equality, toindices, box)\n    x4 = extract(x2, x3)\n    x5 = inbox(x4)\n    x6 = subgrid(x5, I)\n    x7 = asobject(x6)\n    x8 = matcher(first, ZERO)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = mfilter(x1, x14)\n    x16 = color(x11)\n    O = fill(I, x16, x15)\n    return O", "line_count": 19}
{"name": "f35d900a", "graph": "graph TD\n    x1[objects]\n    x2[palette]\n    x3[remove]\n    x4[lbind]\n    x5[compose]\n    x6[fork]\n    x7[mapply]\n    x8[mapply]\n    x9[box]\n    x10[difference]\n    x11[lbind]\n    x12[rbind]\n    x13[lbind]\n    x14[chain]\n    x15[chain]\n    x16[fork]\n    x17[compose]\n    x18[sfilter]\n    x19[paint]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    ZERO --> x3\n    x2 --> x3\n    other --> x4\n    x3 --> x4\n    x4 --> x5\n    color --> x5\n    recolor --> x6\n    x5 --> x6\n    outbox --> x6\n    x6 --> x7\n    x1 --> x7\n    toindices --> x8\n    x1 --> x8\n    x8 --> x9\n    x9 --> x10\n    x8 --> x10\n    argmin --> x11\n    x8 --> x11\n    compose --> x12\n    initset --> x12\n    rbind --> x13\n    manhattan --> x13\n    x12 --> x14\n    x13 --> x14\n    initset --> x14\n    initset --> x15\n    x11 --> x15\n    x14 --> x15\n    manhattan --> x16\n    initset --> x16\n    x15 --> x16\n    even --> x17\n    x16 --> x17\n    x10 --> x18\n    x17 --> x18\n    I --> x19\n    x7 --> x19\n    x19 --> O\n    FIVE --> O\n    x18 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f35d900a(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O", "line_count": 22}
{"name": "0dfd9992", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[partition]\n    x4[colorfilter]\n    x5[difference]\n    x6[merge]\n    x7[astuple]\n    x8[astuple]\n    x9[decrement]\n    x10[decrement]\n    x11[toivec]\n    x12[tojvec]\n    x13[crop]\n    x14[crop]\n    x15[asobject]\n    x16[asobject]\n    x17[vperiod]\n    x18[hperiod]\n    x19[astuple]\n    x20[lbind]\n    x21[neighbors]\n    x22[mapply]\n    x23[apply]\n    x24[lbind]\n    x25[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x3 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x7\n    ONE --> x7\n    ONE --> x8\n    x2 --> x8\n    x1 --> x9\n    x2 --> x10\n    x10 --> x11\n    x9 --> x12\n    I --> x13\n    x11 --> x13\n    x8 --> x13\n    I --> x14\n    x12 --> x14\n    x7 --> x14\n    x14 --> x15\n    x13 --> x16\n    x15 --> x17\n    x16 --> x18\n    x17 --> x19\n    x18 --> x19\n    multiply --> x20\n    x19 --> x20\n    ORIGIN --> x21\n    neighbors --> x22\n    x21 --> x22\n    x20 --> x23\n    x22 --> x23\n    shift --> x24\n    x6 --> x24\n    x24 --> x25\n    x23 --> x25\n    I --> O\n    x25 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0dfd9992(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O", "line_count": 28}
{"name": "29ec7d0e", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[partition]\n    x4[colorfilter]\n    x5[difference]\n    x6[merge]\n    x7[astuple]\n    x8[astuple]\n    x9[decrement]\n    x10[decrement]\n    x11[toivec]\n    x12[tojvec]\n    x13[crop]\n    x14[crop]\n    x15[asobject]\n    x16[asobject]\n    x17[vperiod]\n    x18[hperiod]\n    x19[astuple]\n    x20[lbind]\n    x21[neighbors]\n    x22[mapply]\n    x23[apply]\n    x24[lbind]\n    x25[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x3 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x7\n    ONE --> x7\n    ONE --> x8\n    x2 --> x8\n    x1 --> x9\n    x2 --> x10\n    x10 --> x11\n    x9 --> x12\n    I --> x13\n    x11 --> x13\n    x8 --> x13\n    I --> x14\n    x12 --> x14\n    x7 --> x14\n    x14 --> x15\n    x13 --> x16\n    x15 --> x17\n    x16 --> x18\n    x17 --> x19\n    x18 --> x19\n    multiply --> x20\n    x19 --> x20\n    ORIGIN --> x21\n    neighbors --> x22\n    x21 --> x22\n    x20 --> x23\n    x22 --> x23\n    shift --> x24\n    x6 --> x24\n    x24 --> x25\n    x23 --> x25\n    I --> O\n    x25 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_29ec7d0e(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O", "line_count": 28}
{"name": "36d67576", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[astuple]\n    x4[rbind]\n    x5[compose]\n    x6[rbind]\n    x7[lbind]\n    x8[lbind]\n    x9[lbind]\n    x10[compose]\n    x11[chain]\n    x12[chain]\n    x13[fork]\n    x14[compose]\n    x15[fork]\n    x16[astuple]\n    x17[astuple]\n    x18[combine]\n    x19[product]\n    x20[fork]\n    x21[apply]\n    x22[totuple]\n    x23[combine]\n    x24[rapply]\n    x25[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    TWO --> x3\n    FOUR --> x3\n    contained --> x4\n    x3 --> x4\n    x4 --> x5\n    first --> x5\n    sfilter --> x6\n    x5 --> x6\n    rbind --> x7\n    subtract --> x7\n    occurrences --> x8\n    I --> x8\n    lbind --> x9\n    shift --> x9\n    x7 --> x10\n    ulcorner --> x10\n    x10 --> x11\n    x6 --> x11\n    normalize --> x11\n    x8 --> x12\n    x6 --> x12\n    normalize --> x12\n    apply --> x13\n    x11 --> x13\n    x12 --> x13\n    x9 --> x14\n    normalize --> x14\n    mapply --> x15\n    x14 --> x15\n    x13 --> x15\n    cmirror --> x16\n    dmirror --> x16\n    hmirror --> x17\n    vmirror --> x17\n    x16 --> x18\n    x17 --> x18\n    x18 --> x19\n    x18 --> x19\n    compose --> x20\n    first --> x20\n    last --> x20\n    x20 --> x21\n    x19 --> x21\n    x21 --> x22\n    x18 --> x23\n    x22 --> x23\n    x23 --> x24\n    x2 --> x24\n    x15 --> x25\n    x24 --> x25\n    I --> O\n    x25 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_36d67576(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O", "line_count": 28}
{"name": "98cf29f8", "graph": "graph TD\n    x1[fgpartition]\n    x2[fork]\n    x3[fork]\n    x4[extract]\n    x5[other]\n    x6[color]\n    x7[rbind]\n    x8[rbind]\n    x9[rbind]\n    x10[chain]\n    x11[chain]\n    x12[sfilter]\n    x13[outbox]\n    x14[backdrop]\n    x15[cover]\n    x16[gravitate]\n    x17[shift]\n    O[fill]\n    I[I]\n    I --> x1\n    multiply --> x2\n    height --> x2\n    width --> x2\n    equality --> x3\n    size --> x3\n    x2 --> x3\n    x1 --> x4\n    x3 --> x4\n    x1 --> x5\n    x4 --> x5\n    x5 --> x6\n    greater --> x7\n    THREE --> x7\n    toobject --> x8\n    I --> x8\n    colorcount --> x9\n    x6 --> x9\n    x8 --> x10\n    ineighbors --> x10\n    last --> x10\n    x7 --> x11\n    x9 --> x11\n    x10 --> x11\n    x5 --> x12\n    x11 --> x12\n    x12 --> x13\n    x13 --> x14\n    I --> x15\n    x5 --> x15\n    x14 --> x16\n    x4 --> x16\n    x14 --> x17\n    x16 --> x17\n    x15 --> O\n    x6 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_98cf29f8(I):\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = rbind(colorcount, x6)\n    x10 = chain(x8, ineighbors, last)\n    x11 = chain(x7, x9, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x4)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O", "line_count": 20}
{"name": "469497ad", "graph": "graph TD\n    x1[numcolors]\n    x2[decrement]\n    x3[upscale]\n    x4[objects]\n    x5[argmin]\n    x6[ulcorner]\n    x7[llcorner]\n    x8[shoot]\n    x9[shoot]\n    x10[shoot]\n    x11[shoot]\n    x12[combine]\n    x13[combine]\n    x14[combine]\n    x15[underfill]\n    x16[objects]\n    x17[argmax]\n    O[paint]\n    I[I]\n    I --> x1\n    x1 --> x2\n    I --> x3\n    x2 --> x3\n    x3 --> x4\n    F --> x4\n    F --> x4\n    T --> x4\n    x4 --> x5\n    size --> x5\n    x5 --> x6\n    x5 --> x7\n    x6 --> x8\n    NEG_UNITY --> x8\n    x6 --> x9\n    UNITY --> x9\n    x7 --> x10\n    DOWN_LEFT --> x10\n    x7 --> x11\n    UP_RIGHT --> x11\n    x8 --> x12\n    x9 --> x12\n    x10 --> x13\n    x11 --> x13\n    x12 --> x14\n    x13 --> x14\n    x3 --> x15\n    TWO --> x15\n    x14 --> x15\n    x15 --> x16\n    T --> x16\n    F --> x16\n    T --> x16\n    x16 --> x17\n    lrcorner --> x17\n    x15 --> O\n    x17 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_469497ad(I):\n    x1 = numcolors(I)\n    x2 = decrement(x1)\n    x3 = upscale(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = ulcorner(x5)\n    x7 = llcorner(x5)\n    x8 = shoot(x6, NEG_UNITY)\n    x9 = shoot(x6, UNITY)\n    x10 = shoot(x7, DOWN_LEFT)\n    x11 = shoot(x7, UP_RIGHT)\n    x12 = combine(x8, x9)\n    x13 = combine(x10, x11)\n    x14 = combine(x12, x13)\n    x15 = underfill(x3, TWO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = argmax(x16, lrcorner)\n    O = paint(x15, x17)\n    return O", "line_count": 20}
{"name": "39e1d7f9", "graph": "graph TD\n    x1[fgpartition]\n    x2[objects]\n    x3[order]\n    x4[last]\n    x5[remove]\n    x6[last]\n    x7[color]\n    x8[colorfilter]\n    x9[power]\n    x10[rbind]\n    x11[chain]\n    x12[argmax]\n    x13[ulcorner]\n    x14[shape]\n    x15[subtract]\n    x16[decrement]\n    x17[multiply]\n    x18[add]\n    x19[crop]\n    x20[asobject]\n    x21[apply]\n    x22[increment]\n    x23[rbind]\n    x24[apply]\n    x25[lbind]\n    x26[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    x1 --> x3\n    height --> x3\n    x3 --> x4\n    x4 --> x5\n    x3 --> x5\n    x5 --> x6\n    x6 --> x7\n    x2 --> x8\n    x7 --> x8\n    outbox --> x9\n    TWO --> x9\n    toobject --> x10\n    I --> x10\n    numcolors --> x11\n    x10 --> x11\n    x9 --> x11\n    x8 --> x12\n    x11 --> x12\n    x12 --> x13\n    x12 --> x14\n    x13 --> x15\n    x14 --> x15\n    x15 --> x16\n    x14 --> x17\n    THREE --> x17\n    x17 --> x18\n    TWO_BY_TWO --> x18\n    I --> x19\n    x16 --> x19\n    x18 --> x19\n    x19 --> x20\n    ulcorner --> x21\n    x8 --> x21\n    x14 --> x22\n    subtract --> x23\n    x22 --> x23\n    x23 --> x24\n    x21 --> x24\n    shift --> x25\n    x20 --> x25\n    x25 --> x26\n    x24 --> x26\n    I --> O\n    x26 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_39e1d7f9(I):\n    x1 = fgpartition(I)\n    x2 = objects(I, T, F, T)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = chain(numcolors, x10, x9)\n    x12 = argmax(x8, x11)\n    x13 = ulcorner(x12)\n    x14 = shape(x12)\n    x15 = subtract(x13, x14)\n    x16 = decrement(x15)\n    x17 = multiply(x14, THREE)\n    x18 = add(x17, TWO_BY_TWO)\n    x19 = crop(I, x16, x18)\n    x20 = asobject(x19)\n    x21 = apply(ulcorner, x8)\n    x22 = increment(x14)\n    x23 = rbind(subtract, x22)\n    x24 = apply(x23, x21)\n    x25 = lbind(shift, x20)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O", "line_count": 29}
{"name": "484b58aa", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[partition]\n    x4[colorfilter]\n    x5[difference]\n    x6[merge]\n    x7[astuple]\n    x8[astuple]\n    x9[power]\n    x10[x9]\n    x11[x9]\n    x12[toivec]\n    x13[tojvec]\n    x14[crop]\n    x15[crop]\n    x16[asobject]\n    x17[asobject]\n    x18[vperiod]\n    x19[hperiod]\n    x20[astuple]\n    x21[lbind]\n    x22[neighbors]\n    x23[mapply]\n    x24[apply]\n    x25[lbind]\n    x26[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x3 --> x4\n    ZERO --> x4\n    x3 --> x5\n    x4 --> x5\n    x5 --> x6\n    x1 --> x7\n    TWO --> x7\n    TWO --> x8\n    x2 --> x8\n    decrement --> x9\n    TWO --> x9\n    x1 --> x10\n    x2 --> x11\n    x11 --> x12\n    x10 --> x13\n    I --> x14\n    x12 --> x14\n    x8 --> x14\n    I --> x15\n    x13 --> x15\n    x7 --> x15\n    x15 --> x16\n    x14 --> x17\n    x16 --> x18\n    x17 --> x19\n    x18 --> x20\n    x19 --> x20\n    multiply --> x21\n    x20 --> x21\n    ORIGIN --> x22\n    neighbors --> x23\n    x22 --> x23\n    x21 --> x24\n    x23 --> x24\n    shift --> x25\n    x6 --> x25\n    x25 --> x26\n    x24 --> x26\n    I --> O\n    x26 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_484b58aa(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O", "line_count": 29}
{"name": "3befdf3e", "graph": "graph TD\n    x1[objects]\n    x2[leastcolor]\n    x3[palette]\n    x4[remove]\n    x5[other]\n    x6[switch]\n    x7[compose]\n    x8[lbind]\n    x9[compose]\n    x10[initset]\n    x11[lbind]\n    x12[chain]\n    x13[fork]\n    x14[compose]\n    x15[compose]\n    x16[lbind]\n    x17[lbind]\n    x18[compose]\n    x19[lbind]\n    x20[chain]\n    x21[fork]\n    x22[fork]\n    x23[mapply]\n    x24[mapply]\n    x25[underfill]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    I --> x3\n    ZERO --> x4\n    x3 --> x4\n    x4 --> x5\n    x2 --> x5\n    I --> x6\n    x2 --> x6\n    x5 --> x6\n    width --> x7\n    inbox --> x7\n    power --> x8\n    outbox --> x8\n    x8 --> x9\n    x7 --> x9\n    x9 --> x10\n    rapply --> x11\n    x10 --> x11\n    initset --> x12\n    first --> x12\n    x11 --> x12\n    rapply --> x13\n    x12 --> x13\n    identity --> x13\n    first --> x14\n    x13 --> x14\n    backdrop --> x15\n    x14 --> x15\n    chain --> x16\n    backdrop --> x16\n    x16 --> x17\n    inbox --> x17\n    x17 --> x18\n    x9 --> x18\n    apply --> x19\n    initset --> x19\n    x19 --> x20\n    corners --> x20\n    x15 --> x20\n    mapply --> x21\n    x18 --> x21\n    x20 --> x21\n    intersection --> x22\n    x15 --> x22\n    x21 --> x22\n    x15 --> x23\n    x1 --> x23\n    x22 --> x24\n    x1 --> x24\n    x6 --> x25\n    x5 --> x25\n    x23 --> x25\n    x25 --> O\n    ZERO --> O\n    x24 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3befdf3e(I):\n    x1 = objects(I, F, F, T)\n    x2 = leastcolor(I)\n    x3 = palette(I)\n    x4 = remove(ZERO, x3)\n    x5 = other(x4, x2)\n    x6 = switch(I, x2, x5)\n    x7 = compose(width, inbox)\n    x8 = lbind(power, outbox)\n    x9 = compose(x8, x7)\n    x10 = initset(x9)\n    x11 = lbind(rapply, x10)\n    x12 = chain(initset, first, x11)\n    x13 = fork(rapply, x12, identity)\n    x14 = compose(first, x13)\n    x15 = compose(backdrop, x14)\n    x16 = lbind(chain, backdrop)\n    x17 = lbind(x16, inbox)\n    x18 = compose(x17, x9)\n    x19 = lbind(apply, initset)\n    x20 = chain(x19, corners, x15)\n    x21 = fork(mapply, x18, x20)\n    x22 = fork(intersection, x15, x21)\n    x23 = mapply(x15, x1)\n    x24 = mapply(x22, x1)\n    x25 = underfill(x6, x5, x23)\n    O = fill(x25, ZERO, x24)\n    return O", "line_count": 28}
{"name": "9aec4887", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    x3[other]\n    x4[subgrid]\n    x5[normalize]\n    x6[shift]\n    x7[toindices]\n    x8[normalize]\n    x9[lbind]\n    x11[lbind]\n    x12[rbind]\n    x13[chain]\n    x14[chain]\n    x15[fork]\n    x16[apply]\n    x17[paint]\n    x18[fork]\n    x19[x18]\n    x20[fork]\n    x21[x20]\n    x22[intersection]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    numcolors --> x2\n    x1 --> x3\n    x2 --> x3\n    x3 --> x4\n    I --> x4\n    x2 --> x5\n    x5 --> x6\n    UNITY --> x6\n    x6 --> x7\n    x3 --> x8\n    argmin --> x9\n    x8 --> x9\n    rbind --> x11\n    manhattan --> x11\n    compose --> x12\n    initset --> x12\n    x12 --> x13\n    x11 --> x13\n    initset --> x13\n    first --> x14\n    x9 --> x14\n    x13 --> x14\n    astuple --> x15\n    x14 --> x15\n    identity --> x15\n    x15 --> x16\n    x7 --> x16\n    x4 --> x17\n    x16 --> x17\n    connect --> x18\n    ulcorner --> x18\n    lrcorner --> x18\n    x7 --> x19\n    combine --> x20\n    identity --> x20\n    vmirror --> x20\n    x19 --> x21\n    x7 --> x22\n    x21 --> x22\n    x17 --> O\n    EIGHT --> O\n    x22 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9aec4887(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O", "line_count": 24}
{"name": "49d1d64f", "graph": "graph TD\n    x1[shape]\n    x2[add]\n    x3[canvas]\n    x4[asobject]\n    x5[shift]\n    x6[paint]\n    x7[asindices]\n    x8[fork]\n    x9[x8]\n    x10[lbind]\n    x11[rbind]\n    x12[chain]\n    x13[lbind]\n    x14[chain]\n    x15[fork]\n    x16[apply]\n    O[paint]\n    I[I]\n    I --> x1\n    x1 --> x2\n    TWO --> x2\n    ZERO --> x3\n    x2 --> x3\n    I --> x4\n    x4 --> x5\n    UNITY --> x5\n    x3 --> x6\n    x5 --> x6\n    x3 --> x7\n    difference --> x8\n    box --> x8\n    corners --> x8\n    x7 --> x9\n    lbind --> x10\n    manhattan --> x10\n    compose --> x11\n    initset --> x11\n    x11 --> x12\n    x10 --> x12\n    initset --> x12\n    argmin --> x13\n    x5 --> x13\n    first --> x14\n    x13 --> x14\n    x12 --> x14\n    astuple --> x15\n    x14 --> x15\n    identity --> x15\n    x15 --> x16\n    x9 --> x16\n    x6 --> O\n    x16 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_49d1d64f(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O", "line_count": 19}
{"name": "57aa92db", "graph": "graph TD\n    x1[objects]\n    x2[objects]\n    x3[lbind]\n    x4[fork]\n    x5[compose]\n    x6[compose]\n    x7[fork]\n    x8[argmax]\n    x9[leastcolor]\n    x10[normalize]\n    x11[matcher]\n    x12[sfilter]\n    x13[ulcorner]\n    x14[colorfilter]\n    x15[rbind]\n    x16[lbind]\n    x17[chain]\n    x18[chain]\n    x19[lbind]\n    x20[compose]\n    x21[fork]\n    x22[lbind]\n    x23[compose]\n    x24[fork]\n    x25[fork]\n    x26[mapply]\n    x27[paint]\n    x28[merge]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    lbind --> x3\n    colorcount --> x3\n    apply --> x4\n    x3 --> x4\n    palette --> x4\n    maximum --> x5\n    x4 --> x5\n    minimum --> x6\n    x4 --> x6\n    subtract --> x7\n    x5 --> x7\n    x6 --> x7\n    x1 --> x8\n    x7 --> x8\n    x8 --> x9\n    x8 --> x10\n    first --> x11\n    x9 --> x11\n    x10 --> x12\n    x11 --> x12\n    x12 --> x13\n    x2 --> x14\n    x9 --> x14\n    toobject --> x15\n    I --> x15\n    remove --> x16\n    ZERO --> x16\n    first --> x17\n    x16 --> x17\n    palette --> x17\n    x17 --> x18\n    x15 --> x18\n    outbox --> x18\n    multiply --> x19\n    x13 --> x19\n    x19 --> x20\n    width --> x20\n    subtract --> x21\n    ulcorner --> x21\n    x20 --> x21\n    shift --> x22\n    x10 --> x22\n    x22 --> x23\n    x21 --> x23\n    upscale --> x24\n    x23 --> x24\n    width --> x24\n    recolor --> x25\n    x18 --> x25\n    x24 --> x25\n    x25 --> x26\n    x14 --> x26\n    I --> x27\n    x26 --> x27\n    x2 --> x28\n    x27 --> O\n    x28 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_57aa92db(I):\n    x1 = objects(I, F, T, T)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(lbind, colorcount)\n    x4 = fork(apply, x3, palette)\n    x5 = compose(maximum, x4)\n    x6 = compose(minimum, x4)\n    x7 = fork(subtract, x5, x6)\n    x8 = argmax(x1, x7)\n    x9 = leastcolor(x8)\n    x10 = normalize(x8)\n    x11 = matcher(first, x9)\n    x12 = sfilter(x10, x11)\n    x13 = ulcorner(x12)\n    x14 = colorfilter(x2, x9)\n    x15 = rbind(toobject, I)\n    x16 = lbind(remove, ZERO)\n    x17 = chain(first, x16, palette)\n    x18 = chain(x17, x15, outbox)\n    x19 = lbind(multiply, x13)\n    x20 = compose(x19, width)\n    x21 = fork(subtract, ulcorner, x20)\n    x22 = lbind(shift, x10)\n    x23 = compose(x22, x21)\n    x24 = fork(upscale, x23, width)\n    x25 = fork(recolor, x18, x24)\n    x26 = mapply(x25, x14)\n    x27 = paint(I, x26)\n    x28 = merge(x2)\n    O = paint(x27, x28)\n    return O", "line_count": 31}
{"name": "aba27056", "graph": "graph TD\n    x1[objects]\n    x2[mapply]\n    x3[box]\n    x4[difference]\n    x5[delta]\n    x6[position]\n    x7[interval]\n    x8[lbind]\n    x9[apply]\n    x10[lbind]\n    x11[mapply]\n    x12[fill]\n    x13[fill]\n    x14[corners]\n    x15[ofcolor]\n    x16[rbind]\n    x17[rbind]\n    x18[chain]\n    x19[matcher]\n    x20[rbind]\n    x21[rbind]\n    x22[fork]\n    x23[compose]\n    x24[sfilter]\n    x25[sfilter]\n    x26[product]\n    x27[fork]\n    x28[fork]\n    x29[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    toindices --> x2\n    x1 --> x2\n    x2 --> x3\n    x3 --> x4\n    x2 --> x4\n    x2 --> x5\n    x5 --> x6\n    x4 --> x6\n    ZERO --> x7\n    NINE --> x7\n    ONE --> x7\n    multiply --> x8\n    x6 --> x8\n    x8 --> x9\n    x7 --> x9\n    shift --> x10\n    x4 --> x10\n    x10 --> x11\n    x9 --> x11\n    I --> x12\n    FOUR --> x12\n    x5 --> x12\n    x12 --> x13\n    FOUR --> x13\n    x11 --> x13\n    x4 --> x14\n    x13 --> x15\n    ZERO --> x15\n    toobject --> x16\n    x13 --> x16\n    colorcount --> x17\n    ZERO --> x17\n    x17 --> x18\n    x16 --> x18\n    dneighbors --> x18\n    x18 --> x19\n    TWO --> x19\n    adjacent --> x20\n    x2 --> x20\n    adjacent --> x21\n    x11 --> x21\n    both --> x22\n    x20 --> x22\n    x21 --> x22\n    x22 --> x23\n    initset --> x23\n    x15 --> x24\n    x19 --> x24\n    x24 --> x25\n    x23 --> x25\n    x14 --> x26\n    x25 --> x26\n    subtract --> x27\n    last --> x27\n    first --> x27\n    shoot --> x28\n    first --> x28\n    x27 --> x28\n    x28 --> x29\n    x26 --> x29\n    x13 --> O\n    FOUR --> O\n    x29 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_aba27056(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O", "line_count": 32}
{"name": "f1cefba8", "graph": "graph TD\n    x1[palette]\n    x2[objects]\n    x3[ofcolor]\n    x4[first]\n    x5[ulcorner]\n    x6[subgrid]\n    x7[power]\n    x8[x7]\n    x9[asindices]\n    x10[shift]\n    x11[fill]\n    x12[leastcolor]\n    x13[remove]\n    x14[other]\n    x15[ofcolor]\n    x16[shift]\n    x17[ofcolor]\n    x18[uppermost]\n    x19[lowermost]\n    x20[matcher]\n    x21[matcher]\n    x22[fork]\n    x23[sfilter]\n    x24[difference]\n    x25[mapply]\n    x26[mapply]\n    x27[combine]\n    x28[intersection]\n    x29[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    F --> x2\n    F --> x2\n    T --> x2\n    I --> x3\n    ZERO --> x3\n    x2 --> x4\n    x4 --> x5\n    x4 --> x6\n    I --> x6\n    trim --> x7\n    TWO --> x7\n    x6 --> x8\n    x8 --> x9\n    x9 --> x10\n    TWO_BY_TWO --> x10\n    x6 --> x11\n    ZERO --> x11\n    x10 --> x11\n    x11 --> x12\n    ZERO --> x13\n    x1 --> x13\n    x13 --> x14\n    x12 --> x14\n    x11 --> x15\n    x12 --> x15\n    x15 --> x16\n    x5 --> x16\n    I --> x17\n    x12 --> x17\n    x17 --> x18\n    x17 --> x19\n    first --> x20\n    x18 --> x20\n    first --> x21\n    x19 --> x21\n    either --> x22\n    x20 --> x22\n    x21 --> x22\n    x16 --> x23\n    x22 --> x23\n    x16 --> x24\n    x23 --> x24\n    vfrontier --> x25\n    x23 --> x25\n    hfrontier --> x26\n    x24 --> x26\n    x25 --> x27\n    x26 --> x27\n    x3 --> x28\n    x27 --> x28\n    I --> x29\n    x14 --> x29\n    x27 --> x29\n    x29 --> O\n    x12 --> O\n    x28 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f1cefba8(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = ofcolor(I, ZERO)\n    x4 = first(x2)\n    x5 = ulcorner(x4)\n    x6 = subgrid(x4, I)\n    x7 = power(trim, TWO)\n    x8 = x7(x6)\n    x9 = asindices(x8)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = fill(x6, ZERO, x10)\n    x12 = leastcolor(x11)\n    x13 = remove(ZERO, x1)\n    x14 = other(x13, x12)\n    x15 = ofcolor(x11, x12)\n    x16 = shift(x15, x5)\n    x17 = ofcolor(I, x12)\n    x18 = uppermost(x17)\n    x19 = lowermost(x17)\n    x20 = matcher(first, x18)\n    x21 = matcher(first, x19)\n    x22 = fork(either, x20, x21)\n    x23 = sfilter(x16, x22)\n    x24 = difference(x16, x23)\n    x25 = mapply(vfrontier, x23)\n    x26 = mapply(hfrontier, x24)\n    x27 = combine(x25, x26)\n    x28 = intersection(x3, x27)\n    x29 = fill(I, x14, x27)\n    O = fill(x29, x12, x28)\n    return O", "line_count": 32}
{"name": "1e32b0e9", "graph": "graph TD\n    x1[height]\n    x2[mostcolor]\n    x3[asobject]\n    x4[subtract]\n    x5[divide]\n    x6[astuple]\n    x7[crop]\n    x8[partition]\n    x9[matcher]\n    x10[compose]\n    x11[extract]\n    x12[initset]\n    x13[palette]\n    x14[palette]\n    x15[difference]\n    x16[difference]\n    x17[first]\n    x18[interval]\n    x19[product]\n    x20[totuple]\n    x21[apply]\n    x22[apply]\n    x23[lbind]\n    x24[apply]\n    x25[apply]\n    x26[papply]\n    x27[papply]\n    x28[papply]\n    x29[lbind]\n    x30[mapply]\n    O[underfill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    x1 --> x4\n    TWO --> x4\n    x4 --> x5\n    THREE --> x5\n    x5 --> x6\n    x5 --> x6\n    I --> x7\n    ORIGIN --> x7\n    x6 --> x7\n    x7 --> x8\n    color --> x9\n    ZERO --> x9\n    flip --> x10\n    x9 --> x10\n    x8 --> x11\n    x10 --> x11\n    x2 --> x12\n    x3 --> x13\n    x11 --> x14\n    x13 --> x15\n    x14 --> x15\n    x15 --> x16\n    x12 --> x16\n    x16 --> x17\n    ZERO --> x18\n    THREE --> x18\n    ONE --> x18\n    x18 --> x19\n    x18 --> x19\n    x19 --> x20\n    first --> x21\n    x20 --> x21\n    last --> x22\n    x20 --> x22\n    multiply --> x23\n    x5 --> x23\n    x23 --> x24\n    x21 --> x24\n    x23 --> x25\n    x22 --> x25\n    add --> x26\n    x24 --> x26\n    x21 --> x26\n    add --> x27\n    x25 --> x27\n    x22 --> x27\n    astuple --> x28\n    x26 --> x28\n    x27 --> x28\n    shift --> x29\n    x11 --> x29\n    x29 --> x30\n    x28 --> x30\n    I --> O\n    x17 --> O\n    x30 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_1e32b0e9(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O", "line_count": 33}
{"name": "28e73c20", "graph": "graph TD\n    x1[width]\n    x2[astuple]\n    x3[astuple]\n    x4[astuple]\n    x5[astuple]\n    x6[canvas]\n    x7[upscale]\n    x8[initset]\n    x9[insert]\n    x10[insert]\n    x11[insert]\n    x12[fill]\n    x13[vupscale]\n    x14[hupscale]\n    x15[insert]\n    x16[insert]\n    x17[fill]\n    x18[even]\n    x19[branch]\n    x20[canvas]\n    x21[lbind]\n    x22[chain]\n    x23[rbind]\n    x24[compose]\n    x25[lbind]\n    x26[compose]\n    x27[fork]\n    x28[fork]\n    x29[subtract]\n    x30[power]\n    O[x30]\n    I[I]\n    I --> x1\n    ONE --> x2\n    TWO --> x2\n    TWO --> x3\n    TWO --> x3\n    TWO --> x4\n    ONE --> x4\n    THREE --> x5\n    ONE --> x5\n    THREE --> x6\n    UNITY --> x6\n    x6 --> x7\n    FOUR --> x7\n    DOWN --> x8\n    UNITY --> x9\n    x8 --> x9\n    x2 --> x10\n    x9 --> x10\n    x3 --> x11\n    x10 --> x11\n    x7 --> x12\n    ZERO --> x12\n    x11 --> x12\n    x6 --> x13\n    FIVE --> x13\n    x13 --> x14\n    THREE --> x14\n    x4 --> x15\n    x9 --> x15\n    x5 --> x16\n    x15 --> x16\n    x14 --> x17\n    ZERO --> x17\n    x16 --> x17\n    x1 --> x18\n    x18 --> x19\n    x12 --> x19\n    x17 --> x19\n    ZERO --> x20\n    UNITY --> x20\n    hupscale --> x21\n    x20 --> x21\n    x21 --> x22\n    decrement --> x22\n    height --> x22\n    hconcat --> x23\n    x6 --> x23\n    x23 --> x24\n    x22 --> x24\n    hupscale --> x25\n    x6 --> x25\n    x25 --> x26\n    height --> x26\n    vconcat --> x27\n    x24 --> x27\n    rot90 --> x27\n    vconcat --> x28\n    x26 --> x28\n    x27 --> x28\n    x1 --> x29\n    FOUR --> x29\n    x28 --> x30\n    x29 --> x30\n    x19 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_28e73c20(I):\n    x1 = width(I)\n    x2 = astuple(ONE, TWO)\n    x3 = astuple(TWO, TWO)\n    x4 = astuple(TWO, ONE)\n    x5 = astuple(THREE, ONE)\n    x6 = canvas(THREE, UNITY)\n    x7 = upscale(x6, FOUR)\n    x8 = initset(DOWN)\n    x9 = insert(UNITY, x8)\n    x10 = insert(x2, x9)\n    x11 = insert(x3, x10)\n    x12 = fill(x7, ZERO, x11)\n    x13 = vupscale(x6, FIVE)\n    x14 = hupscale(x13, THREE)\n    x15 = insert(x4, x9)\n    x16 = insert(x5, x15)\n    x17 = fill(x14, ZERO, x16)\n    x18 = even(x1)\n    x19 = branch(x18, x12, x17)\n    x20 = canvas(ZERO, UNITY)\n    x21 = lbind(hupscale, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = rbind(hconcat, x6)\n    x24 = compose(x23, x22)\n    x25 = lbind(hupscale, x6)\n    x26 = compose(x25, height)\n    x27 = fork(vconcat, x24, rot90)\n    x28 = fork(vconcat, x26, x27)\n    x29 = subtract(x1, FOUR)\n    x30 = power(x28, x29)\n    O = x30(x19)\n    return O", "line_count": 33}
{"name": "4c5c2cf0", "graph": "graph TD\n    x1[objects]\n    x2[objects]\n    x3[first]\n    x4[rbind]\n    x5[fork]\n    x6[compose]\n    x7[extract]\n    x8[center]\n    x9[subgrid]\n    x10[hmirror]\n    x11[objects]\n    x12[first]\n    x13[objects]\n    x14[extract]\n    x15[center]\n    x16[subtract]\n    x17[shift]\n    x18[paint]\n    x19[objects]\n    x20[first]\n    x21[subgrid]\n    x22[vmirror]\n    x23[objects]\n    x24[first]\n    x25[objects]\n    x26[color]\n    x27[matcher]\n    x28[extract]\n    x29[center]\n    x30[subtract]\n    x31[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    I --> x2\n    F --> x2\n    T --> x2\n    T --> x2\n    x2 --> x3\n    subgrid --> x4\n    I --> x4\n    equality --> x5\n    identity --> x5\n    rot90 --> x5\n    x5 --> x6\n    x4 --> x6\n    x1 --> x7\n    x6 --> x7\n    x7 --> x8\n    x3 --> x9\n    I --> x9\n    x9 --> x10\n    x10 --> x11\n    F --> x11\n    T --> x11\n    T --> x11\n    x11 --> x12\n    x10 --> x13\n    T --> x13\n    T --> x13\n    T --> x13\n    x13 --> x14\n    x6 --> x14\n    x14 --> x15\n    x8 --> x16\n    x15 --> x16\n    x12 --> x17\n    x16 --> x17\n    I --> x18\n    x17 --> x18\n    x18 --> x19\n    F --> x19\n    T --> x19\n    T --> x19\n    x19 --> x20\n    x20 --> x21\n    x18 --> x21\n    x21 --> x22\n    x22 --> x23\n    F --> x23\n    T --> x23\n    T --> x23\n    x23 --> x24\n    x22 --> x25\n    T --> x25\n    T --> x25\n    T --> x25\n    x7 --> x26\n    color --> x27\n    x26 --> x27\n    x25 --> x28\n    x27 --> x28\n    x28 --> x29\n    x8 --> x30\n    x29 --> x30\n    x24 --> x31\n    x30 --> x31\n    x18 --> O\n    x31 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4c5c2cf0(I):\n    x1 = objects(I, T, T, T)\n    x2 = objects(I, F, T, T)\n    x3 = first(x2)\n    x4 = rbind(subgrid, I)\n    x5 = fork(equality, identity, rot90)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    x8 = center(x7)\n    x9 = subgrid(x3, I)\n    x10 = hmirror(x9)\n    x11 = objects(x10, F, T, T)\n    x12 = first(x11)\n    x13 = objects(x10, T, T, T)\n    x14 = extract(x13, x6)\n    x15 = center(x14)\n    x16 = subtract(x8, x15)\n    x17 = shift(x12, x16)\n    x18 = paint(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = first(x19)\n    x21 = subgrid(x20, x18)\n    x22 = vmirror(x21)\n    x23 = objects(x22, F, T, T)\n    x24 = first(x23)\n    x25 = objects(x22, T, T, T)\n    x26 = color(x7)\n    x27 = matcher(color, x26)\n    x28 = extract(x25, x27)\n    x29 = center(x28)\n    x30 = subtract(x8, x29)\n    x31 = shift(x24, x30)\n    O = paint(x18, x31)\n    return O", "line_count": 34}
{"name": "508bd3b6", "graph": "graph TD\n    x1[width]\n    x2[objects]\n    x3[argmin]\n    x4[argmax]\n    x5[ulcorner]\n    x6[urcorner]\n    x7[index]\n    x8[equality]\n    x9[branch]\n    x10[branch]\n    x11[multiply]\n    x12[double]\n    x13[add]\n    x14[subtract]\n    x15[connect]\n    x16[fill]\n    x17[paint]\n    x18[objects]\n    x19[rbind]\n    x20[extract]\n    x21[first]\n    x22[last]\n    x23[flip]\n    x24[branch]\n    x25[multiply]\n    x26[double]\n    x27[add]\n    x28[subtract]\n    x29[connect]\n    x30[fill]\n    x31[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    T --> x2\n    T --> x2\n    x2 --> x3\n    size --> x3\n    x2 --> x4\n    size --> x4\n    x3 --> x5\n    x3 --> x6\n    I --> x7\n    x5 --> x7\n    x7 --> x8\n    EIGHT --> x8\n    x8 --> x9\n    x5 --> x9\n    x6 --> x9\n    x8 --> x10\n    UNITY --> x10\n    DOWN_LEFT --> x10\n    x10 --> x11\n    x1 --> x11\n    x11 --> x12\n    x9 --> x13\n    x12 --> x13\n    x9 --> x14\n    x12 --> x14\n    x13 --> x15\n    x14 --> x15\n    I --> x16\n    THREE --> x16\n    x15 --> x16\n    x16 --> x17\n    x4 --> x17\n    x17 --> x18\n    T --> x18\n    F --> x18\n    T --> x18\n    adjacent --> x19\n    x4 --> x19\n    x18 --> x20\n    x19 --> x20\n    x20 --> x21\n    x21 --> x22\n    x8 --> x23\n    x23 --> x24\n    UNITY --> x24\n    DOWN_LEFT --> x24\n    x24 --> x25\n    x1 --> x25\n    x25 --> x26\n    x22 --> x27\n    x26 --> x27\n    x22 --> x28\n    x26 --> x28\n    x27 --> x29\n    x28 --> x29\n    x17 --> x30\n    THREE --> x30\n    x29 --> x30\n    x30 --> x31\n    x3 --> x31\n    x31 --> O\n    x4 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_508bd3b6(I):\n    x1 = width(I)\n    x2 = objects(I, T, T, T)\n    x3 = argmin(x2, size)\n    x4 = argmax(x2, size)\n    x5 = ulcorner(x3)\n    x6 = urcorner(x3)\n    x7 = index(I, x5)\n    x8 = equality(x7, EIGHT)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, UNITY, DOWN_LEFT)\n    x11 = multiply(x10, x1)\n    x12 = double(x11)\n    x13 = add(x9, x12)\n    x14 = subtract(x9, x12)\n    x15 = connect(x13, x14)\n    x16 = fill(I, THREE, x15)\n    x17 = paint(x16, x4)\n    x18 = objects(x17, T, F, T)\n    x19 = rbind(adjacent, x4)\n    x20 = extract(x18, x19)\n    x21 = first(x20)\n    x22 = last(x21)\n    x23 = flip(x8)\n    x24 = branch(x23, UNITY, DOWN_LEFT)\n    x25 = multiply(x24, x1)\n    x26 = double(x25)\n    x27 = add(x22, x26)\n    x28 = subtract(x22, x26)\n    x29 = connect(x27, x28)\n    x30 = fill(x17, THREE, x29)\n    x31 = paint(x30, x3)\n    O = paint(x31, x4)\n    return O", "line_count": 34}
{"name": "6d0160f0", "graph": "graph TD\n    x1[ofcolor]\n    x2[first]\n    x3[first]\n    x4[last]\n    x5[greater]\n    x6[greater]\n    x7[greater]\n    x8[greater]\n    x9[branch]\n    x10[branch]\n    x11[branch]\n    x12[branch]\n    x13[astuple]\n    x14[initset]\n    x15[insert]\n    x16[insert]\n    x17[product]\n    x18[crop]\n    x19[asindices]\n    x20[recolor]\n    x21[lbind]\n    x22[mapply]\n    x23[paint]\n    x24[crop]\n    x25[replace]\n    x26[ofcolor]\n    x27[first]\n    x28[asindices]\n    x29[toobject]\n    x30[multiply]\n    x31[shift]\n    O[paint]\n    I[I]\n    I --> x1\n    FOUR --> x1\n    x1 --> x2\n    x2 --> x3\n    x2 --> x4\n    x3 --> x5\n    THREE --> x5\n    x3 --> x6\n    SEVEN --> x6\n    x4 --> x7\n    THREE --> x7\n    x4 --> x8\n    SEVEN --> x8\n    x5 --> x9\n    FOUR --> x9\n    ZERO --> x9\n    x6 --> x10\n    EIGHT --> x10\n    x9 --> x10\n    x7 --> x11\n    FOUR --> x11\n    ZERO --> x11\n    x8 --> x12\n    EIGHT --> x12\n    x11 --> x12\n    x10 --> x13\n    x12 --> x13\n    ZERO --> x14\n    FOUR --> x15\n    x14 --> x15\n    EIGHT --> x16\n    x15 --> x16\n    x16 --> x17\n    x16 --> x17\n    I --> x18\n    ORIGIN --> x18\n    THREE_BY_THREE --> x18\n    x18 --> x19\n    ZERO --> x20\n    x19 --> x20\n    shift --> x21\n    x20 --> x21\n    x21 --> x22\n    x17 --> x22\n    I --> x23\n    x22 --> x23\n    I --> x24\n    x13 --> x24\n    THREE_BY_THREE --> x24\n    x24 --> x25\n    FIVE --> x25\n    ZERO --> x25\n    x25 --> x26\n    FOUR --> x26\n    x26 --> x27\n    x25 --> x28\n    x28 --> x29\n    x25 --> x29\n    x27 --> x30\n    FOUR --> x30\n    x29 --> x31\n    x30 --> x31\n    x23 --> O\n    x31 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6d0160f0(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = first(x1)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = greater(x3, THREE)\n    x6 = greater(x3, SEVEN)\n    x7 = greater(x4, THREE)\n    x8 = greater(x4, SEVEN)\n    x9 = branch(x5, FOUR, ZERO)\n    x10 = branch(x6, EIGHT, x9)\n    x11 = branch(x7, FOUR, ZERO)\n    x12 = branch(x8, EIGHT, x11)\n    x13 = astuple(x10, x12)\n    x14 = initset(ZERO)\n    x15 = insert(FOUR, x14)\n    x16 = insert(EIGHT, x15)\n    x17 = product(x16, x16)\n    x18 = crop(I, ORIGIN, THREE_BY_THREE)\n    x19 = asindices(x18)\n    x20 = recolor(ZERO, x19)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x17)\n    x23 = paint(I, x22)\n    x24 = crop(I, x13, THREE_BY_THREE)\n    x25 = replace(x24, FIVE, ZERO)\n    x26 = ofcolor(x25, FOUR)\n    x27 = first(x26)\n    x28 = asindices(x25)\n    x29 = toobject(x28, x25)\n    x30 = multiply(x27, FOUR)\n    x31 = shift(x29, x30)\n    O = paint(x23, x31)\n    return O", "line_count": 34}
{"name": "f8a8fe49", "graph": "graph TD\n    x1[objects]\n    x2[replace]\n    x3[colorfilter]\n    x4[first]\n    x5[portrait]\n    x6[branch]\n    x7[branch]\n    x8[ofcolor]\n    x9[subgrid]\n    x10[trim]\n    x11[x7]\n    x12[x6]\n    x13[compose]\n    x14[apply]\n    x15[last]\n    x16[first]\n    x17[ulcorner]\n    x18[increment]\n    x19[shift]\n    x20[shift]\n    x21[branch]\n    x22[branch]\n    x23[x21]\n    x24[double]\n    x25[compose]\n    x26[x25]\n    x27[invert]\n    x28[x25]\n    x29[shift]\n    x30[shift]\n    x31[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    I --> x2\n    FIVE --> x2\n    ZERO --> x2\n    x1 --> x3\n    TWO --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    hsplit --> x6\n    vsplit --> x6\n    x5 --> x7\n    vmirror --> x7\n    hmirror --> x7\n    I --> x8\n    TWO --> x8\n    x8 --> x9\n    I --> x9\n    x9 --> x10\n    x10 --> x11\n    x11 --> x12\n    TWO --> x12\n    normalize --> x13\n    asobject --> x13\n    x13 --> x14\n    x12 --> x14\n    x14 --> x15\n    x14 --> x16\n    x8 --> x17\n    x17 --> x18\n    x15 --> x19\n    x18 --> x19\n    x16 --> x20\n    x18 --> x20\n    x5 --> x21\n    width --> x21\n    height --> x21\n    x5 --> x22\n    tojvec --> x22\n    toivec --> x22\n    x15 --> x23\n    x23 --> x24\n    x22 --> x25\n    increment --> x25\n    x23 --> x26\n    x26 --> x27\n    x24 --> x28\n    x19 --> x29\n    x27 --> x29\n    x20 --> x30\n    x28 --> x30\n    x2 --> x31\n    x29 --> x31\n    x31 --> O\n    x30 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f8a8fe49(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O", "line_count": 34}
{"name": "d07ae81c", "graph": "graph TD\n    x1[objects]\n    x2[sizefilter]\n    x3[apply]\n    x4[difference]\n    x5[apply]\n    x6[first]\n    x7[last]\n    x8[ofcolor]\n    x9[ofcolor]\n    x10[rbind]\n    x11[rbind]\n    x12[rbind]\n    x13[rbind]\n    x14[fork]\n    x15[fork]\n    x16[fork]\n    x17[compose]\n    x18[mapply]\n    x19[intersection]\n    x20[intersection]\n    x21[first]\n    x22[color]\n    x23[center]\n    x24[neighbors]\n    x25[toobject]\n    x26[mostcolor]\n    x27[other]\n    x28[equality]\n    x29[branch]\n    x30[branch]\n    x31[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    F --> x1\n    x1 --> x2\n    ONE --> x2\n    color --> x3\n    x2 --> x3\n    x1 --> x4\n    x2 --> x4\n    color --> x5\n    x4 --> x5\n    x5 --> x6\n    x5 --> x7\n    I --> x8\n    x6 --> x8\n    I --> x9\n    x7 --> x9\n    shoot --> x10\n    UNITY --> x10\n    shoot --> x11\n    NEG_UNITY --> x11\n    shoot --> x12\n    DOWN_LEFT --> x12\n    shoot --> x13\n    UP_RIGHT --> x13\n    combine --> x14\n    x10 --> x14\n    x11 --> x14\n    combine --> x15\n    x12 --> x15\n    x13 --> x15\n    combine --> x16\n    x14 --> x16\n    x15 --> x16\n    x16 --> x17\n    center --> x17\n    x17 --> x18\n    x2 --> x18\n    x8 --> x19\n    x18 --> x19\n    x9 --> x20\n    x18 --> x20\n    x2 --> x21\n    x21 --> x22\n    x21 --> x23\n    x23 --> x24\n    x24 --> x25\n    I --> x25\n    x25 --> x26\n    x3 --> x27\n    x22 --> x27\n    x26 --> x28\n    x6 --> x28\n    x28 --> x29\n    x22 --> x29\n    x27 --> x29\n    x28 --> x30\n    x27 --> x30\n    x22 --> x30\n    I --> x31\n    x29 --> x31\n    x19 --> x31\n    x31 --> O\n    x30 --> O\n    x20 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d07ae81c(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = fork(combine, x10, x11)\n    x15 = fork(combine, x12, x13)\n    x16 = fork(combine, x14, x15)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x2)\n    x19 = intersection(x8, x18)\n    x20 = intersection(x9, x18)\n    x21 = first(x2)\n    x22 = color(x21)\n    x23 = center(x21)\n    x24 = neighbors(x23)\n    x25 = toobject(x24, I)\n    x26 = mostcolor(x25)\n    x27 = other(x3, x22)\n    x28 = equality(x26, x6)\n    x29 = branch(x28, x22, x27)\n    x30 = branch(x28, x27, x22)\n    x31 = fill(I, x29, x19)\n    O = fill(x31, x30, x20)\n    return O", "line_count": 34}
{"name": "6a1e5592", "graph": "graph TD\n    x1[width]\n    x2[objects]\n    x3[astuple]\n    x4[crop]\n    x5[colorfilter]\n    x6[merge]\n    x7[cover]\n    x8[compose]\n    x9[apply]\n    x10[asindices]\n    x11[ofcolor]\n    x12[ofcolor]\n    x13[rbind]\n    x14[rbind]\n    x15[rbind]\n    x16[rbind]\n    x17[rbind]\n    x18[chain]\n    x19[chain]\n    x20[compose]\n    x21[chain]\n    x22[chain]\n    x23[compose]\n    x24[fork]\n    x25[fork]\n    x26[fork]\n    x27[fork]\n    x28[rbind]\n    x29[lbind]\n    x30[rbind]\n    x31[chain]\n    x32[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    FIVE --> x3\n    x1 --> x3\n    I --> x4\n    ORIGIN --> x4\n    x3 --> x4\n    x2 --> x5\n    FIVE --> x5\n    x5 --> x6\n    I --> x7\n    x6 --> x7\n    toindices --> x8\n    normalize --> x8\n    x8 --> x9\n    x5 --> x9\n    x4 --> x10\n    x4 --> x11\n    ZERO --> x11\n    x4 --> x12\n    TWO --> x12\n    multiply --> x13\n    TEN --> x13\n    multiply --> x14\n    EIGHT --> x14\n    intersection --> x15\n    x12 --> x15\n    intersection --> x16\n    x11 --> x16\n    intersection --> x17\n    x10 --> x17\n    x13 --> x18\n    size --> x18\n    x15 --> x18\n    size --> x19\n    x16 --> x19\n    delta --> x19\n    x14 --> x20\n    uppermost --> x20\n    size --> x21\n    x16 --> x21\n    outbox --> x21\n    x13 --> x22\n    size --> x22\n    x17 --> x22\n    invert --> x23\n    x18 --> x23\n    add --> x24\n    x22 --> x24\n    x23 --> x24\n    subtract --> x25\n    x24 --> x25\n    x21 --> x25\n    subtract --> x26\n    x25 --> x26\n    x20 --> x26\n    subtract --> x27\n    x26 --> x27\n    x19 --> x27\n    apply --> x28\n    x10 --> x28\n    lbind --> x29\n    shift --> x29\n    argmax --> x30\n    x27 --> x30\n    x30 --> x31\n    x28 --> x31\n    x29 --> x31\n    x31 --> x32\n    x9 --> x32\n    x7 --> O\n    ONE --> O\n    x32 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6a1e5592(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(FIVE, x1)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = compose(toindices, normalize)\n    x9 = apply(x8, x5)\n    x10 = asindices(x4)\n    x11 = ofcolor(x4, ZERO)\n    x12 = ofcolor(x4, TWO)\n    x13 = rbind(multiply, TEN)\n    x14 = rbind(multiply, EIGHT)\n    x15 = rbind(intersection, x12)\n    x16 = rbind(intersection, x11)\n    x17 = rbind(intersection, x10)\n    x18 = chain(x13, size, x15)\n    x19 = chain(size, x16, delta)\n    x20 = compose(x14, uppermost)\n    x21 = chain(size, x16, outbox)\n    x22 = chain(x13, size, x17)\n    x23 = compose(invert, x18)\n    x24 = fork(add, x22, x23)\n    x25 = fork(subtract, x24, x21)\n    x26 = fork(subtract, x25, x20)\n    x27 = fork(subtract, x26, x19)\n    x28 = rbind(apply, x10)\n    x29 = lbind(lbind, shift)\n    x30 = rbind(argmax, x27)\n    x31 = chain(x30, x28, x29)\n    x32 = mapply(x31, x9)\n    O = fill(x7, ONE, x32)\n    return O", "line_count": 35}
{"name": "0e206a2e", "graph": "graph TD\n    x1[palette]\n    x2[objects]\n    x3[rbind]\n    x4[compose]\n    x5[sfilter]\n    x6[remove]\n    x7[lbind]\n    x8[argmax]\n    x9[remove]\n    x10[rbind]\n    x11[compose]\n    x12[rbind]\n    x13[lbind]\n    x14[lbind]\n    x15[lbind]\n    x16[compose]\n    x17[chain]\n    x18[chain]\n    x19[fork]\n    x20[compose]\n    x21[fork]\n    x22[astuple]\n    x23[astuple]\n    x24[combine]\n    x25[product]\n    x26[fork]\n    x27[apply]\n    x28[totuple]\n    x29[combine]\n    x30[lbind]\n    x31[mapply]\n    x32[mapply]\n    x33[paint]\n    x34[merge]\n    O[cover]\n    I[I]\n    I --> x1\n    I --> x2\n    F --> x2\n    F --> x2\n    T --> x2\n    greater --> x3\n    ONE --> x3\n    x3 --> x4\n    numcolors --> x4\n    x2 --> x5\n    x4 --> x5\n    ZERO --> x6\n    x1 --> x6\n    colorcount --> x7\n    I --> x7\n    x6 --> x8\n    x7 --> x8\n    x8 --> x9\n    x6 --> x9\n    contained --> x10\n    x9 --> x10\n    x10 --> x11\n    first --> x11\n    sfilter --> x12\n    x11 --> x12\n    rbind --> x13\n    subtract --> x13\n    occurrences --> x14\n    I --> x14\n    lbind --> x15\n    shift --> x15\n    x13 --> x16\n    ulcorner --> x16\n    x16 --> x17\n    x12 --> x17\n    normalize --> x17\n    x14 --> x18\n    x12 --> x18\n    normalize --> x18\n    apply --> x19\n    x17 --> x19\n    x18 --> x19\n    x15 --> x20\n    normalize --> x20\n    mapply --> x21\n    x20 --> x21\n    x19 --> x21\n    cmirror --> x22\n    dmirror --> x22\n    hmirror --> x23\n    vmirror --> x23\n    x22 --> x24\n    x23 --> x24\n    x24 --> x25\n    x24 --> x25\n    compose --> x26\n    first --> x26\n    last --> x26\n    x26 --> x27\n    x25 --> x27\n    x27 --> x28\n    x24 --> x29\n    x28 --> x29\n    rapply --> x30\n    x29 --> x30\n    x30 --> x31\n    x5 --> x31\n    x21 --> x32\n    x31 --> x32\n    I --> x33\n    x32 --> x33\n    x5 --> x34\n    x33 --> O\n    x34 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_0e206a2e(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = rbind(greater, ONE)\n    x4 = compose(x3, numcolors)\n    x5 = sfilter(x2, x4)\n    x6 = remove(ZERO, x1)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, first)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(rbind, subtract)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(lbind, shift)\n    x16 = compose(x13, ulcorner)\n    x17 = chain(x16, x12, normalize)\n    x18 = chain(x14, x12, normalize)\n    x19 = fork(apply, x17, x18)\n    x20 = compose(x15, normalize)\n    x21 = fork(mapply, x20, x19)\n    x22 = astuple(cmirror, dmirror)\n    x23 = astuple(hmirror, vmirror)\n    x24 = combine(x22, x23)\n    x25 = product(x24, x24)\n    x26 = fork(compose, first, last)\n    x27 = apply(x26, x25)\n    x28 = totuple(x27)\n    x29 = combine(x24, x28)\n    x30 = lbind(rapply, x29)\n    x31 = mapply(x30, x5)\n    x32 = mapply(x21, x31)\n    x33 = paint(I, x32)\n    x34 = merge(x5)\n    O = cover(x33, x34)\n    return O", "line_count": 37}
{"name": "d22278a0", "graph": "graph TD\n    x1[asindices]\n    x2[objects]\n    x3[fork]\n    x4[lbind]\n    x5[chain]\n    x6[lbind]\n    x7[fork]\n    x8[rbind]\n    x9[compose]\n    x10[fork]\n    x11[compose]\n    x12[lbind]\n    x13[lbind]\n    x14[chain]\n    x15[lbind]\n    x16[lbind]\n    x17[lbind]\n    x18[lbind]\n    x19[compose]\n    x20[compose]\n    x21[compose]\n    x22[rbind]\n    x23[lbind]\n    x24[rbind]\n    x25[chain]\n    x26[lbind]\n    x27[fork]\n    x28[chain]\n    x29[chain]\n    x30[fork]\n    x31[compose]\n    x32[fork]\n    x33[fork]\n    x34[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    multiply --> x3\n    sign --> x3\n    identity --> x3\n    apply --> x4\n    x3 --> x4\n    even --> x5\n    maximum --> x5\n    x4 --> x5\n    sfilter --> x6\n    x1 --> x6\n    add --> x7\n    first --> x7\n    last --> x7\n    remove --> x8\n    x2 --> x8\n    center --> x9\n    last --> x9\n    subtract --> x10\n    first --> x10\n    x9 --> x10\n    x5 --> x11\n    x10 --> x11\n    rbind --> x12\n    equality --> x12\n    argmin --> x13\n    x2 --> x13\n    x7 --> x14\n    x4 --> x14\n    x10 --> x14\n    lbind --> x15\n    astuple --> x15\n    rbind --> x16\n    astuple --> x16\n    compose --> x17\n    x11 --> x17\n    compose --> x18\n    x14 --> x18\n    x18 --> x19\n    x15 --> x19\n    x18 --> x20\n    x16 --> x20\n    x13 --> x21\n    x19 --> x21\n    compose --> x22\n    x21 --> x22\n    lbind --> x23\n    valmin --> x23\n    compose --> x24\n    x19 --> x24\n    x24 --> x25\n    x23 --> x25\n    x8 --> x25\n    fork --> x26\n    greater --> x26\n    x26 --> x27\n    x25 --> x27\n    x20 --> x27\n    x6 --> x28\n    x17 --> x28\n    x16 --> x28\n    x6 --> x29\n    x22 --> x29\n    x12 --> x29\n    intersection --> x30\n    x28 --> x30\n    x29 --> x30\n    x6 --> x31\n    x27 --> x31\n    intersection --> x32\n    x30 --> x32\n    x31 --> x32\n    recolor --> x33\n    color --> x33\n    x32 --> x33\n    x33 --> x34\n    x2 --> x34\n    I --> O\n    x34 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_d22278a0(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, valmin)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = fork(x26, x25, x20)\n    x28 = chain(x6, x17, x16)\n    x29 = chain(x6, x22, x12)\n    x30 = fork(intersection, x28, x29)\n    x31 = compose(x6, x27)\n    x32 = fork(intersection, x30, x31)\n    x33 = fork(recolor, color, x32)\n    x34 = mapply(x33, x2)\n    O = paint(I, x34)\n    return O", "line_count": 37}
{"name": "4290ef0e", "graph": "graph TD\n    x1[mostcolor]\n    x2[fgpartition]\n    x3[objects]\n    x4[rbind]\n    x5[lbind]\n    x6[chain]\n    x7[compose]\n    x8[fork]\n    x9[compose]\n    x10[order]\n    x11[rbind]\n    x12[compose]\n    x13[fork]\n    x14[fork]\n    x15[fork]\n    x16[compose]\n    x17[apply]\n    x18[size]\n    x19[apply]\n    x20[contained]\n    x21[increment]\n    x22[branch]\n    x23[double]\n    x24[decrement]\n    x25[apply]\n    x26[interval]\n    x27[pair]\n    x28[mpapply]\n    x29[astuple]\n    x30[canvas]\n    x31[paint]\n    x32[rot90]\n    x33[paint]\n    x34[rot90]\n    x35[paint]\n    x36[rot90]\n    O[paint]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    T --> x3\n    F --> x3\n    T --> x3\n    valmax --> x4\n    width --> x4\n    colorfilter --> x5\n    x3 --> x5\n    x4 --> x6\n    x5 --> x6\n    color --> x6\n    maximum --> x7\n    shape --> x7\n    add --> x8\n    x7 --> x8\n    x6 --> x8\n    invert --> x9\n    x8 --> x9\n    x2 --> x10\n    x9 --> x10\n    argmin --> x11\n    centerofmass --> x11\n    initset --> x12\n    vmirror --> x12\n    insert --> x13\n    dmirror --> x13\n    x12 --> x13\n    insert --> x14\n    cmirror --> x14\n    x13 --> x14\n    insert --> x15\n    hmirror --> x15\n    x14 --> x15\n    x11 --> x16\n    x15 --> x16\n    x16 --> x17\n    x10 --> x17\n    x2 --> x18\n    size --> x19\n    x2 --> x19\n    ONE --> x20\n    x19 --> x20\n    x18 --> x21\n    x20 --> x22\n    x18 --> x22\n    x21 --> x22\n    x22 --> x23\n    x23 --> x24\n    normalize --> x25\n    x17 --> x25\n    ZERO --> x26\n    x22 --> x26\n    ONE --> x26\n    x26 --> x27\n    x26 --> x27\n    shift --> x28\n    x25 --> x28\n    x27 --> x28\n    x24 --> x29\n    x24 --> x29\n    x1 --> x30\n    x29 --> x30\n    x30 --> x31\n    x28 --> x31\n    x31 --> x32\n    x32 --> x33\n    x28 --> x33\n    x33 --> x34\n    x34 --> x35\n    x28 --> x35\n    x35 --> x36\n    x36 --> O\n    x28 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_4290ef0e(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(argmin, centerofmass)\n    x12 = compose(initset, vmirror)\n    x13 = fork(insert, dmirror, x12)\n    x14 = fork(insert, cmirror, x13)\n    x15 = fork(insert, hmirror, x14)\n    x16 = compose(x11, x15)\n    x17 = apply(x16, x10)\n    x18 = size(x2)\n    x19 = apply(size, x2)\n    x20 = contained(ONE, x19)\n    x21 = increment(x18)\n    x22 = branch(x20, x18, x21)\n    x23 = double(x22)\n    x24 = decrement(x23)\n    x25 = apply(normalize, x17)\n    x26 = interval(ZERO, x22, ONE)\n    x27 = pair(x26, x26)\n    x28 = mpapply(shift, x25, x27)\n    x29 = astuple(x24, x24)\n    x30 = canvas(x1, x29)\n    x31 = paint(x30, x28)\n    x32 = rot90(x31)\n    x33 = paint(x32, x28)\n    x34 = rot90(x33)\n    x35 = paint(x34, x28)\n    x36 = rot90(x35)\n    O = paint(x36, x28)\n    return O", "line_count": 39}
{"name": "50846271", "graph": "graph TD\n    x1[ofcolor]\n    x2[prapply]\n    x3[lbind]\n    x4[compose]\n    x5[fork]\n    x6[fork]\n    x7[mfilter]\n    x8[fill]\n    x9[objects]\n    x10[colorfilter]\n    x11[valmax]\n    x12[halve]\n    x13[toivec]\n    x14[tojvec]\n    x15[rbind]\n    x16[rbind]\n    x17[rbind]\n    x18[rbind]\n    x19[rbind]\n    x20[rbind]\n    x21[compose]\n    x22[fork]\n    x23[fork]\n    x24[fork]\n    x25[fork]\n    x26[chain]\n    x27[rbind]\n    x28[compose]\n    x29[apply]\n    x30[rbind]\n    x31[rbind]\n    x32[rbind]\n    x33[rbind]\n    x34[fork]\n    x35[fork]\n    x36[fork]\n    x37[mapply]\n    x38[fill]\n    O[fill]\n    I[I]\n    I --> x1\n    TWO --> x1\n    connect --> x2\n    x1 --> x2\n    x1 --> x2\n    greater --> x3\n    SIX --> x3\n    x3 --> x4\n    size --> x4\n    either --> x5\n    vline --> x5\n    hline --> x5\n    both --> x6\n    x4 --> x6\n    x5 --> x6\n    x2 --> x7\n    x6 --> x7\n    I --> x8\n    TWO --> x8\n    x7 --> x8\n    x8 --> x9\n    T --> x9\n    F --> x9\n    F --> x9\n    x9 --> x10\n    TWO --> x10\n    x10 --> x11\n    width --> x11\n    x11 --> x12\n    x12 --> x13\n    x12 --> x14\n    add --> x15\n    ZERO_BY_TWO --> x15\n    add --> x16\n    TWO_BY_ZERO --> x16\n    subtract --> x17\n    ZERO_BY_TWO --> x17\n    subtract --> x18\n    TWO_BY_ZERO --> x18\n    colorcount --> x19\n    TWO --> x19\n    toobject --> x20\n    x8 --> x20\n    initset --> x21\n    x15 --> x21\n    insert --> x22\n    x16 --> x22\n    x21 --> x22\n    insert --> x23\n    x17 --> x23\n    x22 --> x23\n    insert --> x24\n    x18 --> x24\n    x23 --> x24\n    combine --> x25\n    dneighbors --> x25\n    x24 --> x25\n    x19 --> x26\n    x20 --> x26\n    x25 --> x26\n    argmax --> x27\n    x26 --> x27\n    x27 --> x28\n    toindices --> x28\n    x28 --> x29\n    x10 --> x29\n    add --> x30\n    x13 --> x30\n    subtract --> x31\n    x13 --> x31\n    add --> x32\n    x14 --> x32\n    subtract --> x33\n    x14 --> x33\n    connect --> x34\n    x30 --> x34\n    x31 --> x34\n    connect --> x35\n    x32 --> x35\n    x33 --> x35\n    combine --> x36\n    x34 --> x36\n    x35 --> x36\n    x36 --> x37\n    x29 --> x37\n    x8 --> x38\n    EIGHT --> x38\n    x37 --> x38\n    x38 --> O\n    TWO --> O\n    x1 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_50846271(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = mfilter(x2, x6)\n    x8 = fill(I, TWO, x7)\n    x9 = objects(x8, T, F, F)\n    x10 = colorfilter(x9, TWO)\n    x11 = valmax(x10, width)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = rbind(add, ZERO_BY_TWO)\n    x16 = rbind(add, TWO_BY_ZERO)\n    x17 = rbind(subtract, ZERO_BY_TWO)\n    x18 = rbind(subtract, TWO_BY_ZERO)\n    x19 = rbind(colorcount, TWO)\n    x20 = rbind(toobject, x8)\n    x21 = compose(initset, x15)\n    x22 = fork(insert, x16, x21)\n    x23 = fork(insert, x17, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = fork(combine, dneighbors, x24)\n    x26 = chain(x19, x20, x25)\n    x27 = rbind(argmax, x26)\n    x28 = compose(x27, toindices)\n    x29 = apply(x28, x10)\n    x30 = rbind(add, x13)\n    x31 = rbind(subtract, x13)\n    x32 = rbind(add, x14)\n    x33 = rbind(subtract, x14)\n    x34 = fork(connect, x30, x31)\n    x35 = fork(connect, x32, x33)\n    x36 = fork(combine, x34, x35)\n    x37 = mapply(x36, x29)\n    x38 = fill(x8, EIGHT, x37)\n    O = fill(x38, TWO, x1)\n    return O", "line_count": 41}
{"name": "b527c5c6", "graph": "graph TD\n    x1[objects]\n    x2[matcher]\n    x3[rbind]\n    x4[compose]\n    x5[compose]\n    x6[compose]\n    x7[compose]\n    x8[fork]\n    x9[fork]\n    x10[fork]\n    x11[fork]\n    x12[compose]\n    x13[compose]\n    x14[fork]\n    x15[fork]\n    x16[fork]\n    x17[compose]\n    x18[fork]\n    x19[mapply]\n    x20[fill]\n    x21[compose]\n    x22[sfilter]\n    x23[difference]\n    x24[chain]\n    x25[compose]\n    x26[compose]\n    x27[rbind]\n    x28[fork]\n    x29[lbind]\n    x30[lbind]\n    x31[lbind]\n    x32[compose]\n    x33[compose]\n    x34[compose]\n    x35[fork]\n    x36[fork]\n    x37[mapply]\n    x38[mapply]\n    x39[combine]\n    O[underfill]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    first --> x2\n    TWO --> x2\n    sfilter --> x3\n    x2 --> x3\n    lowermost --> x4\n    x3 --> x4\n    rightmost --> x5\n    x3 --> x5\n    uppermost --> x6\n    x3 --> x6\n    leftmost --> x7\n    x3 --> x7\n    equality --> x8\n    x4 --> x8\n    lowermost --> x8\n    equality --> x9\n    x5 --> x9\n    rightmost --> x9\n    equality --> x10\n    x6 --> x10\n    uppermost --> x10\n    equality --> x11\n    x7 --> x11\n    leftmost --> x11\n    invert --> x12\n    x10 --> x12\n    invert --> x13\n    x11 --> x13\n    add --> x14\n    x12 --> x14\n    x8 --> x14\n    add --> x15\n    x13 --> x15\n    x9 --> x15\n    astuple --> x16\n    x14 --> x16\n    x15 --> x16\n    center --> x17\n    x3 --> x17\n    shoot --> x18\n    x17 --> x18\n    x16 --> x18\n    x18 --> x19\n    x1 --> x19\n    I --> x20\n    TWO --> x20\n    x19 --> x20\n    vline --> x21\n    x18 --> x21\n    x1 --> x22\n    x21 --> x22\n    x1 --> x23\n    x22 --> x23\n    decrement --> x24\n    minimum --> x24\n    shape --> x24\n    increment --> x25\n    x24 --> x25\n    invert --> x26\n    x24 --> x26\n    interval --> x27\n    ONE --> x27\n    x27 --> x28\n    x26 --> x28\n    x25 --> x28\n    apply --> x29\n    toivec --> x29\n    apply --> x30\n    tojvec --> x30\n    lbind --> x31\n    shift --> x31\n    x31 --> x32\n    x18 --> x32\n    x29 --> x33\n    x28 --> x33\n    x30 --> x34\n    x28 --> x34\n    mapply --> x35\n    x32 --> x35\n    x33 --> x35\n    mapply --> x36\n    x32 --> x36\n    x34 --> x36\n    x35 --> x37\n    x23 --> x37\n    x36 --> x38\n    x22 --> x38\n    x37 --> x39\n    x38 --> x39\n    x20 --> O\n    THREE --> O\n    x39 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b527c5c6(I):\n    x1 = objects(I, F, F, T)\n    x2 = matcher(first, TWO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(lowermost, x3)\n    x5 = compose(rightmost, x3)\n    x6 = compose(uppermost, x3)\n    x7 = compose(leftmost, x3)\n    x8 = fork(equality, x4, lowermost)\n    x9 = fork(equality, x5, rightmost)\n    x10 = fork(equality, x6, uppermost)\n    x11 = fork(equality, x7, leftmost)\n    x12 = compose(invert, x10)\n    x13 = compose(invert, x11)\n    x14 = fork(add, x12, x8)\n    x15 = fork(add, x13, x9)\n    x16 = fork(astuple, x14, x15)\n    x17 = compose(center, x3)\n    x18 = fork(shoot, x17, x16)\n    x19 = mapply(x18, x1)\n    x20 = fill(I, TWO, x19)\n    x21 = compose(vline, x18)\n    x22 = sfilter(x1, x21)\n    x23 = difference(x1, x22)\n    x24 = chain(decrement, minimum, shape)\n    x25 = compose(increment, x24)\n    x26 = compose(invert, x24)\n    x27 = rbind(interval, ONE)\n    x28 = fork(x27, x26, x25)\n    x29 = lbind(apply, toivec)\n    x30 = lbind(apply, tojvec)\n    x31 = lbind(lbind, shift)\n    x32 = compose(x31, x18)\n    x33 = compose(x29, x28)\n    x34 = compose(x30, x28)\n    x35 = fork(mapply, x32, x33)\n    x36 = fork(mapply, x32, x34)\n    x37 = mapply(x35, x23)\n    x38 = mapply(x36, x22)\n    x39 = combine(x37, x38)\n    O = underfill(x20, THREE, x39)\n    return O", "line_count": 42}
{"name": "150deff5", "graph": "graph TD\n    x1[canvas]\n    x2[asobject]\n    x3[occurrences]\n    x4[lbind]\n    x5[mapply]\n    x6[fill]\n    x7[canvas]\n    x8[astuple]\n    x9[canvas]\n    x10[vconcat]\n    x11[asobject]\n    x12[occurrences]\n    x13[lbind]\n    x14[mapply]\n    x15[fill]\n    x16[astuple]\n    x17[canvas]\n    x18[asobject]\n    x19[occurrences]\n    x20[lbind]\n    x21[mapply]\n    x22[fill]\n    x23[hmirror]\n    x24[asobject]\n    x25[occurrences]\n    x26[lbind]\n    x27[mapply]\n    x28[fill]\n    x29[dmirror]\n    x30[asobject]\n    x31[occurrences]\n    x32[lbind]\n    x33[mapply]\n    x34[fill]\n    x35[vmirror]\n    x36[asobject]\n    x37[occurrences]\n    x38[lbind]\n    x39[mapply]\n    O[fill]\n    I[I]\n    FIVE --> x1\n    TWO_BY_TWO --> x1\n    x1 --> x2\n    I --> x3\n    x2 --> x3\n    shift --> x4\n    x2 --> x4\n    x4 --> x5\n    x3 --> x5\n    I --> x6\n    EIGHT --> x6\n    x5 --> x6\n    FIVE --> x7\n    UNITY --> x7\n    TWO --> x8\n    ONE --> x8\n    EIGHT --> x9\n    x8 --> x9\n    x9 --> x10\n    x7 --> x10\n    x10 --> x11\n    x6 --> x12\n    x11 --> x12\n    shift --> x13\n    x11 --> x13\n    x13 --> x14\n    x12 --> x14\n    x6 --> x15\n    TWO --> x15\n    x14 --> x15\n    ONE --> x16\n    THREE --> x16\n    FIVE --> x17\n    x16 --> x17\n    x17 --> x18\n    x15 --> x19\n    x18 --> x19\n    shift --> x20\n    x18 --> x20\n    x20 --> x21\n    x19 --> x21\n    x15 --> x22\n    TWO --> x22\n    x21 --> x22\n    x10 --> x23\n    x23 --> x24\n    x22 --> x25\n    x24 --> x25\n    shift --> x26\n    x24 --> x26\n    x26 --> x27\n    x25 --> x27\n    x22 --> x28\n    TWO --> x28\n    x27 --> x28\n    x10 --> x29\n    x29 --> x30\n    x28 --> x31\n    x30 --> x31\n    shift --> x32\n    x30 --> x32\n    x32 --> x33\n    x31 --> x33\n    x28 --> x34\n    TWO --> x34\n    x33 --> x34\n    x29 --> x35\n    x35 --> x36\n    x34 --> x37\n    x36 --> x37\n    shift --> x38\n    x36 --> x38\n    x38 --> x39\n    x37 --> x39\n    x34 --> O\n    TWO --> O\n    x39 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_150deff5(I):\n    x1 = canvas(FIVE, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    x6 = fill(I, EIGHT, x5)\n    x7 = canvas(FIVE, UNITY)\n    x8 = astuple(TWO, ONE)\n    x9 = canvas(EIGHT, x8)\n    x10 = vconcat(x9, x7)\n    x11 = asobject(x10)\n    x12 = occurrences(x6, x11)\n    x13 = lbind(shift, x11)\n    x14 = mapply(x13, x12)\n    x15 = fill(x6, TWO, x14)\n    x16 = astuple(ONE, THREE)\n    x17 = canvas(FIVE, x16)\n    x18 = asobject(x17)\n    x19 = occurrences(x15, x18)\n    x20 = lbind(shift, x18)\n    x21 = mapply(x20, x19)\n    x22 = fill(x15, TWO, x21)\n    x23 = hmirror(x10)\n    x24 = asobject(x23)\n    x25 = occurrences(x22, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    x28 = fill(x22, TWO, x27)\n    x29 = dmirror(x10)\n    x30 = asobject(x29)\n    x31 = occurrences(x28, x30)\n    x32 = lbind(shift, x30)\n    x33 = mapply(x32, x31)\n    x34 = fill(x28, TWO, x33)\n    x35 = vmirror(x29)\n    x36 = asobject(x35)\n    x37 = occurrences(x34, x36)\n    x38 = lbind(shift, x36)\n    x39 = mapply(x38, x37)\n    O = fill(x34, TWO, x39)\n    return O", "line_count": 42}
{"name": "b7249182", "graph": "graph TD\n    x1[objects]\n    x2[merge]\n    x3[portrait]\n    x4[branch]\n    x5[x4]\n    x6[objects]\n    x7[order]\n    x8[first]\n    x9[last]\n    x10[color]\n    x11[color]\n    x12[compose]\n    x13[x12]\n    x14[x12]\n    x15[connect]\n    x16[centerofmass]\n    x17[connect]\n    x18[fill]\n    x19[fill]\n    x20[add]\n    x21[initset]\n    x22[insert]\n    x23[toobject]\n    x24[astuple]\n    x25[shift]\n    x26[shift]\n    x27[combine]\n    x28[ulcorner]\n    x29[urcorner]\n    x30[connect]\n    x31[shift]\n    x32[llcorner]\n    x33[lrcorner]\n    x34[connect]\n    x35[shift]\n    x36[paint]\n    x37[fill]\n    x38[fill]\n    x39[cover]\n    O[x4]\n    I[I]\n    I --> x1\n    T --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    x2 --> x3\n    x3 --> x4\n    identity --> x4\n    dmirror --> x4\n    I --> x5\n    x5 --> x6\n    T --> x6\n    F --> x6\n    T --> x6\n    x6 --> x7\n    uppermost --> x7\n    x7 --> x8\n    x7 --> x9\n    x8 --> x10\n    x9 --> x11\n    first --> x12\n    toindices --> x12\n    x8 --> x13\n    x9 --> x14\n    x13 --> x15\n    x14 --> x15\n    x15 --> x16\n    x13 --> x17\n    x16 --> x17\n    x5 --> x18\n    x11 --> x18\n    x15 --> x18\n    x18 --> x19\n    x10 --> x19\n    x17 --> x19\n    x16 --> x20\n    DOWN --> x20\n    x16 --> x21\n    x20 --> x22\n    x21 --> x22\n    x22 --> x23\n    x19 --> x23\n    ZERO --> x24\n    NEG_TWO --> x24\n    x23 --> x25\n    ZERO_BY_TWO --> x25\n    x23 --> x26\n    x24 --> x26\n    x25 --> x27\n    x26 --> x27\n    x27 --> x28\n    x27 --> x29\n    x28 --> x30\n    x29 --> x30\n    x30 --> x31\n    UP --> x31\n    x27 --> x32\n    x27 --> x33\n    x32 --> x34\n    x33 --> x34\n    x34 --> x35\n    DOWN --> x35\n    x19 --> x36\n    x27 --> x36\n    x36 --> x37\n    x10 --> x37\n    x31 --> x37\n    x37 --> x38\n    x11 --> x38\n    x35 --> x38\n    x38 --> x39\n    x22 --> x39\n    x39 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b7249182(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)\n    return O", "line_count": 42}
{"name": "9d9215db", "graph": "graph TD\n    x1[rot90]\n    x2[rot180]\n    x3[rot270]\n    x4[initset]\n    x5[chain]\n    x6[insert]\n    x7[insert]\n    x8[insert]\n    x9[argmax]\n    x10[vmirror]\n    x11[papply]\n    x12[lbind]\n    x13[apply]\n    x14[partition]\n    x15[sizefilter]\n    x16[apply]\n    x17[apply]\n    x18[combine]\n    x19[cover]\n    x20[tojvec]\n    x21[rbind]\n    x22[rbind]\n    x23[compose]\n    x24[compose]\n    x25[fork]\n    x26[compose]\n    x27[rbind]\n    x28[chain]\n    x29[fork]\n    x30[fork]\n    x31[mapply]\n    x32[paint]\n    x33[rot90]\n    x34[rot180]\n    x35[rot270]\n    x36[papply]\n    x37[apply]\n    x38[papply]\n    x39[apply]\n    x40[papply]\n    O[apply]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    I --> x4\n    numcolors --> x5\n    lefthalf --> x5\n    tophalf --> x5\n    x1 --> x6\n    x4 --> x6\n    x2 --> x7\n    x6 --> x7\n    x3 --> x8\n    x7 --> x8\n    x8 --> x9\n    x5 --> x9\n    x9 --> x10\n    pair --> x11\n    x9 --> x11\n    x10 --> x11\n    apply --> x12\n    maximum --> x12\n    x12 --> x13\n    x11 --> x13\n    x13 --> x14\n    x14 --> x15\n    FOUR --> x15\n    llcorner --> x16\n    x15 --> x16\n    lrcorner --> x17\n    x15 --> x17\n    x16 --> x18\n    x17 --> x18\n    x13 --> x19\n    x18 --> x19\n    NEG_TWO --> x20\n    add --> x21\n    ZERO_BY_TWO --> x21\n    add --> x22\n    x20 --> x22\n    x21 --> x23\n    ulcorner --> x23\n    x22 --> x24\n    urcorner --> x24\n    connect --> x25\n    x23 --> x25\n    x24 --> x25\n    even --> x26\n    last --> x26\n    sfilter --> x27\n    x26 --> x27\n    normalize --> x28\n    x27 --> x28\n    x25 --> x28\n    shift --> x29\n    x28 --> x29\n    x23 --> x29\n    recolor --> x30\n    color --> x30\n    x29 --> x30\n    x30 --> x31\n    x15 --> x31\n    x19 --> x32\n    x31 --> x32\n    x32 --> x33\n    x32 --> x34\n    x32 --> x35\n    pair --> x36\n    x32 --> x36\n    x33 --> x36\n    x12 --> x37\n    x36 --> x37\n    pair --> x38\n    x37 --> x38\n    x34 --> x38\n    x12 --> x39\n    x38 --> x39\n    pair --> x40\n    x39 --> x40\n    x35 --> x40\n    x12 --> O\n    x40 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_9d9215db(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)\n    x39 = apply(x12, x38)\n    x40 = papply(pair, x39, x35)\n    O = apply(x12, x40)\n    return O", "line_count": 43}
{"name": "6855a6e4", "graph": "graph TD\n    x1[fgpartition]\n    x2[rot90]\n    x3[colorfilter]\n    x4[first]\n    x5[portrait]\n    x6[branch]\n    x7[objects]\n    x8[colorfilter]\n    x9[apply]\n    x10[valmin]\n    x11[compose]\n    x12[matcher]\n    x13[compose]\n    x14[extract]\n    x15[extract]\n    x16[ulcorner]\n    x17[ulcorner]\n    x18[subgrid]\n    x19[subgrid]\n    x20[hmirror]\n    x21[hmirror]\n    x22[ofcolor]\n    x23[recolor]\n    x24[ofcolor]\n    x25[recolor]\n    x26[height]\n    x27[height]\n    x28[add]\n    x29[add]\n    x30[toivec]\n    x31[toivec]\n    x32[add]\n    x33[subtract]\n    x34[shift]\n    x35[shift]\n    x36[merge]\n    x37[cover]\n    x38[paint]\n    x39[paint]\n    x40[rot270]\n    O[branch]\n    I[I]\n    I --> x1\n    I --> x2\n    x1 --> x3\n    TWO --> x3\n    x3 --> x4\n    x4 --> x5\n    x5 --> x6\n    I --> x6\n    x2 --> x6\n    x6 --> x7\n    T --> x7\n    F --> x7\n    T --> x7\n    x7 --> x8\n    FIVE --> x8\n    center --> x9\n    x8 --> x9\n    x9 --> x10\n    first --> x10\n    first --> x11\n    center --> x11\n    x11 --> x12\n    x10 --> x12\n    flip --> x13\n    x12 --> x13\n    x8 --> x14\n    x12 --> x14\n    x8 --> x15\n    x13 --> x15\n    x14 --> x16\n    x15 --> x17\n    x14 --> x18\n    x6 --> x18\n    x15 --> x19\n    x6 --> x19\n    x18 --> x20\n    x19 --> x21\n    x20 --> x22\n    FIVE --> x22\n    FIVE --> x23\n    x22 --> x23\n    x21 --> x24\n    FIVE --> x24\n    FIVE --> x25\n    x24 --> x25\n    x23 --> x26\n    x25 --> x27\n    THREE --> x28\n    x26 --> x28\n    THREE --> x29\n    x27 --> x29\n    x28 --> x30\n    x29 --> x31\n    x16 --> x32\n    x30 --> x32\n    x17 --> x33\n    x31 --> x33\n    x23 --> x34\n    x32 --> x34\n    x25 --> x35\n    x33 --> x35\n    x8 --> x36\n    x6 --> x37\n    x36 --> x37\n    x37 --> x38\n    x34 --> x38\n    x38 --> x39\n    x35 --> x39\n    x39 --> x40\n    x5 --> O\n    x39 --> O\n    x40 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_6855a6e4(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, I, x2)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, FIVE)\n    x9 = apply(center, x8)\n    x10 = valmin(x9, first)\n    x11 = compose(first, center)\n    x12 = matcher(x11, x10)\n    x13 = compose(flip, x12)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, x6)\n    x19 = subgrid(x15, x6)\n    x20 = hmirror(x18)\n    x21 = hmirror(x19)\n    x22 = ofcolor(x20, FIVE)\n    x23 = recolor(FIVE, x22)\n    x24 = ofcolor(x21, FIVE)\n    x25 = recolor(FIVE, x24)\n    x26 = height(x23)\n    x27 = height(x25)\n    x28 = add(THREE, x26)\n    x29 = add(THREE, x27)\n    x30 = toivec(x28)\n    x31 = toivec(x29)\n    x32 = add(x16, x30)\n    x33 = subtract(x17, x31)\n    x34 = shift(x23, x32)\n    x35 = shift(x25, x33)\n    x36 = merge(x8)\n    x37 = cover(x6, x36)\n    x38 = paint(x37, x34)\n    x39 = paint(x38, x35)\n    x40 = rot270(x39)\n    O = branch(x5, x39, x40)\n    return O", "line_count": 43}
{"name": "264363fd", "graph": "graph TD\n    x1[objects]\n    x2[argmin]\n    x3[normalize]\n    x4[height]\n    x5[width]\n    x6[equality]\n    x7[equality]\n    x8[astuple]\n    x9[add]\n    x10[invert]\n    x11[center]\n    x12[index]\n    x13[branch]\n    x14[add]\n    x15[index]\n    x16[astuple]\n    x17[initset]\n    x18[cover]\n    x19[mostcolor]\n    x20[ofcolor]\n    x21[occurrences]\n    x22[objects]\n    x23[rbind]\n    x24[rbind]\n    x25[compose]\n    x26[lbind]\n    x27[lbind]\n    x28[compose]\n    x29[compose]\n    x30[branch]\n    x31[branch]\n    x32[fork]\n    x33[lbind]\n    x34[compose]\n    x35[fork]\n    x36[compose]\n    x37[fork]\n    x38[mapply]\n    x39[paint]\n    x40[shift]\n    x41[lbind]\n    x42[mapply]\n    x43[paint]\n    O[fill]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x2 --> x4\n    x2 --> x5\n    x4 --> x6\n    FIVE --> x6\n    x5 --> x7\n    FIVE --> x7\n    x6 --> x8\n    x7 --> x8\n    UNITY --> x9\n    x8 --> x9\n    x9 --> x10\n    x2 --> x11\n    I --> x12\n    x11 --> x12\n    x6 --> x13\n    UP --> x13\n    RIGHT --> x13\n    x13 --> x14\n    x11 --> x14\n    I --> x15\n    x14 --> x15\n    x12 --> x16\n    ORIGIN --> x16\n    x16 --> x17\n    I --> x18\n    x2 --> x18\n    x18 --> x19\n    x18 --> x20\n    x19 --> x20\n    x18 --> x21\n    x17 --> x21\n    x18 --> x22\n    F --> x22\n    F --> x22\n    T --> x22\n    occurrences --> x23\n    x17 --> x23\n    subgrid --> x24\n    x18 --> x24\n    x23 --> x25\n    x24 --> x25\n    mapply --> x26\n    vfrontier --> x26\n    mapply --> x27\n    hfrontier --> x27\n    x26 --> x28\n    x25 --> x28\n    x27 --> x29\n    x25 --> x29\n    x6 --> x30\n    x28 --> x30\n    x29 --> x30\n    x7 --> x31\n    x29 --> x31\n    x28 --> x31\n    combine --> x32\n    x30 --> x32\n    x31 --> x32\n    recolor --> x33\n    x15 --> x33\n    x33 --> x34\n    x32 --> x34\n    paint --> x35\n    x24 --> x35\n    x34 --> x35\n    asobject --> x36\n    x35 --> x36\n    shift --> x37\n    x36 --> x37\n    ulcorner --> x37\n    x37 --> x38\n    x22 --> x38\n    x18 --> x39\n    x38 --> x39\n    x3 --> x40\n    x10 --> x40\n    shift --> x41\n    x40 --> x41\n    x41 --> x42\n    x21 --> x42\n    x39 --> x43\n    x42 --> x43\n    x43 --> O\n    x19 --> O\n    x20 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_264363fd(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = equality(x4, FIVE)\n    x7 = equality(x5, FIVE)\n    x8 = astuple(x6, x7)\n    x9 = add(UNITY, x8)\n    x10 = invert(x9)\n    x11 = center(x2)\n    x12 = index(I, x11)\n    x13 = branch(x6, UP, RIGHT)\n    x14 = add(x13, x11)\n    x15 = index(I, x14)\n    x16 = astuple(x12, ORIGIN)\n    x17 = initset(x16)\n    x18 = cover(I, x2)\n    x19 = mostcolor(x18)\n    x20 = ofcolor(x18, x19)\n    x21 = occurrences(x18, x17)\n    x22 = objects(x18, F, F, T)\n    x23 = rbind(occurrences, x17)\n    x24 = rbind(subgrid, x18)\n    x25 = compose(x23, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = lbind(mapply, hfrontier)\n    x28 = compose(x26, x25)\n    x29 = compose(x27, x25)\n    x30 = branch(x6, x28, x29)\n    x31 = branch(x7, x29, x28)\n    x32 = fork(combine, x30, x31)\n    x33 = lbind(recolor, x15)\n    x34 = compose(x33, x32)\n    x35 = fork(paint, x24, x34)\n    x36 = compose(asobject, x35)\n    x37 = fork(shift, x36, ulcorner)\n    x38 = mapply(x37, x22)\n    x39 = paint(x18, x38)\n    x40 = shift(x3, x10)\n    x41 = lbind(shift, x40)\n    x42 = mapply(x41, x21)\n    x43 = paint(x39, x42)\n    O = fill(x43, x19, x20)\n    return O", "line_count": 46}
{"name": "7df24a62", "graph": "graph TD\n    x1[height]\n    x2[width]\n    x3[ofcolor]\n    x4[ofcolor]\n    x5[ulcorner]\n    x6[subgrid]\n    x7[rot90]\n    x8[rot180]\n    x9[rot270]\n    x10[matcher]\n    x11[rbind]\n    x12[compose]\n    x13[rbind]\n    x14[rbind]\n    x15[compose]\n    x16[lbind]\n    x17[chain]\n    x18[lbind]\n    x19[chain]\n    x20[rbind]\n    x21[lbind]\n    x22[compose]\n    x23[compose]\n    x24[fork]\n    x25[rbind]\n    x26[lbind]\n    x27[chain]\n    x28[astuple]\n    x29[astuple]\n    x30[combine]\n    x31[apply]\n    x32[lbind]\n    x33[apply]\n    x34[apply]\n    x35[apply]\n    x36[lbind]\n    x37[apply]\n    x38[apply]\n    x39[papply]\n    x40[lbind]\n    x41[apply]\n    x42[papply]\n    x43[apply]\n    x44[mpapply]\n    O[fill]\n    I[I]\n    I --> x1\n    I --> x2\n    I --> x3\n    ONE --> x3\n    I --> x4\n    FOUR --> x4\n    x3 --> x5\n    x3 --> x6\n    I --> x6\n    x6 --> x7\n    x6 --> x8\n    x6 --> x9\n    size --> x10\n    ZERO --> x10\n    ofcolor --> x11\n    ONE --> x11\n    normalize --> x12\n    x11 --> x12\n    ofcolor --> x13\n    FOUR --> x13\n    shift --> x14\n    x5 --> x14\n    x14 --> x15\n    x13 --> x15\n    subtract --> x16\n    x1 --> x16\n    increment --> x17\n    x16 --> x17\n    height --> x17\n    subtract --> x18\n    x2 --> x18\n    increment --> x19\n    x18 --> x19\n    width --> x19\n    interval --> x20\n    ONE --> x20\n    x20 --> x21\n    ZERO --> x21\n    x21 --> x22\n    x17 --> x22\n    x21 --> x23\n    x19 --> x23\n    product --> x24\n    x22 --> x24\n    x23 --> x24\n    shift --> x25\n    NEG_UNITY --> x25\n    lbind --> x26\n    shift --> x26\n    x26 --> x27\n    x25 --> x27\n    x12 --> x27\n    x6 --> x28\n    x7 --> x28\n    x8 --> x29\n    x9 --> x29\n    x28 --> x30\n    x29 --> x30\n    x15 --> x31\n    x30 --> x31\n    difference --> x32\n    x4 --> x32\n    x32 --> x33\n    x31 --> x33\n    normalize --> x34\n    x31 --> x34\n    x24 --> x35\n    x34 --> x35\n    rbind --> x36\n    difference --> x36\n    x26 --> x37\n    x34 --> x37\n    x36 --> x38\n    x33 --> x38\n    compose --> x39\n    x38 --> x39\n    x37 --> x39\n    compose --> x40\n    x10 --> x40\n    x40 --> x41\n    x39 --> x41\n    sfilter --> x42\n    x35 --> x42\n    x41 --> x42\n    x27 --> x43\n    x30 --> x43\n    mapply --> x44\n    x43 --> x44\n    x42 --> x44\n    I --> O\n    ONE --> O\n    x44 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7df24a62(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ONE)\n    x4 = ofcolor(I, FOUR)\n    x5 = ulcorner(x3)\n    x6 = subgrid(x3, I)\n    x7 = rot90(x6)\n    x8 = rot180(x6)\n    x9 = rot270(x6)\n    x10 = matcher(size, ZERO)\n    x11 = rbind(ofcolor, ONE)\n    x12 = compose(normalize, x11)\n    x13 = rbind(ofcolor, FOUR)\n    x14 = rbind(shift, x5)\n    x15 = compose(x14, x13)\n    x16 = lbind(subtract, x1)\n    x17 = chain(increment, x16, height)\n    x18 = lbind(subtract, x2)\n    x19 = chain(increment, x18, width)\n    x20 = rbind(interval, ONE)\n    x21 = lbind(x20, ZERO)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x19)\n    x24 = fork(product, x22, x23)\n    x25 = rbind(shift, NEG_UNITY)\n    x26 = lbind(lbind, shift)\n    x27 = chain(x26, x25, x12)\n    x28 = astuple(x6, x7)\n    x29 = astuple(x8, x9)\n    x30 = combine(x28, x29)\n    x31 = apply(x15, x30)\n    x32 = lbind(difference, x4)\n    x33 = apply(x32, x31)\n    x34 = apply(normalize, x31)\n    x35 = apply(x24, x34)\n    x36 = lbind(rbind, difference)\n    x37 = apply(x26, x34)\n    x38 = apply(x36, x33)\n    x39 = papply(compose, x38, x37)\n    x40 = lbind(compose, x10)\n    x41 = apply(x40, x39)\n    x42 = papply(sfilter, x35, x41)\n    x43 = apply(x27, x30)\n    x44 = mpapply(mapply, x43, x42)\n    O = fill(I, ONE, x44)\n    return O", "line_count": 47}
{"name": "f15e1fac", "graph": "graph TD\n    x1[ofcolor]\n    x2[portrait]\n    x3[branch]\n    x4[x3]\n    x5[leftmost]\n    x6[equality]\n    x7[branch]\n    x8[x7]\n    x9[ofcolor]\n    x10[uppermost]\n    x11[equality]\n    x12[branch]\n    x13[x12]\n    x14[ofcolor]\n    x15[ofcolor]\n    x16[rbind]\n    x17[mapply]\n    x18[height]\n    x19[apply]\n    x20[insert]\n    x21[insert]\n    x22[apply]\n    x23[order]\n    x24[order]\n    x25[size]\n    x26[increment]\n    x27[interval]\n    x28[apply]\n    x29[pair]\n    x30[lbind]\n    x31[compose]\n    x32[chain]\n    x33[fork]\n    x34[chain]\n    x35[fork]\n    x36[fork]\n    x37[lbind]\n    x38[lbind]\n    x39[chain]\n    x40[apply]\n    x41[papply]\n    x42[merge]\n    x43[fill]\n    x44[chain]\n    O[x44]\n    I[I]\n    I --> x1\n    TWO --> x1\n    x1 --> x2\n    x2 --> x3\n    identity --> x3\n    dmirror --> x3\n    I --> x4\n    x1 --> x5\n    x5 --> x6\n    ZERO --> x6\n    x6 --> x7\n    identity --> x7\n    vmirror --> x7\n    x4 --> x8\n    x8 --> x9\n    EIGHT --> x9\n    x9 --> x10\n    x10 --> x11\n    ZERO --> x11\n    x11 --> x12\n    identity --> x12\n    hmirror --> x12\n    x8 --> x13\n    x13 --> x14\n    EIGHT --> x14\n    x13 --> x15\n    TWO --> x15\n    shoot --> x16\n    DOWN --> x16\n    x16 --> x17\n    x14 --> x17\n    x13 --> x18\n    first --> x19\n    x15 --> x19\n    ZERO --> x20\n    x19 --> x20\n    x18 --> x21\n    x19 --> x21\n    decrement --> x22\n    x21 --> x22\n    x20 --> x23\n    identity --> x23\n    x22 --> x24\n    identity --> x24\n    x15 --> x25\n    x25 --> x26\n    ZERO --> x27\n    x26 --> x27\n    ONE --> x27\n    tojvec --> x28\n    x27 --> x28\n    x23 --> x29\n    x24 --> x29\n    sfilter --> x30\n    x17 --> x30\n    first --> x31\n    last --> x31\n    decrement --> x32\n    first --> x32\n    first --> x32\n    greater --> x33\n    x31 --> x33\n    x32 --> x33\n    increment --> x34\n    last --> x34\n    first --> x34\n    greater --> x35\n    x34 --> x35\n    x31 --> x35\n    both --> x36\n    x33 --> x36\n    x35 --> x36\n    lbind --> x37\n    astuple --> x37\n    compose --> x38\n    x36 --> x38\n    x30 --> x39\n    x38 --> x39\n    x37 --> x39\n    x39 --> x40\n    x29 --> x40\n    shift --> x41\n    x40 --> x41\n    x28 --> x41\n    x41 --> x42\n    x13 --> x43\n    EIGHT --> x43\n    x42 --> x43\n    x3 --> x44\n    x7 --> x44\n    x12 --> x44\n    x43 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_f15e1fac(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, EIGHT)\n    x10 = uppermost(x9)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, EIGHT)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)\n    x40 = apply(x39, x29)\n    x41 = papply(shift, x40, x28)\n    x42 = merge(x41)\n    x43 = fill(x13, EIGHT, x42)\n    x44 = chain(x3, x7, x12)\n    O = x44(x43)\n    return O", "line_count": 47}
{"name": "234bbc79", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[compose]\n    x4[fork]\n    x5[apply]\n    x6[order]\n    x7[compose]\n    x8[lbind]\n    x9[compose]\n    x10[compose]\n    x11[fork]\n    x12[fork]\n    x13[compose]\n    x14[rbind]\n    x15[lbind]\n    x16[lbind]\n    x17[chain]\n    x18[fork]\n    x19[fork]\n    x20[compose]\n    x21[compose]\n    x22[astuple]\n    x23[initset]\n    x24[lbind]\n    x25[chain]\n    x26[compose]\n    x27[fork]\n    x28[compose]\n    x29[compose]\n    x30[fork]\n    x31[fork]\n    x32[fork]\n    x33[fork]\n    x34[size]\n    x35[power]\n    x36[astuple]\n    x37[x35]\n    x38[first]\n    x39[width]\n    x40[decrement]\n    x41[astuple]\n    x42[canvas]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    F --> x1\n    T --> x1\n    other --> x2\n    FIVE --> x2\n    x2 --> x3\n    palette --> x3\n    recolor --> x4\n    x3 --> x4\n    identity --> x4\n    x4 --> x5\n    x1 --> x5\n    x5 --> x6\n    leftmost --> x6\n    last --> x7\n    last --> x7\n    matcher --> x8\n    x7 --> x8\n    x8 --> x9\n    leftmost --> x9\n    x8 --> x10\n    rightmost --> x10\n    sfilter --> x11\n    identity --> x11\n    x9 --> x11\n    sfilter --> x12\n    identity --> x12\n    x10 --> x12\n    dneighbors --> x13\n    last --> x13\n    chain --> x14\n    x13 --> x14\n    x14 --> x15\n    size --> x15\n    rbind --> x16\n    intersection --> x16\n    x15 --> x17\n    x16 --> x17\n    toindices --> x17\n    argmin --> x18\n    x11 --> x18\n    x17 --> x18\n    argmin --> x19\n    x12 --> x19\n    x17 --> x19\n    last --> x20\n    x18 --> x20\n    last --> x21\n    x19 --> x21\n    ZERO --> x22\n    DOWN_LEFT --> x22\n    x22 --> x23\n    add --> x24\n    RIGHT --> x24\n    x20 --> x25\n    first --> x25\n    last --> x25\n    x21 --> x26\n    first --> x26\n    subtract --> x27\n    x26 --> x27\n    x25 --> x27\n    first --> x28\n    last --> x28\n    x24 --> x29\n    x27 --> x29\n    shift --> x30\n    x28 --> x30\n    x29 --> x30\n    combine --> x31\n    first --> x31\n    x30 --> x31\n    remove --> x32\n    x28 --> x32\n    last --> x32\n    astuple --> x33\n    x31 --> x33\n    x32 --> x33\n    x1 --> x34\n    x33 --> x35\n    x34 --> x35\n    x23 --> x36\n    x6 --> x36\n    x36 --> x37\n    x37 --> x38\n    x38 --> x39\n    x39 --> x40\n    THREE --> x41\n    x40 --> x41\n    ZERO --> x42\n    x41 --> x42\n    x42 --> O\n    x38 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_234bbc79(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = order(x5, leftmost)\n    x7 = compose(last, last)\n    x8 = lbind(matcher, x7)\n    x9 = compose(x8, leftmost)\n    x10 = compose(x8, rightmost)\n    x11 = fork(sfilter, identity, x9)\n    x12 = fork(sfilter, identity, x10)\n    x13 = compose(dneighbors, last)\n    x14 = rbind(chain, x13)\n    x15 = lbind(x14, size)\n    x16 = lbind(rbind, intersection)\n    x17 = chain(x15, x16, toindices)\n    x18 = fork(argmin, x11, x17)\n    x19 = fork(argmin, x12, x17)\n    x20 = compose(last, x18)\n    x21 = compose(last, x19)\n    x22 = astuple(ZERO, DOWN_LEFT)\n    x23 = initset(x22)\n    x24 = lbind(add, RIGHT)\n    x25 = chain(x20, first, last)\n    x26 = compose(x21, first)\n    x27 = fork(subtract, x26, x25)\n    x28 = compose(first, last)\n    x29 = compose(x24, x27)\n    x30 = fork(shift, x28, x29)\n    x31 = fork(combine, first, x30)\n    x32 = fork(remove, x28, last)\n    x33 = fork(astuple, x31, x32)\n    x34 = size(x1)\n    x35 = power(x33, x34)\n    x36 = astuple(x23, x6)\n    x37 = x35(x36)\n    x38 = first(x37)\n    x39 = width(x38)\n    x40 = decrement(x39)\n    x41 = astuple(THREE, x40)\n    x42 = canvas(ZERO, x41)\n    O = paint(x42, x38)\n    return O", "line_count": 45}
{"name": "22233c11", "graph": "graph TD\n    x1[objects]\n    x2[rbind]\n    x3[chain]\n    x4[fork]\n    x5[compose]\n    x6[fork]\n    x7[compose]\n    x8[lbind]\n    x9[compose]\n    x10[fork]\n    x11[mapply]\n    O[fill]\n    I[I]\n    I --> x1\n    T --> x1\n    T --> x1\n    T --> x1\n    upscale --> x2\n    TWO --> x2\n    invert --> x3\n    halve --> x3\n    shape --> x3\n    combine --> x4\n    hfrontier --> x4\n    vfrontier --> x4\n    x2 --> x5\n    vmirror --> x5\n    shift --> x6\n    x5 --> x6\n    x3 --> x6\n    toindices --> x7\n    x6 --> x7\n    mapply --> x8\n    x4 --> x8\n    x8 --> x9\n    toindices --> x9\n    difference --> x10\n    x7 --> x10\n    x9 --> x10\n    x10 --> x11\n    x1 --> x11\n    I --> O\n    EIGHT --> O\n    x11 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_22233c11(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(invert, halve, shape)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x2, vmirror)\n    x6 = fork(shift, x5, x3)\n    x7 = compose(toindices, x6)\n    x8 = lbind(mapply, x4)\n    x9 = compose(x8, toindices)\n    x10 = fork(difference, x7, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, EIGHT, x11)\n    return O", "line_count": 14}
{"name": "2dd70a9a", "graph": "graph TD\n    x1[ofcolor]\n    x2[ofcolor]\n    x3[vline]\n    x4[vline]\n    x5[center]\n    x6[branch]\n    x7[x6]\n    x8[x6]\n    x9[greater]\n    x10[both]\n    x11[branch]\n    x12[x11]\n    x13[branch]\n    x14[x13]\n    x15[astuple]\n    x16[other]\n    x17[subtract]\n    x18[shoot]\n    x19[underfill]\n    x20[objects]\n    x21[colorfilter]\n    x22[rbind]\n    x23[sfilter]\n    x24[difference]\n    x25[merge]\n    x26[cover]\n    x27[shoot]\n    x28[shoot]\n    x29[shoot]\n    x30[shoot]\n    x31[combine]\n    x32[combine]\n    x33[branch]\n    x34[ofcolor]\n    x35[initset]\n    x36[rbind]\n    x37[compose]\n    x38[argmax]\n    x39[initset]\n    x40[gravitate]\n    x41[crement]\n    x42[add]\n    x43[connect]\n    x44[fill]\n    x45[connect]\n    x46[underfill]\n    O[replace]\n    I[I]\n    I --> x1\n    TWO --> x1\n    I --> x2\n    THREE --> x2\n    x1 --> x3\n    x2 --> x4\n    x1 --> x5\n    x4 --> x6\n    uppermost --> x6\n    rightmost --> x6\n    x1 --> x7\n    x2 --> x8\n    x7 --> x9\n    x8 --> x9\n    x4 --> x10\n    x9 --> x10\n    x10 --> x11\n    lowermost --> x11\n    uppermost --> x11\n    x2 --> x12\n    x4 --> x13\n    leftmost --> x13\n    rightmost --> x13\n    x2 --> x14\n    x12 --> x15\n    x14 --> x15\n    x2 --> x16\n    x15 --> x16\n    x15 --> x17\n    x16 --> x17\n    x15 --> x18\n    x17 --> x18\n    I --> x19\n    ONE --> x19\n    x18 --> x19\n    x19 --> x20\n    T --> x20\n    F --> x20\n    F --> x20\n    x20 --> x21\n    ONE --> x21\n    adjacent --> x22\n    x2 --> x22\n    x21 --> x23\n    x22 --> x23\n    x21 --> x24\n    x23 --> x24\n    x24 --> x25\n    x19 --> x26\n    x25 --> x26\n    x5 --> x27\n    DOWN --> x27\n    x5 --> x28\n    UP --> x28\n    x5 --> x29\n    LEFT --> x29\n    x5 --> x30\n    RIGHT --> x30\n    x27 --> x31\n    x28 --> x31\n    x29 --> x32\n    x30 --> x32\n    x3 --> x33\n    x31 --> x33\n    x32 --> x33\n    x26 --> x34\n    ONE --> x34\n    x15 --> x35\n    manhattan --> x36\n    x35 --> x36\n    x36 --> x37\n    initset --> x37\n    x34 --> x38\n    x37 --> x38\n    x38 --> x39\n    x39 --> x40\n    x33 --> x40\n    x40 --> x41\n    x38 --> x42\n    x41 --> x42\n    x38 --> x43\n    x42 --> x43\n    x26 --> x44\n    ONE --> x44\n    x43 --> x44\n    x42 --> x45\n    x5 --> x45\n    x44 --> x46\n    ONE --> x46\n    x45 --> x46\n    x46 --> O\n    ONE --> O\n    THREE --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_2dd70a9a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = vline(x1)\n    x4 = vline(x2)\n    x5 = center(x1)\n    x6 = branch(x4, uppermost, rightmost)\n    x7 = x6(x1)\n    x8 = x6(x2)\n    x9 = greater(x7, x8)\n    x10 = both(x4, x9)\n    x11 = branch(x10, lowermost, uppermost)\n    x12 = x11(x2)\n    x13 = branch(x4, leftmost, rightmost)\n    x14 = x13(x2)\n    x15 = astuple(x12, x14)\n    x16 = other(x2, x15)\n    x17 = subtract(x15, x16)\n    x18 = shoot(x15, x17)\n    x19 = underfill(I, ONE, x18)\n    x20 = objects(x19, T, F, F)\n    x21 = colorfilter(x20, ONE)\n    x22 = rbind(adjacent, x2)\n    x23 = sfilter(x21, x22)\n    x24 = difference(x21, x23)\n    x25 = merge(x24)\n    x26 = cover(x19, x25)\n    x27 = shoot(x5, DOWN)\n    x28 = shoot(x5, UP)\n    x29 = shoot(x5, LEFT)\n    x30 = shoot(x5, RIGHT)\n    x31 = combine(x27, x28)\n    x32 = combine(x29, x30)\n    x33 = branch(x3, x31, x32)\n    x34 = ofcolor(x26, ONE)\n    x35 = initset(x15)\n    x36 = rbind(manhattan, x35)\n    x37 = compose(x36, initset)\n    x38 = argmax(x34, x37)\n    x39 = initset(x38)\n    x40 = gravitate(x39, x33)\n    x41 = crement(x40)\n    x42 = add(x38, x41)\n    x43 = connect(x38, x42)\n    x44 = fill(x26, ONE, x43)\n    x45 = connect(x42, x5)\n    x46 = underfill(x44, ONE, x45)\n    O = replace(x46, ONE, THREE)\n    return O", "line_count": 49}
{"name": "a64e4611", "graph": "graph TD\n    x1[asindices]\n    x2[fork]\n    x3[lbind]\n    x4[compose]\n    x5[fork]\n    x6[compose]\n    x7[lbind]\n    x8[rbind]\n    x9[lbind]\n    x10[lbind]\n    x11[rbind]\n    x12[lbind]\n    x13[chain]\n    x14[compose]\n    x15[compose]\n    x16[fork]\n    x17[chain]\n    x18[compose]\n    x19[fork]\n    x20[fork]\n    x21[multiply]\n    x22[interval]\n    x23[astuple]\n    x24[x20]\n    x25[fill]\n    x26[interval]\n    x27[astuple]\n    x28[x20]\n    x29[fill]\n    x30[astuple]\n    x31[x20]\n    x32[fill]\n    x33[rbind]\n    x34[rbind]\n    x35[chain]\n    x36[matcher]\n    x37[sfilter]\n    x38[fill]\n    x39[ofcolor]\n    x40[rbind]\n    x41[compose]\n    x42[lbind]\n    x43[rbind]\n    x44[chain]\n    x45[compose]\n    x46[fork]\n    x47[sfilter]\n    O[fill]\n    I[I]\n    I --> x1\n    product --> x2\n    identity --> x2\n    identity --> x2\n    canvas --> x3\n    ZERO --> x3\n    asobject --> x4\n    x3 --> x4\n    multiply --> x5\n    first --> x5\n    last --> x5\n    positive --> x6\n    size --> x6\n    lbind --> x7\n    shift --> x7\n    fork --> x8\n    x5 --> x8\n    x8 --> x9\n    multiply --> x9\n    chain --> x10\n    x6 --> x10\n    x10 --> x11\n    x4 --> x11\n    lbind --> x12\n    occurrences --> x12\n    x9 --> x13\n    x11 --> x13\n    x12 --> x13\n    x2 --> x14\n    first --> x14\n    x13 --> x15\n    last --> x15\n    argmax --> x16\n    x14 --> x16\n    x15 --> x16\n    x7 --> x17\n    x4 --> x17\n    x16 --> x17\n    x4 --> x18\n    x16 --> x18\n    occurrences --> x19\n    last --> x19\n    x18 --> x19\n    mapply --> x20\n    x17 --> x20\n    x19 --> x20\n    TWO --> x21\n    SIX --> x21\n    THREE --> x22\n    x21 --> x22\n    ONE --> x22\n    x22 --> x23\n    I --> x23\n    x23 --> x24\n    I --> x25\n    THREE --> x25\n    x24 --> x25\n    THREE --> x26\n    TEN --> x26\n    ONE --> x26\n    x26 --> x27\n    x25 --> x27\n    x27 --> x28\n    x25 --> x29\n    THREE --> x29\n    x28 --> x29\n    x26 --> x30\n    x29 --> x30\n    x30 --> x31\n    x29 --> x32\n    THREE --> x32\n    x31 --> x32\n    toobject --> x33\n    x32 --> x33\n    colorcount --> x34\n    THREE --> x34\n    x34 --> x35\n    x33 --> x35\n    neighbors --> x35\n    x35 --> x36\n    EIGHT --> x36\n    x1 --> x37\n    x36 --> x37\n    I --> x38\n    THREE --> x38\n    x37 --> x38\n    x38 --> x39\n    ZERO --> x39\n    bordering --> x40\n    x38 --> x40\n    x40 --> x41\n    initset --> x41\n    contained --> x42\n    THREE --> x42\n    toobject --> x43\n    x38 --> x43\n    x42 --> x44\n    palette --> x44\n    x43 --> x44\n    x44 --> x45\n    dneighbors --> x45\n    both --> x46\n    x45 --> x46\n    x41 --> x46\n    x39 --> x47\n    x46 --> x47\n    x38 --> O\n    THREE --> O\n    x47 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a64e4611(I):\n    x1 = asindices(I)\n    x2 = fork(product, identity, identity)\n    x3 = lbind(canvas, ZERO)\n    x4 = compose(asobject, x3)\n    x5 = fork(multiply, first, last)\n    x6 = compose(positive, size)\n    x7 = lbind(lbind, shift)\n    x8 = rbind(fork, x5)\n    x9 = lbind(x8, multiply)\n    x10 = lbind(chain, x6)\n    x11 = rbind(x10, x4)\n    x12 = lbind(lbind, occurrences)\n    x13 = chain(x9, x11, x12)\n    x14 = compose(x2, first)\n    x15 = compose(x13, last)\n    x16 = fork(argmax, x14, x15)\n    x17 = chain(x7, x4, x16)\n    x18 = compose(x4, x16)\n    x19 = fork(occurrences, last, x18)\n    x20 = fork(mapply, x17, x19)\n    x21 = multiply(TWO, SIX)\n    x22 = interval(THREE, x21, ONE)\n    x23 = astuple(x22, I)\n    x24 = x20(x23)\n    x25 = fill(I, THREE, x24)\n    x26 = interval(THREE, TEN, ONE)\n    x27 = astuple(x26, x25)\n    x28 = x20(x27)\n    x29 = fill(x25, THREE, x28)\n    x30 = astuple(x26, x29)\n    x31 = x20(x30)\n    x32 = fill(x29, THREE, x31)\n    x33 = rbind(toobject, x32)\n    x34 = rbind(colorcount, THREE)\n    x35 = chain(x34, x33, neighbors)\n    x36 = matcher(x35, EIGHT)\n    x37 = sfilter(x1, x36)\n    x38 = fill(I, THREE, x37)\n    x39 = ofcolor(x38, ZERO)\n    x40 = rbind(bordering, x38)\n    x41 = compose(x40, initset)\n    x42 = lbind(contained, THREE)\n    x43 = rbind(toobject, x38)\n    x44 = chain(x42, palette, x43)\n    x45 = compose(x44, dneighbors)\n    x46 = fork(both, x45, x41)\n    x47 = sfilter(x39, x46)\n    O = fill(x38, THREE, x47)\n    return O", "line_count": 50}
{"name": "7837ac64", "graph": "graph TD\n    x1[fgpartition]\n    x2[argmax]\n    x3[remove]\n    x4[merge]\n    x5[subgrid]\n    x6[chain]\n    x7[x6]\n    x8[objects]\n    x9[colorfilter]\n    x10[rbind]\n    x11[chain]\n    x12[lbind]\n    x13[chain]\n    x14[compose]\n    x15[compose]\n    x16[matcher]\n    x17[fork]\n    x18[sfilter]\n    x19[compose]\n    x20[fork]\n    x21[mapply]\n    x22[paint]\n    x23[first]\n    x24[height]\n    x25[height]\n    x26[increment]\n    x27[interval]\n    x28[interval]\n    x29[rbind]\n    x30[chain]\n    x31[lbind]\n    x32[rbind]\n    x33[rbind]\n    x34[chain]\n    x35[compose]\n    x36[power]\n    x37[x36]\n    O[downscale]\n    I[I]\n    I --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    x1 --> x3\n    x3 --> x4\n    x4 --> x5\n    I --> x5\n    color --> x6\n    merge --> x6\n    frontiers --> x6\n    I --> x7\n    x5 --> x8\n    T --> x8\n    F --> x8\n    F --> x8\n    x8 --> x9\n    ZERO --> x9\n    toobject --> x10\n    x5 --> x10\n    x10 --> x11\n    corners --> x11\n    outbox --> x11\n    contained --> x12\n    x7 --> x12\n    x12 --> x13\n    palette --> x13\n    x11 --> x13\n    numcolors --> x14\n    x11 --> x14\n    flip --> x15\n    x13 --> x15\n    x14 --> x16\n    ONE --> x16\n    both --> x17\n    x15 --> x17\n    x16 --> x17\n    x9 --> x18\n    x17 --> x18\n    color --> x19\n    x11 --> x19\n    recolor --> x20\n    x19 --> x20\n    identity --> x20\n    x20 --> x21\n    x18 --> x21\n    x5 --> x22\n    x21 --> x22\n    x9 --> x23\n    x23 --> x24\n    x5 --> x25\n    x24 --> x26\n    ZERO --> x27\n    x25 --> x27\n    x26 --> x27\n    ZERO --> x28\n    x25 --> x28\n    ONE --> x28\n    contained --> x29\n    x27 --> x29\n    flip --> x30\n    x29 --> x30\n    last --> x30\n    apply --> x31\n    first --> x31\n    sfilter --> x32\n    x30 --> x32\n    pair --> x33\n    x28 --> x33\n    x31 --> x34\n    x32 --> x34\n    x33 --> x34\n    dmirror --> x35\n    x34 --> x35\n    x35 --> x36\n    TWO --> x36\n    x22 --> x37\n    x37 --> O\n    x24 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_7837ac64(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O", "line_count": 40}
{"name": "a8c38be5", "graph": "graph TD\n    x1[replace]\n    x2[objects]\n    x3[apply]\n    x4[astuple]\n    x5[canvas]\n    x6[asindices]\n    x7[box]\n    x8[center]\n    x9[lbind]\n    x10[rbind]\n    x11[compose]\n    x12[chain]\n    x13[corners]\n    x14[mapply]\n    x15[difference]\n    x16[inbox]\n    x17[sfilter]\n    x18[combine]\n    x19[fill]\n    x20[objects]\n    x21[apply]\n    x22[lbind]\n    x23[lbind]\n    x24[chain]\n    x25[compose]\n    x26[fork]\n    x27[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    FIVE --> x1\n    ZERO --> x1\n    x1 --> x2\n    T --> x2\n    F --> x2\n    T --> x2\n    normalize --> x3\n    x2 --> x3\n    NINE --> x4\n    NINE --> x4\n    FIVE --> x5\n    x4 --> x5\n    x5 --> x6\n    x6 --> x7\n    x6 --> x8\n    contained --> x9\n    ZERO --> x9\n    subtract --> x10\n    x8 --> x10\n    x9 --> x11\n    x10 --> x11\n    outbox --> x12\n    outbox --> x12\n    initset --> x12\n    x6 --> x13\n    x12 --> x14\n    x13 --> x14\n    x7 --> x15\n    x14 --> x15\n    x7 --> x16\n    x16 --> x17\n    x11 --> x17\n    x15 --> x18\n    x17 --> x18\n    x5 --> x19\n    ONE --> x19\n    x18 --> x19\n    x19 --> x20\n    T --> x20\n    F --> x20\n    T --> x20\n    toindices --> x21\n    x20 --> x21\n    matcher --> x22\n    normalize --> x22\n    extract --> x23\n    x21 --> x23\n    ulcorner --> x24\n    x23 --> x24\n    x22 --> x24\n    x24 --> x25\n    toindices --> x25\n    shift --> x26\n    identity --> x26\n    x25 --> x26\n    x26 --> x27\n    x3 --> x27\n    x5 --> O\n    x27 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_a8c38be5(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(FIVE, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O", "line_count": 30}
{"name": "b775ac94", "graph": "graph TD\n    x1[objects]\n    x2[lbind]\n    x3[rbind]\n    x4[chain]\n    x5[fork]\n    x6[fork]\n    x7[lbind]\n    x8[rbind]\n    x9[chain]\n    x10[fork]\n    x11[fork]\n    x12[lbind]\n    x13[chain]\n    x14[fork]\n    x15[fork]\n    x16[chain]\n    x17[chain]\n    x18[fork]\n    x19[fork]\n    x20[fork]\n    x21[fork]\n    x22[fork]\n    x23[compose]\n    x24[fork]\n    x25[lbind]\n    x26[x25]\n    x27[x25]\n    x28[x25]\n    x29[compose]\n    x30[lbind]\n    x31[x30]\n    x32[x30]\n    x33[x30]\n    x34[fork]\n    x35[fork]\n    x36[fork]\n    x37[lbind]\n    x38[lbind]\n    x39[x38]\n    x40[x38]\n    x41[x38]\n    x42[x38]\n    x43[fork]\n    x44[fork]\n    x45[fork]\n    x46[chain]\n    x47[chain]\n    x48[chain]\n    x49[fork]\n    x50[fork]\n    x51[fork]\n    x52[mapply]\n    x53[mapply]\n    x54[mapply]\n    x55[paint]\n    x56[paint]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    rbind --> x2\n    equality --> x2\n    compose --> x3\n    first --> x3\n    x3 --> x4\n    x2 --> x4\n    mostcolor --> x4\n    sfilter --> x5\n    identity --> x5\n    x4 --> x5\n    difference --> x6\n    identity --> x6\n    x5 --> x6\n    rbind --> x7\n    adjacent --> x7\n    compose --> x8\n    initset --> x8\n    x8 --> x9\n    x7 --> x9\n    x6 --> x9\n    extract --> x10\n    x5 --> x10\n    x9 --> x10\n    insert --> x11\n    x10 --> x11\n    x6 --> x11\n    recolor --> x12\n    ZERO --> x12\n    x12 --> x13\n    delta --> x13\n    x11 --> x13\n    combine --> x14\n    x11 --> x14\n    x13 --> x14\n    position --> x15\n    x5 --> x15\n    x6 --> x15\n    toivec --> x16\n    first --> x16\n    x15 --> x16\n    tojvec --> x17\n    last --> x17\n    x15 --> x17\n    multiply --> x18\n    shape --> x18\n    x16 --> x18\n    multiply --> x19\n    shape --> x19\n    x17 --> x19\n    multiply --> x20\n    shape --> x20\n    x15 --> x20\n    shift --> x21\n    hmirror --> x21\n    x18 --> x21\n    shift --> x22\n    vmirror --> x22\n    x19 --> x22\n    hmirror --> x23\n    vmirror --> x23\n    shift --> x24\n    x23 --> x24\n    x20 --> x24\n    compose --> x25\n    x5 --> x25\n    x21 --> x26\n    x22 --> x27\n    x24 --> x28\n    crement --> x29\n    invert --> x29\n    compose --> x30\n    x29 --> x30\n    x16 --> x31\n    x17 --> x32\n    x15 --> x33\n    shift --> x34\n    x26 --> x34\n    x31 --> x34\n    shift --> x35\n    x27 --> x35\n    x32 --> x35\n    shift --> x36\n    x28 --> x36\n    x33 --> x36\n    index --> x37\n    I --> x37\n    compose --> x38\n    toindices --> x38\n    x14 --> x39\n    x34 --> x40\n    x35 --> x41\n    x36 --> x42\n    intersection --> x43\n    x39 --> x43\n    x40 --> x43\n    intersection --> x44\n    x39 --> x44\n    x41 --> x44\n    intersection --> x45\n    x39 --> x45\n    x42 --> x45\n    x37 --> x46\n    first --> x46\n    x43 --> x46\n    x37 --> x47\n    first --> x47\n    x44 --> x47\n    x37 --> x48\n    first --> x48\n    x45 --> x48\n    recolor --> x49\n    x46 --> x49\n    x34 --> x49\n    recolor --> x50\n    x47 --> x50\n    x35 --> x50\n    recolor --> x51\n    x48 --> x51\n    x36 --> x51\n    x49 --> x52\n    x1 --> x52\n    x50 --> x53\n    x1 --> x53\n    x51 --> x54\n    x1 --> x54\n    I --> x55\n    x52 --> x55\n    x55 --> x56\n    x53 --> x56\n    x56 --> O\n    x54 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_b775ac94(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(compose, first)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = fork(sfilter, identity, x4)\n    x6 = fork(difference, identity, x5)\n    x7 = lbind(rbind, adjacent)\n    x8 = rbind(compose, initset)\n    x9 = chain(x8, x7, x6)\n    x10 = fork(extract, x5, x9)\n    x11 = fork(insert, x10, x6)\n    x12 = lbind(recolor, ZERO)\n    x13 = chain(x12, delta, x11)\n    x14 = fork(combine, x11, x13)\n    x15 = fork(position, x5, x6)\n    x16 = chain(toivec, first, x15)\n    x17 = chain(tojvec, last, x15)\n    x18 = fork(multiply, shape, x16)\n    x19 = fork(multiply, shape, x17)\n    x20 = fork(multiply, shape, x15)\n    x21 = fork(shift, hmirror, x18)\n    x22 = fork(shift, vmirror, x19)\n    x23 = compose(hmirror, vmirror)\n    x24 = fork(shift, x23, x20)\n    x25 = lbind(compose, x5)\n    x26 = x25(x21)\n    x27 = x25(x22)\n    x28 = x25(x24)\n    x29 = compose(crement, invert)\n    x30 = lbind(compose, x29)\n    x31 = x30(x16)\n    x32 = x30(x17)\n    x33 = x30(x15)\n    x34 = fork(shift, x26, x31)\n    x35 = fork(shift, x27, x32)\n    x36 = fork(shift, x28, x33)\n    x37 = lbind(index, I)\n    x38 = lbind(compose, toindices)\n    x39 = x38(x14)\n    x40 = x38(x34)\n    x41 = x38(x35)\n    x42 = x38(x36)\n    x43 = fork(intersection, x39, x40)\n    x44 = fork(intersection, x39, x41)\n    x45 = fork(intersection, x39, x42)\n    x46 = chain(x37, first, x43)\n    x47 = chain(x37, first, x44)\n    x48 = chain(x37, first, x45)\n    x49 = fork(recolor, x46, x34)\n    x50 = fork(recolor, x47, x35)\n    x51 = fork(recolor, x48, x36)\n    x52 = mapply(x49, x1)\n    x53 = mapply(x50, x1)\n    x54 = mapply(x51, x1)\n    x55 = paint(I, x52)\n    x56 = paint(x55, x53)\n    O = paint(x56, x54)\n    return O", "line_count": 59}
{"name": "97a05b5b", "graph": "graph TD\n    x1[objects]\n    x2[argmax]\n    x3[subgrid]\n    x4[rbind]\n    x5[compose]\n    x6[sfilter]\n    x7[lbind]\n    x8[switch]\n    x9[lbind]\n    x10[lbind]\n    x11[compose]\n    x12[matcher]\n    x13[compose]\n    x14[rbind]\n    x15[rbind]\n    x16[lbind]\n    x17[compose]\n    x18[fork]\n    x19[chain]\n    x20[objects]\n    x21[apply]\n    x22[chain]\n    x23[rbind]\n    x24[lbind]\n    x25[chain]\n    x26[compose]\n    x27[lbind]\n    x28[chain]\n    x29[compose]\n    x30[rbind]\n    x31[compose]\n    x32[lbind]\n    x33[rbind]\n    x34[chain]\n    x35[fork]\n    x36[fork]\n    x37[compose]\n    x38[fork]\n    x39[astuple]\n    x40[astuple]\n    x41[combine]\n    x42[product]\n    x43[fork]\n    x44[apply]\n    x45[lbind]\n    x46[mapply]\n    x47[mapply]\n    x48[paint]\n    x49[palette]\n    x50[lbind]\n    x51[x50]\n    x52[chain]\n    x53[rbind]\n    x54[chain]\n    x55[sfilter]\n    x56[fork]\n    x57[fork]\n    x58[mapply]\n    x59[mapply]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    x1 --> x2\n    size --> x2\n    x2 --> x3\n    I --> x3\n    greater --> x4\n    ONE --> x4\n    x4 --> x5\n    numcolors --> x5\n    x1 --> x6\n    x5 --> x6\n    rbind --> x7\n    subtract --> x7\n    x3 --> x8\n    TWO --> x8\n    ZERO --> x8\n    occurrences --> x9\n    x8 --> x9\n    lbind --> x10\n    shift --> x10\n    x7 --> x11\n    ulcorner --> x11\n    first --> x12\n    TWO --> x12\n    flip --> x13\n    x12 --> x13\n    sfilter --> x14\n    x12 --> x14\n    sfilter --> x15\n    x13 --> x15\n    recolor --> x16\n    ZERO --> x16\n    x16 --> x17\n    x15 --> x17\n    combine --> x18\n    x17 --> x18\n    x14 --> x18\n    x11 --> x19\n    x18 --> x19\n    normalize --> x19\n    x8 --> x20\n    T --> x20\n    T --> x20\n    T --> x20\n    toindices --> x21\n    x20 --> x21\n    x9 --> x22\n    x18 --> x22\n    normalize --> x22\n    colorcount --> x23\n    TWO --> x23\n    sfilter --> x24\n    x21 --> x24\n    size --> x25\n    first --> x25\n    x24 --> x25\n    positive --> x26\n    size --> x26\n    lbind --> x27\n    contained --> x27\n    x26 --> x28\n    x24 --> x28\n    x27 --> x28\n    x25 --> x29\n    x27 --> x29\n    sfilter --> x30\n    x28 --> x30\n    x30 --> x31\n    x22 --> x31\n    rbind --> x32\n    equality --> x32\n    compose --> x33\n    x29 --> x33\n    x33 --> x34\n    x32 --> x34\n    x23 --> x34\n    sfilter --> x35\n    x31 --> x35\n    x34 --> x35\n    apply --> x36\n    x19 --> x36\n    x35 --> x36\n    x10 --> x37\n    normalize --> x37\n    mapply --> x38\n    x37 --> x38\n    x36 --> x38\n    cmirror --> x39\n    dmirror --> x39\n    hmirror --> x40\n    vmirror --> x40\n    x39 --> x41\n    x40 --> x41\n    x41 --> x42\n    x41 --> x42\n    compose --> x43\n    first --> x43\n    last --> x43\n    x43 --> x44\n    x42 --> x44\n    rapply --> x45\n    x44 --> x45\n    x45 --> x46\n    x6 --> x46\n    x38 --> x47\n    x46 --> x47\n    x3 --> x48\n    x47 --> x48\n    x47 --> x49\n    remove --> x50\n    TWO --> x50\n    x49 --> x51\n    first --> x52\n    x50 --> x52\n    palette --> x52\n    contained --> x53\n    x51 --> x53\n    flip --> x54\n    x53 --> x54\n    x52 --> x54\n    x6 --> x55\n    x54 --> x55\n    apply --> x56\n    x19 --> x56\n    x22 --> x56\n    mapply --> x57\n    x37 --> x57\n    x56 --> x57\n    x45 --> x58\n    x55 --> x58\n    x57 --> x59\n    x58 --> x59\n    x48 --> O\n    x59 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_97a05b5b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, numcolors)\n    x6 = sfilter(x1, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = switch(x3, TWO, ZERO)\n    x9 = lbind(occurrences, x8)\n    x10 = lbind(lbind, shift)\n    x11 = compose(x7, ulcorner)\n    x12 = matcher(first, TWO)\n    x13 = compose(flip, x12)\n    x14 = rbind(sfilter, x12)\n    x15 = rbind(sfilter, x13)\n    x16 = lbind(recolor, ZERO)\n    x17 = compose(x16, x15)\n    x18 = fork(combine, x17, x14)\n    x19 = chain(x11, x18, normalize)\n    x20 = objects(x8, T, T, T)\n    x21 = apply(toindices, x20)\n    x22 = chain(x9, x18, normalize)\n    x23 = rbind(colorcount, TWO)\n    x24 = lbind(sfilter, x21)\n    x25 = chain(size, first, x24)\n    x26 = compose(positive, size)\n    x27 = lbind(lbind, contained)\n    x28 = chain(x26, x24, x27)\n    x29 = compose(x25, x27)\n    x30 = rbind(sfilter, x28)\n    x31 = compose(x30, x22)\n    x32 = lbind(rbind, equality)\n    x33 = rbind(compose, x29)\n    x34 = chain(x33, x32, x23)\n    x35 = fork(sfilter, x31, x34)\n    x36 = fork(apply, x19, x35)\n    x37 = compose(x10, normalize)\n    x38 = fork(mapply, x37, x36)\n    x39 = astuple(cmirror, dmirror)\n    x40 = astuple(hmirror, vmirror)\n    x41 = combine(x39, x40)\n    x42 = product(x41, x41)\n    x43 = fork(compose, first, last)\n    x44 = apply(x43, x42)\n    x45 = lbind(rapply, x44)\n    x46 = mapply(x45, x6)\n    x47 = mapply(x38, x46)\n    x48 = paint(x3, x47)\n    x49 = palette(x47)\n    x50 = lbind(remove, TWO)\n    x51 = x50(x49)\n    x52 = chain(first, x50, palette)\n    x53 = rbind(contained, x51)\n    x54 = chain(flip, x53, x52)\n    x55 = sfilter(x6, x54)\n    x56 = fork(apply, x19, x22)\n    x57 = fork(mapply, x37, x56)\n    x58 = mapply(x45, x55)\n    x59 = mapply(x57, x58)\n    O = paint(x48, x59)\n    return O", "line_count": 62}
{"name": "3e980e27", "graph": "graph TD\n    x1[objects]\n    x2[astuple]\n    x3[invert]\n    x4[astuple]\n    x5[astuple]\n    x6[initset]\n    x7[insert]\n    x8[insert]\n    x9[lbind]\n    x10[lbind]\n    x11[compose]\n    x12[lbind]\n    x13[lbind]\n    x14[compose]\n    x15[rbind]\n    x16[lbind]\n    x17[x14]\n    x18[x14]\n    x19[fork]\n    x20[fork]\n    x21[compose]\n    x22[compose]\n    x23[sfilter]\n    x24[argmax]\n    x25[remove]\n    x26[vmirror]\n    x27[chain]\n    x28[x27]\n    x29[mapply]\n    x30[sfilter]\n    x31[argmax]\n    x32[remove]\n    x33[chain]\n    x34[x33]\n    x35[mapply]\n    x36[combine]\n    O[paint]\n    I[I]\n    I --> x1\n    F --> x1\n    T --> x1\n    T --> x1\n    TEN --> x2\n    TEN --> x2\n    x2 --> x3\n    TWO --> x4\n    x3 --> x4\n    THREE --> x5\n    x3 --> x5\n    x4 --> x6\n    x5 --> x7\n    x6 --> x7\n    x7 --> x8\n    x1 --> x8\n    contained --> x9\n    TWO --> x9\n    contained --> x10\n    THREE --> x10\n    invert --> x11\n    ulcorner --> x11\n    compose --> x12\n    x11 --> x12\n    rbind --> x13\n    sfilter --> x13\n    x12 --> x14\n    x13 --> x14\n    compose --> x15\n    center --> x15\n    lbind --> x16\n    shift --> x16\n    x9 --> x17\n    x10 --> x18\n    shift --> x19\n    identity --> x19\n    x17 --> x19\n    shift --> x20\n    identity --> x20\n    x18 --> x20\n    x9 --> x21\n    palette --> x21\n    x10 --> x22\n    palette --> x22\n    x8 --> x23\n    x21 --> x23\n    x23 --> x24\n    size --> x24\n    x24 --> x25\n    x23 --> x25\n    x24 --> x26\n    x15 --> x27\n    x16 --> x27\n    x19 --> x27\n    x26 --> x28\n    x28 --> x29\n    x25 --> x29\n    x8 --> x30\n    x22 --> x30\n    x30 --> x31\n    size --> x31\n    x31 --> x32\n    x30 --> x32\n    x15 --> x33\n    x16 --> x33\n    x20 --> x33\n    x31 --> x34\n    x34 --> x35\n    x32 --> x35\n    x29 --> x36\n    x35 --> x36\n    I --> O\n    x36 --> O\n    O --> Output\n    Output[Output]\n    style Output fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px", "function": "def solve_3e980e27(I):\n    x1 = objects(I, F, T, T)\n    x2 = astuple(TEN, TEN)\n    x3 = invert(x2)\n    x4 = astuple(TWO, x3)\n    x5 = astuple(THREE, x3)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x7, x1)\n    x9 = lbind(contained, TWO)\n    x10 = lbind(contained, THREE)\n    x11 = compose(invert, ulcorner)\n    x12 = lbind(compose, x11)\n    x13 = lbind(rbind, sfilter)\n    x14 = compose(x12, x13)\n    x15 = rbind(compose, center)\n    x16 = lbind(lbind, shift)\n    x17 = x14(x9)\n    x18 = x14(x10)\n    x19 = fork(shift, identity, x17)\n    x20 = fork(shift, identity, x18)\n    x21 = compose(x9, palette)\n    x22 = compose(x10, palette)\n    x23 = sfilter(x8, x21)\n    x24 = argmax(x23, size)\n    x25 = remove(x24, x23)\n    x26 = vmirror(x24)\n    x27 = chain(x15, x16, x19)\n    x28 = x27(x26)\n    x29 = mapply(x28, x25)\n    x30 = sfilter(x8, x22)\n    x31 = argmax(x30, size)\n    x32 = remove(x31, x30)\n    x33 = chain(x15, x16, x20)\n    x34 = x33(x31)\n    x35 = mapply(x34, x32)\n    x36 = combine(x29, x35)\n    O = paint(I, x36)\n    return O", "line_count": 39}
